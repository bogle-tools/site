@page "/import-accounts"
@page "/import-accounts-bh"
@inject IAppData appData
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@inject HttpClient Http

<PageTitle>
@pageHeading
</PageTitle>

<div style=float:left>
    <h4 style="max-width:450px">
        @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
    </h4>
</div>
<div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

<div style=clear:left>
    @if (appData.ImportResult == null) {
        @if (csvImport) {
            @if(showError){<br/><br/><span style=color:red>ERROR: must be a CSV file from Ameriprise, eTrade, Fidelity, Merrill Edge, Schwab, T Rowe Price, or Vanguard or a XLSX file from Morgan Stanley.</span><br/>}
            <br/>
            
            <p>As mentioned in <a href=/updating-portfolio>/updating-portfolio</a> there are 3 ways to enter/update data about your portolio. Importing CSV files is one of those techniques.</p>

            <ol>
                <li><b>Download CSV file</b>: download portfolio details (CSV file) from custodian website (see Detailed steps below for each supported Custodian)</li>
                <li><b>Import CSV file</b>: Click "Choose Files" button to import new or updated account information into your <a href=/profiles>active bogle.tools profile's</a> portfolio</li>
                <li><b>Choose Account Type</b>: Choose Account Type for each new account</li>
                <li><b>Cost Basis</b>: Enter/verify Cost Basis for each taxable investment</li>
            </ol>

            <fieldset style=margin-left:20px>
                <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                <ul>
                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/help>Help/FAQ page</a></li>
                </ul>
            </fieldset><br/>

                <p><b>Detailed steps for Vanguard accounts</b>:
                <ol>
                    <li>Log into <a target=_new href=https://vanguard.com>vanguard.com</a>↗️</li>
                    <li>Click on the <a target=_new href=https://holdings.web.vanguard.com>Holdings</a>↗️ link</li>
                    <li>Click on the <a target=_new href=https://personal1.vanguard.com/ofu-open-fin-exchange-webapp/ofx-welcome>Download Center</a>↗️ link to the right</li>
                    <li>Step 1 - Choose "A spreadsheet-compatible CSV File"</li>
                    <li>Step 2 - Choose any date range (I choose 18 months, but bogle.tools doesn't use this transaction information yet, so 1 month is fine too)</li>
                    <li>Step 3 - Choose all accounts you'd like to export holdings info about</li>
                    <li>Press Download button on bottom right of page - a file named OfxDownload.csv will be downloaded via your browser</li>
                    <li>Click "Choose File" button on this page, find and choose the OfxDownload.csv file in Downloads folder</li>
                    <li>Choose Account Type for each new account and enter/verify Cost Basis for each taxable investment</li>
                    <li>For Taxable accounts, update Cost Basis by copying "Total cost" of each investment from <a target=_new href=https://cost-basis.web.vanguard.com/unrealized>Vanguard's Cost Basis view</a>↗️</li>
                </ol>
                </p>

                <p><b>Detailed steps for Fidelity accounts</b>:
                <ol>
                    <li>Log into <a target=_new href=https://fidelity.com>fidelity.com</a>↗️</li>
                    <li>Click on the <a target=_new href=https://digital.fidelity.com/ftgw/digital/portfolio/positions>Positions</a>↗️ link</li>
                    <li>Click on the Download button with this image: <img src=/images/fidelity-download-csv.png />, found on the right side of screen just above the table for the first account's positions.</li>
                    <li>A file named Portfolio_Positions_[DATE].csv will be downloaded via your browser</li>
                    <li>Click "Choose File" button on this page, find and choose the Portfolio_Positions_[DATE].csv file in Downloads folder</li>
                    <li>Choose Account Type for each new account</li>
                </ol>
                </p>

                <p><b>Basic steps for Ameriprise, eTrade, Merrill Edge, Morgan Stanley, T Rowe Price, or Schwab accounts</b>:
                <ol>
                    <li>Log into that website</li>
                    <li>Find and download the data file</li>
                    <li>Click "Choose File" button on this page, find and choose the file that you downloaded</li>
                    <li>please email <a href=mailto:suggestions@bogle.tools>suggestions@bogle.tools</a> with more details so these steps can be enhanced</li>
                </ol>
                </p>

                <p><b>Other Custodians</b>:
                    <ol>
                        <li>If your custodian's format isn't supported yet, we're happy to try to add support</li>
                        <li>download the CSV file for your account(s) from another Custodian</li>
                        <li>anonymize/change the data in that CSV file (using a text editor)</li>
                        <li>email it to <a href=mailto:suggestions@bogle.tools>suggestions@bogle.tools</a> with details on what custodian it is from.</li>
                    </ol>
                </p>
        } else { // BH format import
            <p>Please paste in the text from a Bogleheads Portfolio Reivew post. Following correct format will improve chances of parsing working.</p>
            <button @onclick=importBH>load</button><br/>
            <textarea cols=100 rows=50 @bind-value="bhContent" @bind-value:event="oninput" />


        }
    }
    else
    {
        if (appData?.FamilyData is not null) {
            bool alternateRow;
            <EditForm Model=@appData.ImportResult>
                <br/>
                <div>Those data file(s) contain info on @(appData.ImportResult.UpdatedAccounts.Count+appData.ImportResult.NewAccounts.Count) accounts</div>
                <br/>
                Each account should be labeled with the correct owner and account type.<br/>
                - First, choose/verify your Tax Filing Status: <select @bind=appData.FamilyData.TaxFilingStatus>
                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                    <option>Single</option>
                    <option value=MarriedFilingJointly>Married filing jointly</option>
                    <option value=MarriedFilingSeperately>Married filing separately</option>
                    <option value=HeadOfHousehold>Head of Household</option>
                </select><br/>
                @for (int i = 0; i < appData.FamilyData.PersonCount; i++) {
                    var person = appData.FamilyData.People[i];
                    if (person is not null) {
                        int personIndex = i + 1;

                        @if(person?.FamilyData?.PersonCount>1){
                            @if (i == 0) {
                                <div>- Then choose pronouns/unique identifiers for each person:</div>
                            }
                            <label style=padding-left:16px>Person @personIndex - Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                            <option>person @personIndex</option>
                            <option>him</option>
                            <option>her</option>
                            <option>me</option>
                            <option>them</option>
                        </select><br/>}
                    }
                }
                <span>- Then choose which account(s) to import, and fill in related info about them, then choose "Import selected accounts" button::</span><br/>
                <br/>
                <button @onclick=finishImport>Import selected accounts</button>
                <button @onclick=cancelImport>Cancel Import</button>
                <br/>
                <br/>
                
                @foreach (var error in appData!.ImportResult!.Errors)
                {
                    if (error is not null && error.Exception is not null) {
                        <div style=font-weight:bold>Error: @error.Exception.Message</div>
                        @if(error.Exception.InnerException is not null){ <div>Failure location: <br/>@error.Exception.InnerException.StackTrace<br/><br/></div>};
                        @if(error.Exception.InnerException is not null){ <div>Failure: <br/>@error.Exception.InnerException<br/><br/></div>};
                    }
                }

                @if(appData.ImportResult.UpdatedAccounts.Count > 0) {
                    <div>
                        <InputCheckbox @bind-Value=appData.ImportResult.ImportUpdatedAccounts /> UPDATE these EXISTING accounts  into <a href="/profiles">@appData.CurrentProfileName profile's</a> portfolio:</div>
                        @foreach (var account in appData.ImportResult.UpdatedAccounts)
                        {
                            alternateRow = false;
                            <div style=margin-left:8px;background-color:black;color:white;margin-left:8px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)</div>
                            @foreach (var investment in account.Investments)
                            {
                                string bgColor = alternateRow ? "white" : "lightgray";
                                alternateRow = !alternateRow;
                                <div style=margin-left:16px;background-color:@bgColor>
                                    @investment.Name (@investment.Ticker) @(investment.Shares) shares =&gt; @FormatUtilities.formatMoney(investment.Value)<br/>
                                    @if(account?.ReplaceAccount?.AccountType == "Taxable" && investment.AssetType != AssetType.Cash_MoneyMarket) {
                                        <div>@account.AccountType
                                            &nbsp;<label>Cost Basis: </label>
                                            <span>$</span>
                                            <input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                        </div>
                                    }
                                    <label style=padding-left:16px>Asset Type:</label>
                                    @if(investment.AssetType == AssetType.Unknown || investment.AssetType == null) {
                                        <select @bind=investment.AssetType>
                                            @foreach (AssetType assetType in (AssetType[]) Enum.GetValues(typeof(AssetType))) {
                                                <option>@assetType</option>
                                            }
                                        </select>
                                    } else {
                                        <span>@investment.AssetType</span>
                                    }
                                    <br/>
                                </div>
                            }
                            <br/>
                        }
                } else {
                    <span>These imported accounts all appear to be new accounts in this profile:</span><br/>
                }

                <br/>
                @if (appData.ImportResult.NewAccounts.Count > 0) {
                    <div><InputCheckbox @bind-Value=appData.ImportResult.ImportNewAccounts /> ADD these NEW accounts into <a href="/profiles">@appData.CurrentProfileName profile's</a> portfolio:</div>
                    @foreach (var account in appData.ImportResult.NewAccounts)
                    {
                        alternateRow = false;
                        <div style=margin-left:8px;background-color:black;color:white>
                            <InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)
                            <br/>
                            @if (appData.FamilyData.PersonCount == 2) {
                                <label>Account Owner(s):</label>
                                <select style=margin-left:8px@bind=account.Identifier>
                                    <option>our</option>
                                    @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                        <option>@appData.FamilyData.People[p].PossessiveID</option>
                                    }
                                </select>
                            }
                            <label style=margin-left:16px;>Account Type:</label> <select @bind=account.AccountType>
                                <option>Unknown</option>
                                <option>401(k)</option>
                                <option>403(b)</option>
                                <option>457(b)</option>
                                <option>457(b) Governmental</option>
                                <option>529</option>
                                <option>Annuity (Non-Qualified)</option>
                                <option>Annuity (Qualified)</option>
                                <option>Brokerage</option>
                                <option>HSA</option>
                                <option>Individual</option>
                                <option>Inherited IRA</option>
                                <option>Inherited Roth IRA</option>
                                <option value="Traditional IRA">IRA</option>
                                <option>Refundable Deposit</option>
                                <option>Rollover IRA</option>
                                <option>Roth 401(k)</option>
                                <option>Roth IRA</option>
                                <option>SEP IRA</option>
                                <option>SIMPLE IRA</option>
                                <option>Solo 401(k)</option>
                                <option>Taxable</option>
                                <option>Traditional IRA</option>
                            </select>
                        </div>
                        @if (account.TaxType == "Pre-Tax(work)") {
                            <div style=margin-left:8px;background-color:black;color:white>
                                <InputCheckbox id=currentEmployer style=margin-left:20px @bind-Value=account.CurrentEmployerRetirementFund /> <label for=currentEmployer>&nbsp;Current Employer</label><br/>
                            </div>
                        }

                        @foreach (var investment in account.Investments)
                        {
                            string bgColor = alternateRow ? "white" : "lightgray";
                            alternateRow = !alternateRow;
                            <div style=margin-left:16px;background-color:@bgColor>@investment.Name (@investment.Ticker) @(investment.SharesPIN) shares =&gt; @FormatUtilities.formatMoney(investment.ValuePIN)<br/>
                            @if(account.AccountType == "Taxable" && investment.AssetType != AssetType.Cash_MoneyMarket) {
                                <label>Cost Basis: </label>
                                <span>$</span><input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                            }
                            @if(investment.AssetType == AssetType.Unknown || investment.AssetType == null) {
                                <label style=padding-left:16px>Asset Type:</label>
                                <select @bind=investment.AssetType>
                                    @foreach (AssetType assetType in (AssetType[]) Enum.GetValues(typeof(AssetType))) {
                                        <option>@assetType</option>
                                    }
                                </select>
                            }
                            </div>
                        }
                        <br/>
                    }
                }

                <button @onclick=finishImport>Import selected accounts</button>
                <button @onclick=cancelImport>Cancel Import</button>
                <br/>
                <br/>
            </EditForm>
        }
    }
</div>

@code {
    private void importBH() {
        ImportResult importResult = new();
        if (bhContent is not null) {
            var lines = bhContent.Split('\n');
            (var importedFamilyData, var links) = ImportPortfolioReview.ParsePortfolioReview(lines, debug:false, appData, Funds);
            if (importedFamilyData.Accounts.Count > 0) {
                importResult.NewAccounts.AddRange(importedFamilyData.Accounts);
                appData.ImportResult = importResult;
            }
        }
    }

    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        if (appData?.FamilyData is not null) {
            var files = e.GetMultipleFiles();
            appData.ImportResult = await Importer.ImportDataFiles(files, Funds, appData.FamilyData.Accounts, appData.FamilyData.PIN);
            foreach (var account in appData.ImportResult.NewAccounts) 
            {
                account.Import = true;
            }

            if (appData.ImportResult.UpdatedAccounts.Count == 0) {
                appData.ImportResult.ImportNewAccounts = true;
            }

            if (appData.ImportResult.NewAccounts.Count == 0) {
                appData.ImportResult.ImportUpdatedAccounts = true;
            }

            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    foreach (var updatedInvestment in updatedAccount.Investments) {
                        foreach (var existingInvestment in updatedAccount.ReplaceAccount.Investments) {
                            if (existingInvestment.Ticker == updatedInvestment.Ticker) {
                                updatedInvestment.CostBasis = existingInvestment.CostBasis;
                            }
                        }
                    }
                }
            }
        }
    }
    private void finishImport()
    {
        if (appData?.ImportResult is not null && appData?.FamilyData is not null) {
            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    updatedAccount.ReplaceAccount.Investments.Clear();
                    updatedAccount.ReplaceAccount.Investments.AddRange(updatedAccount.Investments);
                }
            }

            foreach (var newAccount in appData.ImportResult.NewAccounts)
            {
                if (newAccount.Import)
                {
                    appData.FamilyData.Accounts.Add(newAccount);
                }
            }

            appData.ImportResult = null;
            Navigation.NavigateTo("/portfolio-tracker");
        }
    }

    private void cancelImport()
    {
        appData.ImportResult = null;
        Navigation.NavigateTo("/portfolio-tracker");
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

        protected override void OnInitialized()
        {
            csvImport = Navigation.Uri.EndsWith("/import-accounts");
            pageHeading = csvImport ? "Import Accounts via CSV files" : "Import Accounts from Bogleheads Portfolio Review format";

            base.OnInitialized();
        }

    private bool showError { get; set; }
    private string? pageHeading;
    private bool csvImport = false;
    private string bhContent = "";
}