@page "/saving"
@page "/saving/{stepPath}"
@inject HttpClient Http

<PageTitle>
saving/@stepPath
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 25px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:250px;
        border-radius: 10px;
    }
</style>

    @if (priorities == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (stepPath == null) {
            <h1>Overview</h1>

            <p>To be most efficient in your savings, consider the Boglehead Investment Priorities<a href="https://www.bogleheads.org/wiki/Prioritizing_investments" class="oi oi-external-link m-2 aria-hidden="true"></a>. Choose each priority to see details.</p>

            <div>
                <table>
                    <thead>
                        <th style="padding-right:10px">Priority</th>
                        <th>Item</th>
                        @if(taxFiling.PersonCount > 0) {<th style="padding-right:10px">Person 1</th> }
                        @if(taxFiling.PersonCount > 1) {<th style="padding-right:10px">Person 2</th> }
                    </thead>
                    <tr>
                            <td></td>
                            <td>
                                    <div>
                                        <a href="/saving/tax-filing-info" style="background:blue" class="m-1 btn" >0: Tax Filing Info</a>

                                    </div>
                            </td>
                            <td></td>
                            <td></td>
                    </tr>
                    @foreach (var priority in priorities) {
                        var href = "/saving/" + @priority.step;

                        <tr>
                            <td>@priority.level</td>
                            <td>
                                    <div>
                                        <a href="@href" style="background:blue" class="m-1 btn" >@priority.number: @priority.bestDiagramTitle</a>

                                    </div>
                            </td>
                            @switch (priority.number) {
                                case 1: 
                                   <td>@taxFiling.EmergencyFund.SavingsOpportunity</td><td></td>
                                   break;
                                case 2: 
                                   <td>@taxFiling.People[0].EmployerPlan.SavingsOpportunity</td>
                                   <td>@taxFiling.People[1].EmployerPlan.SavingsOpportunity</td>
                                   break;
                                case 4: 
                                   <td>@taxFiling.People[0].HealthSavingsAccount.SavingsOpportunity</td>
                                   <td>@taxFiling.People[1].HealthSavingsAccount.SavingsOpportunity</td>
                                   break;
                                case 5: 
                                   <td>@taxFiling.People[0].IRA.SavingsOpportunity or @taxFiling.People[0].RothIRA.SavingsOpportunity</td>
                                   <td>@taxFiling.People[1].IRA.SavingsOpportunity @if(taxFiling.PersonCount > 1) {<span>or</span>} @taxFiling.People[1].RothIRA.SavingsOpportunity</td>
                                   break;
                                case 6: 
                                   <td>@taxFiling.People[0].EmployerPlan.NonMatchedContributionAmount</td>
                                   <td>@taxFiling.People[1].EmployerPlan.NonMatchedContributionAmount</td>
                                   break;                                
                                default:
                                    <td>other</td><td></td>
                                    break;
                            }
                        </tr>
                    }
                </table>
            </div>
        }
        else if (stepPath == "tax-filing-info") {
            <EditForm Model="taxFiling">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <label>Tax Filing Status:</label> <select @bind=taxFiling.TaxFilingStatus>
                            <option value=None>choose...</option>
                            <option>Single</option>
                            <option value=MarriedFilingSeperately>Married filing seperately</option>
                            <option value=MarriedFilingJointly>Married filing jointly</option>
                            </select><br/>

                <label>2022 Adjusted Gross Income:</label> <input type='text' @bind=taxFiling.AdjustedGrossIncome /><br/>
                
            </EditForm>
            @code {
                private TaxFiling taxFiling = new();
            }
        }
        else
        {
            @foreach (var priority in priorities) {
                @if (priority.step == stepPath) {
                    <h2>@priority.number: @priority.title</h2>
                    <h4>@((MarkupString)markupize(priority.priority))</h4>

                    <p><b>Summary:</b> @((MarkupString)markupize(priority.summary))</p>
                    <p><b>Approximate Return:</b> @priority.returns</p>
                    <p><b>Details:</b> @((MarkupString)markupize(priority.description))</p>

                        @switch (priority.number) {
                            case 1:
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="taxFiling">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <label>Monthly Expenses:</label> <span>$</span><input type=text @bind-Value="taxFiling.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <label>Planned size of emergency fund:</label><br/>
                                    <InputRadioGroup @bind-Value=taxFiling.EmergencyFund.TargetMonths>
                                        <InputRadio Value='0'/> None<br/>
                                        <InputRadio Value='1'/> 1 month: $@taxFiling.EmergencyFund.MonthlyExpenses<br/>
                                        <InputRadio Value='3'/> 3 months: $@taxFiling.EmergencyFund.ThreeMonths<br/>
                                        <InputRadio Value='4'/> Other: <br/>
                                    </InputRadioGroup>
                                    <div style="margin-left:20px">$<input type=text @bind-Value="taxFiling.EmergencyFund.EFOther" @bind-Value:event="oninput"/></div>
                                    <br/>
                                    <br/>
                                    <label>Current Size:</label> <span>$</span><input type=text @bind-Value="taxFiling.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>Savings Opportunity:</label> <span>$</span>@taxFiling.EmergencyFund.SavingsOpportunity<br/><br/>
                                </EditForm>
                                break;
                            case 2:
                                @for (int i = 0; i < taxFiling.PersonCount; i++) {
                                    var person = taxFiling.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person">
                                        <InputCheckbox @bind-Value=person.EmployerPlan.Eligible /> <label>Eligible for workplace retirement savings?</label><br/><br/>
                                        <fieldset disabled=@person.EmployerPlan.NotEligible style='margin-left:20px'>
                                            <label>Percent Matched:</label> <input type='text' @bind-Value=person.EmployerPlan.PercentMatched @bind-Value:event=oninput />%<br/>
                                            <label>Limit:</label><input type='text' @bind-Value=person.EmployerPlan.MatchLimit @bind-Value:event=oninput/><br/>
                                            <label>Contribution Required to get maximum match:</label> $<span>@person.EmployerPlan.ContributionRequired</span><br/>
                                        </fieldset><br/>
                                        <label>Savings Opportunity:</label> <span>$</span>@person.EmployerPlan.SavingsOpportunity<br/><br/>
                                    </EditForm>

                                }

                                if (taxFiling.PersonCount == 0) {
                                    <p>One must fill out Tax Filing Info (in step 0) before they can fill out this worksheet</p>
                                }
                                break;
                            case 4:
                                @for (int i = 0; i < taxFiling.PersonCount; i++) {
                                    var person = taxFiling.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person">
                                        <InputCheckbox @bind-Value=person.HealthSavingsAccount.Eligible id='eligible'/> <label for='eligible'>Have high deductible health plan?</label><br/><br/>
                                        <fieldset disabled=@person.HealthSavingsAccount.NotEligible style='margin-left:20px'>
                                            <label>Individual/Family:</label>   <select @bind=person.HealthSavingsAccount.Family><option value=None>choose...</option><option value=EmployeeOnly>Employee only</option><option>Family</option></select><br/>
                                            <label>Limit:</label> @person.HealthSavingsAccount.Limit<br/><br/>

                                            <label>2022 Employer Contribution:</label><input type='text'><br/>
                                            <label>2022 Employee Contribution:</label><input type='text'><br/>
                                        </fieldset>
                                        <br/>
                                        <label>Savings Opportunity:</label> <span>$</span>@person.HealthSavingsAccount.SavingsOpportunity<br/><br/>
                                    </EditForm>
                                }

                                if (taxFiling.PersonCount == 0) {
                                    <b style='background:yellow'>Warning:</b>
                                    <p>One must fill out Tax Filing Info (in step 0) before they can fill out this worksheet</p>
                                }
                                break;
                            case 5:
                                if (taxFiling.AdjustedGrossIncome != null) {
                                    @for (int i = 0; i < taxFiling.PersonCount; i++) {
                                        var person = taxFiling.People[i];
                                        <p><b>Person @(i+1):</b> </p>

                                        <EditForm Model="person">
                                            <InputCheckbox @bind-Value=person.EmployerPlan.Eligible id='eligible'/> <label for='eligible'>Eligible for workplace retirement savings?</label><br/><br/>
                                            <InputCheckbox id=over50 @bind-Value=person.FiftyOrOver /> <label for=over50>50 or older?</label><br/>
                                            <label>IRA Contribution Allowed:</label> <span>@person.IRA.ContributionAllowed</span><br/>
                                            <label>Deduction allowed on IRA:</label> <span>@person.IRA.DeductionAllowed</span><br/>
                                            <label>Roth IRA Contribution Allowed:</label> <span>@person.RothIRA.ContributionAllowed</span><br/>
                                            <br/>
                                        </EditForm>
                                    }
                                }

                                if (taxFiling.PersonCount == 0 || taxFiling.AdjustedGrossIncome == null) {
                                    <b style='background:yellow'>Warning:</b>
                                    <p>One must fill out Tax Filing Info (in step 0) before they can fill out this worksheet</p>
                                }
                                break;
                            case 6:
                                @for (int i = 0; i < taxFiling.PersonCount; i++) {
                                    var person = taxFiling.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person">
                                        <InputCheckbox @bind-Value=person.EmployerPlan.Eligible /> <label>Eligible for workplace retirement savings?</label><br/><br/>

                                        <InputCheckbox id=over50 @bind-Value=person.FiftyOrOver /> <label for=over50>50 or older?</label><br/>

                                        <label>2022 401k Total Contribution Allowed:</label> <span>@person.EmployerPlan.ContributionAllowed</span><br/>
                                        <label>minus Matched Contribution Allowed (step 2):</label> <span>@person.EmployerPlan.ContributionRequired</span><br/>
                                        <label>Savings Opportunity:</label> <span>@person.EmployerPlan.NonMatchedContributionAmount</span><br/><br/>
                                    </EditForm>
                                }

                                if (taxFiling.PersonCount == 0) {
                                    <b style='background:yellow'>Warning:</b>
                                    <p>One must fill out Tax Filing Info (in step 0) before they can fill out this worksheet</p>
                                }
                                break;
                            case 7:
                                @for (int i = 0; i < taxFiling.PersonCount; i++) {
                                    var person = taxFiling.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person">
                                        <input type='checkbox' /> <label>Eligible for Mega Backdoor Roth?</label><br/>
                                        <fieldset disabled=true>
                                            <label>Limit:</label> <input type='text' /><br/>
                                        </fieldset><br/>
                                        <label>Savings Opportunity:</label> <span>$</span><span></span><br/><br/>
                                    </EditForm>
                                }

                                if (taxFiling.PersonCount == 0) {
                                    <b style='background:yellow'>Warning:</b>
                                    <p>One must fill out Tax Filing Info (in step 0) before they can fill out this worksheet</p>
                                }
                                break;
                            case 9:
                                <label>Savings Opportunity:</label> <span>no limits</span><br/>
                                break;
                            case 3:
                            case 8:
                            case 10:
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br>
                                    <table>
                                    <thead>
                                    <th><label>name</label></th>
                                    <th><label>interest rate</label></th>
                                    <th><label>category</label></th>
                                    <th><label>payoff date</label></th>
                                    <th><label>total $</label></th>
                                    </thead>
                                    <tr>
                                    <td><input type='text' /></td>
                                    <td><input type='text' /></td>
                                    <td><span></span></td>
                                    <td><input type='text' /></td>
                                    <td><input type='text' /></td>
                                    </tr>
                                    </table>
                                </div>
                                <br/>
                                <label>Savings Opportunity (@priority.title):</label> <span>$</span><span>0</span><br/>
                                break;
                        }
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        returnVal += "<a href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                     }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                     }
                    break;
                default:
                      switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                     }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    public string foo = "<p>hello <b>worjjld</b> again</p>";

    [Parameter]
    public string? stepPath { get; set; }

    private InvestmentPriority[]? priorities;

    protected override async Task OnInitializedAsync()
    {
        priorities = await Http.GetFromJsonAsync<InvestmentPriority[]>("data/investment-priorities.json");
    }
}
