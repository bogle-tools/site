@page "/rsu-tracker"
@page "/rsu-tracker/{View}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .mainTable {
        border-collapse: collapse;
        border-top: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable thead tr th{
        border-bottom: 1px solid #000000;
    }
    .mainTable th, .mainTable td {
        border-left: 1px solid rgba(0,0,0,0.2);
        border-right: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable th, .mainTable td{ /* Added padding for better layout after collapsing */
        padding: 4px 8px;
    }

    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (steps == null || appData == null || familyData == null)
    {
        <p>
            @if(appData.CurrentProfileName==null){<em>No active <a href=/profiles>profile</a>.</em>} 
            else {<em>Loading...</em>}
        </p>
        <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
            @if(appData.CurrentProfileName==null){<span>choose a</span>}else {<span>@appData.CurrentProfileName</span>}</a> profile
        </div>
    } else if (familyData != null && familyData.PINProtected && familyData.PIN == null) {
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading
            </h4>
        </div>
        <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

        <p style=clear:left>Need PIN</p>
        <input style=width:50px;text-align:right type=text @bind-Value=PINEntry @bind-Value:event=oninput />
        <button @onclick=setPIN>Go</button>
    } else {
        var prevStep = steps[steps.Length - 1];
        var nextStep = steps[0];
        string prevPage = folderName + prevStep?.step;
        string nextPage = folderName + nextStep?.step;
        
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading
            </h4>
        </div>
        <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

        <div style=clear:left>
            <table id=_reviewTable>
                @foreach (var step in steps) {
                    var href = folderName + @step.step;
                    <tr>
                        @switch (step.step) {
                            case "people": 
                                <td>
                                    <a @onclick=toggleTaxFilingStatusEditing class="m-2" >✏️</a>
                                    @((MarkupString)bold("Tax Filing Status:"))
                                    @if (!taxFilingStatusEditing) {
                                        @if (familyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@familyData.TaxFilingStatus</span> }
                                        @if(familyData.PersonCount > 0) {
                                            <span>&nbsp;@getPronoun(familyData.People[0], false)</span>
                                        }
                                        @if(familyData.PersonCount > 1) {
                                            <span>&nbsp;and @getPronoun(familyData.People[1], false)</span>
                                        }
                                        <br/><hr/>
                                    } else {
                                        <select @bind=familyData.TaxFilingStatus>
                                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                                            <option>Single</option>
                                            <option value=MarriedFilingJointly>Married filing jointly</option>
                                            <option value=MarriedFilingSeperately>Married filing seperately</option>
                                            <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                            <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/><br/>
                                        
                                        @for (int i = 0; i < familyData.PersonCount; i++) {
                                            var person = familyData.People[i];
                                            int personIndex = i + 1;

                                            <EditForm Model="person" style=margin-left:25px>
                                                @if(person?.FamilyData?.PersonCount>1){
                                                    <b>Person @personIndex:</b><br/>
                                                    <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                    <option>person @personIndex</option>
                                                    <option>him</option>
                                                    <option>her</option>
                                                    <option>me</option>
                                                    <option>them</option>
                                                </select><br/>}
                                            </EditForm><br/>
                                        }
                                    }
                                </td>
                                break;
                            case "rsu-summary":
                                <td>
                                    <a @onclick=editAccounts class="m-2" >✏️</a>
                                    @if (View == null) {
                                        View = "by-year";
                                    }
                                    @{
                                        var byYearBold = (View == "by-year") ? ";font-weight:bold" : ""; 
                                        var byGrantBold = (View == "by-grant") ? ";font-weight:bold" : ""; 
                                    }

                                    <label>&nbsp;&nbsp;View RSUs:&nbsp;</label>
                                    <span>

                                        <a style='@byYearBold' href=/rsu-tracker>by year</a> | 
                                        <a style='@byGrantBold' href=/rsu-tracker/by-grant>by grant</a>
                                    </span>
                                    <br/>
                                    <br/>
                                    @if(showEditAccountHelpers) {
                                        <br/><i>Editing RSU Grants:</i>
                                        <br/><span>Click on account/investment, in "@EditAccountsViewName" view to edit.
                                        <br/>Add/import accounts buttons are below the account list.
                                        <br/>Details on <a href="/updating-portfolio">3 ways to update portfolios</a>.</span>
                                    }

                                    @switch (View) {
                                        case "by-grant":
                                            @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                var person = appData.FamilyData.People[p];
                                                <p>@person.PossessiveID RSU Grants:</p>

                                                @if(person.RSUGrants.Count > 0) {
                                                    <table class=mainTable>
                                                        <tr style='vertical-align:bottom;border:black sold 1px'>
                                                            <th style=padding-left:8px>Vest Date</th>
                                                            <th style=padding-left:8px;text-align:center>Shares</th>
                                                            <th style=padding-left:8px;text-align:center>~Price</th>
                                                            <th style=padding-left:8px;text-align:center>Value</th>
                                                        </tr>
                                                        @foreach (var rsuGrant in person.RSUGrants) {
                                                            <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                <td style=padding-left:8px;text-align:left colspan=4>@rsuGrant.Shares @rsuGrant.Ticker shares granted on @rsuGrant.Date.ToShortDateString()</td>
                                                            </tr>
                                                            @foreach (var vestEvent in rsuGrant.VestEvents.Where(ve=>ve.Date > DateTime.Now.Date)) {
                                                                <tr style=vertical-align:bottom>
                                                                    <td style=padding-left:8px;text-align:right>@vestEvent.Date.ToShortDateString()</td>
                                                                    <td style=padding-left:8px;text-align:center>@vestEvent.Shares</td>
                                                                    <td style=padding-left:8px;text-align:center>@FormatUtilities.formatMoney(vestEvent.Price)</td>
                                                                    <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestEvent.Value)</td>
                                                                </tr>
                                                            }
                                                            <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                        }
                                                    </table>
                                                    <br/>
                                                } else {
                                                    <p>add UI to add Grants</p>
                                                }
                                            }
                                            break;
                                        case "by-year":
                                            @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                var person = appData.FamilyData.People[p];

                                                @if(person.RSUGrants.Count > 0) {
                                                    var vestMonths = (from rsuGrant in person.RSUGrants  // First foreach loop
                                                        from vestEvent in rsuGrant.VestEvents  // Second foreach loop
                                                        where vestEvent.Date > DateTime.Now.Date
                                                        group vestEvent by new { vestEvent.Date.Year, vestEvent.Date.Month }
                                                        into grp
                                                        select new { month = grp.Key.Month, year = grp.Key.Year, count = grp.Count(), shares = grp.Sum(ve=>ve.Shares), value = grp.Sum(ve=>ve.Value) });
                                                        
                                                    <br/>
                                                    <p>@person.PossessiveID RSU Grants:</p>
                                                    <table class=mainTable>
                                                        <tr style=vertical-align:bottom>
                                                            <th style=padding-left:8px>Vest Month</th>
                                                            <th style=padding-left:8px;text-align:center>Grants</th>
                                                            <th style=padding-left:8px;text-align:center>Shares</th>
                                                            <th style=padding-left:8px;text-align:center>Value</th>
                                                        </tr>
                                                        @{int? lastYear = null;}
                                                        @foreach (var vestMonth in vestMonths) {
                                                            if (lastYear != vestMonth.year) {
                                                                lastYear = vestMonth.year;
                                                                <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                    <td style=padding-left:8px;text-align:left colspan=4>@lastYear</td>
                                                                </tr>
                                                            }
                                                            <tr style=vertical-align:bottom>
                                                                <td style=padding-left:8px;text-align:right>@vestMonth.month-@vestMonth.year</td>
                                                                <td style=padding-left:8px;text-align:center>@vestMonth.count</td>
                                                                <td style=padding-left:8px;text-align:center>@vestMonth.shares</td>
                                                                <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestMonth.value)</td>
                                                            </tr>
                                                        }
                                                        <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                    </table>
                                                }
                                            }
                                            break;                                    
                                    }
                                    @if (appData.FamilyData.Accounts.Count == 0) {
                                        <button style=margin-left:40px @onclick=addAccountInline title='add account'>➕</button>
                                        <button @onclick=ShowImport title='import Accounts from a CSV/XLSX file'>
                                            Import ⬆️
                                        </button>
                                    }
                                </td>
                                break;                                
                            default:
                                break;
                        }
                    </tr>
                }          
            </table>
        </div>
        <br/>
        <p>"Consider making a <a href="/saving">Saving Plan</a> for the year!"</p>
    }

@code {

    async void doneEditing()
    {
        var accounts = familyData.Accounts;
        foreach (var account in accounts) {
            account.Edit = false;
        }
        
        accountIndexEditing = null;

        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    void editAccount(MouseEventArgs e, int index)
    {
        var accounts = familyData.Accounts.OrderByDescending(a=>a.Value).ToList();
        if (accountIndexEditing != null) {
            accounts[accountIndexEditing.Value].Edit = false;            
        }

        accountIndexEditing = index;
        accounts[accountIndexEditing.Value].Edit = true;
    }

    void editAccounts() {
        appData.PortfolioView = EditAccountsViewName;
        showEditAccountHelpers = !showEditAccountHelpers;
    }

    void toggleTaxFilingStatusEditing() {
        taxFilingStatusEditing = !taxFilingStatusEditing;
    }

    void toggleAssetAllocationEditing() {
        assetAllocationEditing = !assetAllocationEditing;
    }

    public const string EditAccountsViewName = "Investments by Accounts";
    
    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Quotes";
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    int? accountIndexEditing = null;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        runningTotal += itemTotal ?? 0;
        if (!pastTotal) {
            pastTotal = familyData.PlannedSavings <= runningTotal;

            if (pastTotal) {
                return "<div>-------<br/><div>Planned savings " + (familyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(familyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
            }
        }

        return "";
    }


    public string getPronoun(Person person)
    {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (focusTicker)
            {
                await tickerN.FocusAsync();
                focusTicker = false;
            } else if (focusAccount) {
                await accountN.FocusAsync();
                focusAccount = false;
            }
    }

    [Parameter]
    public string? View { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/rsu-tracker";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "RSU Tracker";
    
    private bool focusTicker = false;
    private bool focusAccount = false;
    private bool showPortfolioAnalysis = true;

    private FamilyData familyData {
        get {
            return appData.FamilyData;
        }
        set {
            appData.FamilyData = value;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/rsu-tracker-steps.json");
        Navigation.LocationChanged += LocationChanged;
        for(int p=0;p<appData.FamilyData.PersonCount;p++) {
            var person = appData.FamilyData.People[p];

            foreach (var grant in person.RSUGrants) {
                grant.VestEvents.Clear();
                if (grant.Shares != null) {
                    var vestShares = (grant.Shares ?? 0) / grant.VestEventsCount;
                    for (int i=0; i < grant.VestEventsCount; i++) {
                        var vestEvent = new RSUVestEvent() { 
                            Date = grant.Date.AddMonths((i+1) * grant.VestPeriodMonths),
                            Shares = vestShares,
                            Price = grant.LastPrice
                        };
                        grant.VestEvents.Add(vestEvent);
                    }
                }
            }
        }

        base.OnInitialized();
    }

    private ElementReference tickerN;
    private ElementReference accountN;
    private bool showImport = false;
    private bool showError  = false;

    private void ShowImport() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import-accounts");
    }

    private async Task UpdateInvestmentPrice(Investment investment)
    {
        var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={investment.Ticker}&apikey={appData.EODHistoricalDataApiKey}");
        var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
        if (quoteData?.Close != null) {
            investment.Price = quoteData.Close;
            investment.UpdateValue();
        }
    }
    public static DateTime? UnixTimeStampToDateTime( int? unixTimeStamp )
    {
        if (!unixTimeStamp.HasValue) return null;
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ?? 0 ).ToLocalTime();
        return dateTime;
    }
    private async Task UpdateInvestmentsPrice(string ticker, List<Investment> investments)
    {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={ticker}&apikey={appData.EODHistoricalDataApiKey}");
            var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
            if (quoteData?.Close != null) {
                foreach (var investment in investments) {
                    investment.Price = quoteData.Close;
                    if (quoteData.Volume > 0) {
                        investment.PreviousClose = quoteData.PreviousClose; 
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else if (quoteData.Volume == 0) {
                        investment.PreviousClose = quoteData.PreviousClose;
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else {
                        investment.PreviousClose = quoteData.Close;
                        investment.PercentChange = null;
                        investment.LastUpdated = null;
                    }

                    investment.UpdateValue();
                }
            }
        }
    }

    private async Task UpdatePrice(MouseEventArgs e, Investment investment) {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            await UpdateInvestmentPrice(investment);
        }
    }

    private void addInvestment(MouseEventArgs e, int accountIndex)
    {
        var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
        familyData.Accounts[accountIndex].Investments.Add(newInvestment);
        focusTicker = true;
    }

    private void addInvestment2(MouseEventArgs e, int accountIndex) {
        var account = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        account.Investments.Add(new Investment(appData.FamilyData.PIN) { funds = Funds });
    }

    void deleteInvestment2(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        var account = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        var investmentToDelete = account.Investments.OrderByDescending(i=>i.Value).ToList()[investmentIndex];
        account.Investments.Remove(investmentToDelete);
        familyData.UpdatePercentages();
    }

    void deleteInvestment(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        familyData.Accounts[accountIndex].Investments.RemoveAt(investmentIndex);
        Navigation.NavigateTo("/portfolio/reload");
        familyData.UpdatePercentages();
    }

    void addAccountInline()
    {
        var newAccount = new Account(appData.FamilyData.PIN);
        var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
        newAccount.Investments.Add(newInvestment);
        newAccount.Edit = true;
        familyData?.Accounts.Add(newAccount);
    }

    private async void deleteAccount2(MouseEventArgs e, int accountIndex)
    {
        var accountToDelete = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        familyData.Accounts.Remove(accountToDelete);
        accountIndexEditing = null;
        familyData.UpdatePercentages();
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    void addAccount()
    {
        var newAccount = new Account(appData.FamilyData.PIN);
        var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
        newAccount.Investments.Add(newInvestment);
        familyData?.Accounts.Add(newAccount);
        focusAccount = true;
    }
    void deleteAccount(MouseEventArgs e, int accountIndex)
    {
        familyData.Accounts.RemoveAt(accountIndex);
        Navigation.NavigateTo("/portfolio/reload");
        familyData.UpdatePercentages();
    }


    private async Task refreshPrices() {
        refreshButtonText = "Updating...";
        Dictionary<string,List<Investment>> quotes = new();

        var now = DateTime.Now.Date;
        var previousMarketClose = PreviousMarketClose(now).ToLocalTime();
        var nextMarketClose = NextMarketClose(now).ToLocalTime();
        var nextMarketOpen = new DateTime(nextMarketClose.Year,nextMarketClose.Month,nextMarketClose.Day,13,30,00).ToLocalTime();
        var marketIsBeforeOpen = DateTime.Now < nextMarketOpen;
        bool marketIsOpen = DateTime.Now >= nextMarketOpen && DateTime.Now <= nextMarketClose;
        var marketIsAfterClose = DateTime.Now > nextMarketClose;
        foreach (var account in familyData.Accounts)
        {
            foreach (var investment in account.Investments)
            {
                bool fetchQuote = false;
                if (investment.IsStock || investment.IsETF) {
                    fetchQuote = investment.LastUpdated == null || (marketIsBeforeOpen && investment.LastUpdated < previousMarketClose) || marketIsOpen || (marketIsAfterClose && investment.LastUpdated < nextMarketClose);
                } else if (investment.IsFund) {
                    fetchQuote = investment.LastUpdated == null || investment.LastUpdated?.Date != previousMarketClose.Date;
                }

                if (fetchQuote) {
                    if (!quotes.ContainsKey(investment.Ticker)) {
                        quotes.Add(investment.Ticker, new List<Investment> () { investment });
                    } else {
                        var investments = quotes[investment.Ticker];
                        investments.Add(investment);
                    }
                }
            }
        }

        foreach (var quote in quotes)
        {
            try {
                await UpdateInvestmentsPrice(quote.Key, quote.Value);
            } catch (Exception ex) {
                Console.WriteLine(ex.GetType().Name + ": " + ex.Message + " " + ex.StackTrace);
            }
        }

        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        refreshButtonText = "🔃 Quotes";
    }

    enum MarketDay {
        MarketDay,
        Holiday,
        HalfDay,
        WeekEnd
    }
    
    static DateTime[] holidays = {
        new DateTime(2023, 1, 2),
        new DateTime(2023, 1 , 16 ),
        new DateTime(2023, 2, 20),
        new DateTime(2023, 4, 7),
        new DateTime(2023, 5, 29),
        new DateTime(2023, 6, 19),
        new DateTime(2023, 7, 4),
        new DateTime(2023, 9, 4),
        new DateTime(2023, 11, 23),
        new DateTime(2023, 12, 25),
    };

    static DateTime[] halfDays = {
        new DateTime(2023, 7, 3),
        new DateTime(2023, 11, 24),
        new DateTime(2023, 12, 24),
    };

    private MarketDay GetMarketDay(DateTime dateTime) {
        switch (dateTime.DayOfWeek) {
            case DayOfWeek.Saturday: 
            case DayOfWeek.Sunday:
                return MarketDay.WeekEnd;
            default:
                var date = dateTime.Date;
                if (holidays.Contains(date)) {
                    return MarketDay.Holiday;
                }
                
                if (halfDays.Contains(date)) {
                    return MarketDay.HalfDay;
                }

                return MarketDay.MarketDay;
        }
    }

    private int? PINEntry { get; set; }
    private void setPIN() {
        if (PINEntry != null) {
            familyData.PIN = PINEntry;
        }
    }

    private DateTime PreviousMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, -1);
    }
    private DateTime NextMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, 1);
    }
    private DateTime MarketClose(DateTime dateTime, int direction) {
        DateTime marketCloseDay;
        if (direction == -1) {
            marketCloseDay = dateTime.AddDays(direction);
        } else {
            marketCloseDay = dateTime;
        }

        switch (GetMarketDay(marketCloseDay)) {
            case MarketDay.Holiday:
            case MarketDay.WeekEnd:
                return MarketClose(marketCloseDay, direction);
            case MarketDay.HalfDay:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 17, 0, 0);
            default:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 20, 0, 0);
            
        }
    }

    private (double? change, double? percentChange) portfolioChange() 
    {
        double? change = 0.0;
        double? total = 0.0;
        foreach (var investment in familyData.GroupedInvestments)
        {
            total += investment.Value ?? 0.0;
            if (investment.PercentChange != null)
            {
                change += (investment.Price - investment.PreviousClose) * investment.SharesPIN;
            }
        }

        var startOfDayTotal = total - change;
        return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }
}
