@page "/profiles"
@page "/import/{copyCode}"
@inject IAppData appData
@inject NavigationManager Navigation
@inject LocalStorageAccessor LocalStorageAccessor
@inject IRSData irsData
@inject HttpClient Http

<PageTitle>bogle.tools profiles</PageTitle>

<h4>@if(importing) { <span>import a copy of a shared bogle.tools profile</span> } else { <span>bogle.tools profiles</span>}</h4>
@if (profileNames != null && profileNames.Count > 0)
{
    @if(!importing) {
        <p>Click on profile name to make it the active profile. You'll be navigated back to your prior page.</p>
    }
    else
    {
        <p>Exising profile names:</p>
    }

    bool alternateRow = false;

    <table>
        <tr>
            <th></th>
            <th>Name</th>
            <th>@if(importing) {} else {<span>Action</span>}</th>
        </tr>
    @foreach(var profileName in profileNames.OrderBy(i=>i))
    {
        string bgColor = alternateRow ? "lightgray" : "white";
        <tr style=background-color:@bgColor>
            <td>
                @if(profileName==appData.CurrentProfileName){<b>&nbsp;[active]&nbsp;</b>} 
            </td>
            <td>
                @if (renameProfileName == profileName)
                {
                    <EditForm Model="appData">
                        <InputText @bind-Value=newName />
                    </EditForm>
                }
                else
                {
                    <a href=/portfolio @onclick="@(e=>makeProfileActive(e,profileName))" @onclick:preventDefault>@profileName</a><span>&nbsp;</span>
                }
            </td>
            <td>
                @if(!importing) {
                    @if (renameProfileName == null || renameProfileName == profileName)
                    {
                        renameButtonText = renameProfileName == profileName ? "Rename" : "Rename...";
                        <button @onclick="@(e=>renameProfile(e,profileName))">@renameButtonText</button>
                    }
                    @if (renameProfileName == profileName)
                    {
                        <button @onclick="cancelRename">cancel</button>
                    }
                    @if (renameProfileName == null)
                    {
                        <button @onclick="@(e=>deleteProfile(e,profileName))">Del</button>
                    }
                    @if (renameProfileName == null)
                    {
                        <button @onclick="@(e=>copyToProfile(e,profileName))">Copy To...</button>
                    }
                }
            </td>
        </tr>
        alternateRow = !alternateRow;
    }
    </table>
} else {
    <p>Choose a profile name to store your data locally.</p>
}
<br/>
@if(renameProfileName == null) {
    @if(!importing){<label>Create new profile or import copy of profile:</label>} else {<label>Import shared profile:</label>}
    <br/>
    <InputText placeholder="@newProfileNamePlaceholder" @bind-Value="@newProfileName" />
    @if(!importing){<button @onclick="createProfile">➕ new</button>} else
    {<InputText placeholder="import code" @bind-Value="@copyCode" />}
    <button @onclick="importProfile">➕ import copy</button>
    @if(importing) { <button @onclick="cancelImport">cancel</button> }
}

<br/>
<span>@log</span>
@code {
    private string? newProfileNamePlaceholder = "new profile name";
    private ElementReference renameBox;
    private bool importing = false;
    
    private async Task cancelRename()
    {
        renameProfileName = null;
    }
    private async Task cancelImport()
    {
        importing = false;
    }
    private async Task importProfile()
    {
        if (!importing)
        {
            importing = true;
            newProfileNamePlaceholder = "my name for copy";
        }
        else
        {
            await doImportProfile();
            importing = false;
            profileNames = await appData.CalculateProfileNames();
            newProfileNamePlaceholder = "new profile name";
        }
    }
    private async Task doImportProfile()
    {
        var jsonEncoding = "{ 'copyCode':'"+copyCode?.Trim()+"'}";
        var myHttpContent = new MyHttpContent(jsonEncoding);
        var familyDataResponse = await Http.PostAsync($"https://api.bogle.tools/api/copydata", myHttpContent, CancellationToken.None);
        await ProfileUtilities.Save(newProfileName, await familyDataResponse.Content.ReadAsStringAsync());
        if (appData.CurrentProfileName == newProfileName)
        {
            await ProfileUtilities.Load(appData);
        }
        
        newProfileName = "";
    }

    private async Task makeProfileActive(EventArgs e, string profileName)
    {
        appData.CurrentProfileName = profileName;
        await LocalStorageAccessor.SetValueAsync("CurrentProfileName", profileName);
        await ProfileUtilities.Load(appData);
        if (appData.LastPageUri != null)
        {
            Navigation.NavigateTo(appData.LastPageUri);
        }
        else
        {
            Navigation.NavigateTo("/portfolio");
        }
    }

    private async Task renameProfile(EventArgs e, string profileName)
    {
        if (renameProfileName == null)
        {
            renameProfileName = profileName;
            newName = profileName;
        }
        else
        {
            profileNames = await appData.CalculateProfileNames();
            if (newName != renameProfileName && !string.IsNullOrEmpty(newName) && !profileNames.Contains(newName))
            {
                await LocalStorageAccessor.RenameKey(renameProfileName, newName);

                if (appData.CurrentProfileName == renameProfileName)
                {
                    appData.CurrentProfileName = newName;
                }

                renameProfileName = null;
            }

            profileNames = await appData.CalculateProfileNames();
        }
    }

    private async Task copyToProfile(EventArgs e, string profileName)
    {
        //TODO: what if not saved? this will get from localstorage.
        var profileData = await ProfileUtilities.GetProfileData(profileName);
        var jsonEncoding = "{ \"profileData\":'"+profileData+"'}";
        var myHttpContent = new MyHttpContent(jsonEncoding);
        var securityKeyResponse = await Http.PostAsync($"https://api.bogle.tools/api/copydata", myHttpContent, CancellationToken.None);
        var copyToCode = await securityKeyResponse.Content.ReadAsStringAsync();
        log += $"\n{profileName} profile shared. Navigate any device to https://bogle.tools/import/{copyToCode} within 5 minutes.\n";
    }

    private async Task deleteProfile(EventArgs e, string profileName)
    {
        await LocalStorageAccessor.RemoveAsync(profileName);
        if (appData.CurrentProfileName == profileName)
        {
            appData.CurrentProfileName = null;
            appData.FamilyData = null;
        }

        profileNames = await appData.CalculateProfileNames();
    }

    private async Task createProfile()
    {
        if (!string.IsNullOrEmpty(newProfileName)) {
            await ProfileUtilities.Save(newProfileName, new FamilyData(appData));
            newProfileName = "";
            profileNames = await appData.CalculateProfileNames();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        profileNames = await appData.CalculateProfileNames();

        if (copyCode != null)
        {
            importing = true;
            newProfileNamePlaceholder = "my name for copy";
        }
    }

    private List<string> profileNames;
    private string newProfileName { get; set; }
    private string? renameProfileName { get; set; }
    private string? renameButtonText { get; set; }
    private string? newName {get; set;}
    [Parameter]
    public string? copyCode { get; set;}
    private string? log {get;set;}
}