@page "/rsu-tracker"
@page "/rsu-tracker/{View}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .mainTable {
        border-collapse: collapse;
        border-top: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable thead tr th{
        border-bottom: 1px solid #000000;
    }
    .mainTable th, .mainTable td {
        border-left: 1px solid rgba(0,0,0,0.2);
        border-right: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable th, .mainTable td{ /* Added padding for better layout after collapsing */
        padding: 4px 8px;
    }

    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (steps == null || appData?.FamilyData is null)
    {
        <p>
            @if(appData!.CurrentProfileName==null){
                <em>No active <a href=/profiles>profile</a>.</em>
            } else {
                <em>Loading...</em>
            }
        </p>
        <div style=float:left;margin-left:50px>
            <a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
                @if(appData.CurrentProfileName==null){
                    <span>choose a</span>}else {<span>@appData.CurrentProfileName</span>
                }
            </a> profile
        </div>
    } else if (appData.FamilyData != null && appData.FamilyData.PINProtected && appData.FamilyData.PIN == null) {
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
            </h4>
        </div>
        <div style=clear:left><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

        <p style=clear:left>Need PIN</p>
        <input style=width:50px;text-align:right type=text @bind-Value=PINEntry @bind-Value:event=oninput />
        <button @onclick=setPIN>Go</button>
    } else {
        if (appData?.FamilyData is not null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            
            <div style=float:left>
                <h4 style="max-width:450px">
                    @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
                </h4>
            </div>
            <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

            <div style=clear:left>
                <table id=_reviewTable>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            @switch (step.step) {
                                case "people": 
                                    <td>
                                        <a @onclick=toggleTaxFilingStatusEditing style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                        @((MarkupString)bold("Tax Filing Status:"))
                                        @if (!taxFilingStatusEditing) {
                                            @if (appData.FamilyData!.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@appData.FamilyData.TaxFilingString</span> }
                                            @if(appData.FamilyData.PersonCount > 0) {
                                                <span>&nbsp;@getPronoun(appData.FamilyData.People[0], false)</span>
                                            }
                                            @if(appData.FamilyData.PersonCount > 1) {
                                                <span>&nbsp;and @getPronoun(appData.FamilyData.People[1], false)</span>
                                            }
                                            <br/><hr/>
                                        } else {
                                            <select @bind=appData.FamilyData!.TaxFilingStatus>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing separately</option>
                                                <option value=MarriedFilingSeperatelyAndLivingApart>Married filing separately (and living apart)</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                            </select><br/><br/>
                                            
                                            @for (int i = 0; i < appData.FamilyData.PersonCount; i++) {
                                                var person = appData.FamilyData.People[i];
                                                int personIndex = i + 1;

                                                <EditForm Model="person" style=margin-left:25px>
                                                    @if(person?.FamilyData?.PersonCount>1){
                                                        <b>Person @personIndex:</b><br/>
                                                        <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                        <option>person @personIndex</option>
                                                        <option>him</option>
                                                        <option>her</option>
                                                        <option>me</option>
                                                        <option>them</option>
                                                    </select><br/>}
                                                </EditForm><br/>
                                            }
                                        }
                                    </td>
                                    break;
                                case "rsu-summary":
                                    <td>
                                        <a @onclick=editGrants style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                        @if (View == null) {
                                            View = "by-year";
                                        }
                                        @{
                                            var byYearBold = (View == "by-year") ? ";font-weight:bold" : ""; 
                                            var byGrantBold = (View == "by-grant") ? ";font-weight:bold" : ""; 
                                        }

                                        <label>&nbsp;&nbsp;View RSUs:&nbsp;</label>
                                        <span>
                                            <a style='@byYearBold' href=/rsu-tracker>by year</a> | 
                                            <a style='@byGrantBold' href=/rsu-tracker/by-grant>by grant</a>
                                        </span>
                                        <br/>
                                        <br/>
                                        @if(showEditAccountHelpers) {
                                            <i>Editing RSU Grants:</i>
                                            <br/><span>'➕' button will add a new grant to bottom of grants list.
                                            <br/>To edit grant details or to delete a grant, click on grant table row in <a href=/rsu-tracker/by-grant>by grant</a> view</span><br/><br/>
                                        }

                                        @switch (View) {
                                            case "by-grant":
                                                @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                    var pBuf = p;
                                                    var person = appData.FamilyData.People[p];
                                                    <p><span style=font-size:14pt;font-weight:bold>@person.PossessiveID RSU Grants:</span> <button @onclick='@(e=>addGrant(e,pBuf))' title='add grant'>➕</button>
                                                        @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                        {
                                                            <button @onclick=@refreshPrices title='update prices' style=min-width:80px;>@refreshButtonText</button>
                                                        } else {
                                                            <a href="/updating-portfolio">Update prices</a>
                                                        }
                                                    </p>

                                                    @if(person.RSUGrants.Count > 0) {
                                                        <table class=mainTable>
                                                            <tr style='vertical-align:bottom;border:black sold 1px'>
                                                                <th style=padding-left:8px>Vest Date</th>
                                                                <th style=padding-left:8px;text-align:center>Shares</th>
                                                                <th style=padding-left:8px;text-align:center>~Price</th>
                                                                <th style=padding-left:8px;text-align:center>~Value</th>
                                                            </tr>
                                                            @{var grantCount = 0;}
                                                            @foreach (var rsuGrant in person.RSUGrants) {
                                                                var grantIndex = grantCount++;
                                                                <tr style=vertical-align:bottom;color:white;background-Color:black @onmousedown='@(e=>toggleEdit(e,pBuf, grantIndex))'>
                                                                    @if (!rsuGrant.Edit) {
                                                                        <td style=padding-left:8px;text-align:left colspan=4>@rsuGrant.Shares @rsuGrant.Ticker shares granted on @rsuGrant.Date?.ToShortDateString()</td>
                                                                    } else {
                                                                        <td style=padding-left:8px;text-align:left colspan=4>
                                                                            <input @onmousedown:stopPropagation="true" type=text style=width:80px;text-align:right @bind-value=rsuGrant.Shares placeholder="shares" />
                                                                            <input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.Ticker placeholder="ticker" />
                                                                            shares<br/>
                                                                            granted on 
                                                                            <input @onmousedown:stopPropagation="true" type=text @bind-value=rsuGrant.Date placeholder="date" /><br/>
                                                                            <br/>
                                                                            vest <input @onmousedown:stopPropagation="true" type=text style=width:40px;text-align:right @bind-value=rsuGrant.VestPercent />% of shares<br/> 
                                                                            every <input @onmousedown:stopPropagation="true" type=text style=width:40px;text-align:right @bind-value=rsuGrant.VestPeriodMonths  /> months<br/>
                                                                            with first vest happening at month # <input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.FirstVestMonth  /><br/>
                                                                            <br/>
                                                                            last price: $<input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.LastPrice placeholder="last price" />
                                                                            <div style=text-align:right>
                                                                                <button title='delete grant' @onclick='@(e=>deleteGrant(e,pBuf, grantIndex))'>❌ grant</button>
                                                                                <button title='save grant' >save grant</button>
                                                                            </div>
                                                                        </td>
                                                                    }
                                                                </tr>
                                                                @foreach (var vestEvent in rsuGrant.VestEvents.Where(ve=>ve.Date > DateOnly.FromDateTime(DateTime.Now))) {
                                                                    <tr style=vertical-align:bottom>
                                                                        <td style=padding-left:8px;text-align:right>@vestEvent.Date.ToShortDateString()</td>
                                                                        <td style=padding-left:8px;text-align:center>@vestEvent.Shares</td>
                                                                        <td style=padding-left:8px;text-align:center>@FormatUtilities.formatMoney(vestEvent.Price)</td>
                                                                        <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestEvent.Value)</td>
                                                                    </tr>
                                                                }
                                                                <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                            }
                                                        </table>
                                                        <br/>
                                                    } else {
                                                        <p>No RSU grants yet. Press ➕ button to track a Restricted Stock Unit grant from an employer.</p><br/>
                                                    }
                                                }
                                                break;
                                            case "by-year":
                                                @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                    var pBuf = p;
                                                    var person = appData.FamilyData.People[p];

                                                    var vestMonths = (from rsuGrant in person.RSUGrants  // First foreach loop
                                                        from vestEvent in rsuGrant.VestEvents  // Second foreach loop
                                                        where vestEvent.Date > DateOnly.FromDateTime(DateTime.Now)
                                                        group vestEvent by new { vestEvent.Date.Year, vestEvent.Date.Month }
                                                        into grp
                                                        select new { month = grp.Key.Month, year = grp.Key.Year, count = grp.Count(), shares = grp.Sum(ve=>ve.Shares), value = grp.Sum(ve=>ve.Value) });
                                                        
                                                    <p><span style=font-size:14pt;font-weight:bold>@person.PossessiveID RSU Grants:</span> <button @onclick='@(e=>addGrant(e,pBuf))' title='add grant'>➕</button>
                                                        @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                        {
                                                            <button @onclick=@refreshPrices title='update prices' style=min-width:80px;>@refreshButtonText</button>
                                                        } else {
                                                            <a href="/updating-portfolio">Update prices</a>
                                                        }
                                                    </p>

                                                    @if(person.RSUGrants.Count > 0) {
                                                        <table class=mainTable>
                                                            <tr style=vertical-align:bottom>
                                                                <th style=padding-left:8px>Vest Month</th>
                                                                <th style=padding-left:8px;text-align:center>Grants</th>
                                                                <th style=padding-left:8px;text-align:center>Shares</th>
                                                                <th style=padding-left:8px;text-align:center>~Value</th>
                                                            </tr>
                                                            @{int? lastYear = null;}
                                                            @foreach (var vestMonth in vestMonths) {
                                                                if (lastYear != vestMonth.year) {
                                                                    lastYear = vestMonth.year;
                                                                    <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                        <td style=padding-left:8px;text-align:left colspan=4>@lastYear</td>
                                                                    </tr>
                                                                }
                                                                <tr style=vertical-align:bottom>
                                                                    <td style=padding-left:8px;text-align:right>@vestMonth.month-@vestMonth.year</td>
                                                                    <td style=padding-left:8px;text-align:center>@vestMonth.count</td>
                                                                    <td style=padding-left:8px;text-align:center>@vestMonth.shares</td>
                                                                    <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestMonth.value)</td>
                                                                </tr>
                                                            }
                                                            <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                        </table>
                                                        <br/>
                                                    } else {
                                                        <p>No RSU grants yet. Press ➕ button to track a Restricted Stock Unit grant from an employer.</p><br/>
                                                    }
                                                }
                                                break;                                    
                                        }
                                    </td>
                                    break;                                
                                default:
                                    break;
                            }
                        </tr>
                    }          
                </table>
                <div>
                    ~ - Predicting value at future vest events is impossible. Stock value could go up or down. Values shown are based on current value, which can be updated - details: <a href=/updating-portfolio>Updating RSU Latest Prices</a>
                </div>
            </div>
            <br/>
            <p>"Consider using the <a href="/savings-planner">Savings Planner</a> for the year or using the <a href="/portfolio-tracker">Portfolio Tracker</a>"</p>
        }
    }

@code {

    void cancelEvent() {

    }

    async void doneEditing() {
        if (appData?.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            foreach (var account in accounts) {
                account.Edit = false;
            }
            
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    async void deleteGrant(MouseEventArgs e, int personIndex, int grantIndex) {
        if (appData?.FamilyData is not null) {
            appData.FamilyData.People[personIndex].RSUGrants.RemoveAt(grantIndex);
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    async void toggleEdit(MouseEventArgs e, int personIndex, int grantIndex) {
        if (appData?.FamilyData is not null) {
            var grant = appData.FamilyData.People[personIndex].RSUGrants[grantIndex];
            if (grant.Edit) {
                var created = grant.CalculateVestEvents();
                if (created) {
                    grant.Edit = false;
                    await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
                }
            } else {
                grant.Edit = true;
            }
        }
    }

    void addGrant(MouseEventArgs e, int personIndex) {
        if (appData?.FamilyData is not null) {
            if (!Navigation.Uri.EndsWith("/rsu-tracker/by-grant")) {
                Navigation.NavigateTo("/rsu-tracker/by-grant");
            }

            var lastGrant = appData.FamilyData.People[personIndex].RSUGrants.Count > 0 
                ? appData.FamilyData.People[personIndex].RSUGrants[appData.FamilyData.People[personIndex].RSUGrants.Count-1]
                : null;
            var newGrant = new RSUGrant();
            if (lastGrant != null) {
                newGrant.VestPercent = lastGrant.VestPercent;
                newGrant.FirstVestMonth = lastGrant.FirstVestMonth;
                newGrant.VestPeriodMonths = lastGrant.VestPeriodMonths;
                newGrant.LastPrice = lastGrant.LastPrice;
                newGrant.Ticker = lastGrant.Ticker;
            }
            newGrant.Edit = true;
            appData.FamilyData.People[personIndex].RSUGrants.Add(newGrant);
        }
    }

    void editGrants() {
        Navigation.NavigateTo("/rsu-tracker/by-grant");
        showEditAccountHelpers = !showEditAccountHelpers;
    }

    void toggleTaxFilingStatusEditing() {
        taxFilingStatusEditing = !taxFilingStatusEditing;
    }

    void toggleAssetAllocationEditing() {
        assetAllocationEditing = !assetAllocationEditing;
    }

    public const string EditAccountsViewName = "Investments by Accounts";
    
    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Prices";
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        if (appData?.FamilyData is not null) {
            runningTotal += itemTotal ?? 0;
            if (!pastTotal) {
                pastTotal = appData.FamilyData.PlannedSavings <= runningTotal;

                if (pastTotal) {
                    return "<div>-------<br/><div>Planned savings " + (appData.FamilyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(appData.FamilyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
                }
            }
        }

        return "";
    }

    public string getPronoun(Person person) {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    [Parameter]
    public string? View { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/rsu-tracker";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "RSU Tracker";
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/rsu-tracker-steps.json");
        Navigation.LocationChanged += LocationChanged;

        if (appData?.FamilyData is not null) {
            for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                var person = appData.FamilyData.People[p];

                foreach (var grant in person.RSUGrants) {
                    grant.CalculateVestEvents();
                }
            }
        }

        base.OnInitialized();
    }

    private async Task UpdateInvestmentPrice(Investment investment)
    {
        var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={investment.Ticker}&apikey={appData.EODHistoricalDataApiKey}");
        var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
        if (quoteData?.Close != null) {
            investment.Price = quoteData.Close;
            investment.UpdateValue();
        }
    }
    public static DateTime? UnixTimeStampToDateTime( int? unixTimeStamp )
    {
        if (!unixTimeStamp.HasValue) return null;
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ?? 0 ).ToLocalTime();
        return dateTime;
    }
    private async Task UpdateInvestmentsPrice(string ticker, List<Investment> investments)
    {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={ticker}&apikey={appData.EODHistoricalDataApiKey}");
            var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
            if (quoteData?.Close != null) {
                foreach (var investment in investments) {
                    investment.Price = quoteData.Close;
                    if (quoteData.Volume > 0) {
                        investment.PreviousClose = quoteData.PreviousClose; 
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else if (quoteData.Volume == 0) {
                        investment.PreviousClose = quoteData.PreviousClose;
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else {
                        investment.PreviousClose = quoteData.Close;
                        investment.PercentChange = null;
                        investment.LastUpdated = null;
                    }

                    investment.UpdateValue();
                }
            }
        }
    }

    private async Task UpdatePrice(MouseEventArgs e, Investment investment) {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            await UpdateInvestmentPrice(investment);
        }
    }
    private async Task refreshPrices() {
        if (appData?.FamilyData is not null) {
            refreshButtonText = "Updating...";
            Dictionary<string,List<Investment>> quotes = new();

            var now = DateTime.Now.Date;
            var previousMarketClose = PreviousMarketClose(now).ToLocalTime();
            var nextMarketClose = NextMarketClose(now).ToLocalTime();
            var nextMarketOpen = new DateTime(nextMarketClose.Year,nextMarketClose.Month,nextMarketClose.Day,13,30,00).ToLocalTime();
            var marketIsBeforeOpen = DateTime.Now < nextMarketOpen;
            bool marketIsOpen = DateTime.Now >= nextMarketOpen && DateTime.Now <= nextMarketClose;
            var marketIsAfterClose = DateTime.Now > nextMarketClose;
            foreach (var account in appData.FamilyData.Accounts)
            {
                foreach (var investment in account.Investments)
                {
                    bool fetchQuote = false;
                    if (investment.IsStock || investment.IsETF) {
                        fetchQuote = investment.LastUpdated == null || (marketIsBeforeOpen && investment.LastUpdated < previousMarketClose) || marketIsOpen || (marketIsAfterClose && investment.LastUpdated < nextMarketClose);
                    } else if (investment.IsFund) {
                        fetchQuote = investment.LastUpdated == null || investment.LastUpdated?.Date != previousMarketClose.Date;
                    }

                    if (fetchQuote && investment.Ticker != null) {
                        if (!quotes.ContainsKey(investment.Ticker)) {
                            quotes.Add(investment.Ticker, new List<Investment> () { investment });
                        } else {
                            var investments = quotes[investment.Ticker];
                            investments.Add(investment);
                        }
                    }
                }
            }

            List<string> rsuTickers = new();
            for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                var person = appData.FamilyData.People[p];
                foreach (var rsuGrant in person.RSUGrants) {
                    if (rsuGrant.Ticker is not null) {
                        var ticker = rsuGrant.Ticker.ToUpper();
                        var grantInvestment = new Investment() { Ticker = ticker, GrantToUpdateQuote = rsuGrant };
                        if (!quotes.ContainsKey(ticker)) {
                            quotes.Add(ticker, new List<Investment> () { grantInvestment });
                        } else {
                            var investments = quotes[ticker];
                            investments.Add(grantInvestment);
                        }
                    }
                }
            }

            foreach (var quote in quotes)
            {
                try {
                    await UpdateInvestmentsPrice(quote.Key, quote.Value);
                } catch (Exception ex) {
                    Console.WriteLine(ex.GetType().Name + ": " + ex.Message + " " + ex.StackTrace);
                }
            }

            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
            refreshButtonText = "🔃 Prices";
        }
    }

    enum MarketDay {
        MarketDay,
        Holiday,
        HalfDay,
        WeekEnd
    }
    
    static DateTime[] holidays = {
        new DateTime(2023, 1, 2),
        new DateTime(2023, 1 , 16 ),
        new DateTime(2023, 2, 20),
        new DateTime(2023, 4, 7),
        new DateTime(2023, 5, 29),
        new DateTime(2023, 6, 19),
        new DateTime(2023, 7, 4),
        new DateTime(2023, 9, 4),
        new DateTime(2023, 11, 23),
        new DateTime(2023, 12, 25),
    };

    static DateTime[] halfDays = {
        new DateTime(2023, 7, 3),
        new DateTime(2023, 11, 24),
        new DateTime(2023, 12, 24),
    };

    private MarketDay GetMarketDay(DateTime dateTime) {
        switch (dateTime.DayOfWeek) {
            case DayOfWeek.Saturday: 
            case DayOfWeek.Sunday:
                return MarketDay.WeekEnd;
            default:
                var date = dateTime.Date;
                if (holidays.Contains(date)) {
                    return MarketDay.Holiday;
                }
                
                if (halfDays.Contains(date)) {
                    return MarketDay.HalfDay;
                }

                return MarketDay.MarketDay;
        }
    }

    private int? PINEntry { get; set; }
    private void setPIN() {
        if (PINEntry != null && appData?.FamilyData is  not null) {
            appData.FamilyData.PIN = PINEntry;
        }
    }

    private DateTime PreviousMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, -1);
    }

    private DateTime NextMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, 1);
    }
    
    private DateTime MarketClose(DateTime dateTime, int direction) {
        DateTime marketCloseDay;
        if (direction == -1) {
            marketCloseDay = dateTime.AddDays(direction);
        } else {
            marketCloseDay = dateTime;
        }

        switch (GetMarketDay(marketCloseDay)) {
            case MarketDay.Holiday:
            case MarketDay.WeekEnd:
                return MarketClose(marketCloseDay.AddDays(direction), direction);
            case MarketDay.HalfDay:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 17, 0, 0);
            default:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 20, 0, 0);
            
        }
    }

    private (double? change, double? percentChange) portfolioChange() {
        double? change = 0.0;
        if (appData?.FamilyData is not null) {
            double? total = 0.0;
            foreach (var investment in appData.FamilyData.GroupedInvestments)
            {
                total += investment.Value ?? 0.0;
                if (investment.PercentChange != null)
                {
                    change += (investment.Price - investment.PreviousClose) * investment.SharesPIN;
                }
            }

            var startOfDayTotal = total - change;
            return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
        }

        return (null, null);
    }

    private void navWithBackStack() {
        if (appData is not null) {
            appData.LastPageUri = Navigation.Uri;
        }

        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (appData?.FamilyData is not null) {
            if (appData.CurrentProfileName is not null) {
                await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
            }
        }
    }
}
