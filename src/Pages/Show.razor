@page "/invest/{stepPath}"
@inject HttpClient Http

<PageTitle>
invest/@stepPath
</PageTitle>



@if (priorities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var priority in priorities) {
        @if (priority.step == stepPath) {
            <h2>@priority.number: @priority.title</h2>
            <h4>@((MarkupString)markupize(priority.priority))</h4>

            <p><b>Summary:</b> @((MarkupString)markupize(priority.summary))</p>
            <p><b>Approximate Return:</b> @priority.returns</p>
            <p><b>Details:</b> @((MarkupString)markupize(priority.description))</p>
           
            <p><b>Worksheet:</b> </p>

                @switch (priority.number) {
                    case 1:
                        <EditForm Model="emergencyFund">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            
                            <label>Monthly Expenses:</label> <span>$</span><input type=text @bind-Value="emergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br /><br />
                            <label>Planned size of emergency fund:</label><br/>
                            <InputRadioGroup @bind-Value=emergencyFund.TargetMonths>
                                <InputRadio Value='0'/> None<br/>
                                <InputRadio Value='1'/> 1 month: $@emergencyFund.MonthlyExpenses<br/>
                                <InputRadio Value='3'/> 3 months: $@emergencyFund.ThreeMonths<br/>
                                <InputRadio Value='4'/> Other: <br/>
                            </InputRadioGroup>
                            <div style="margin-left:20px">$<input type=text @bind-Value="emergencyFund.EFOther" @bind-Value:event="oninput"/></div>
                            <br />
                            <br />
                            <label>Current Size:</label> <span>$</span><input type=text @bind-Value="emergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br /><br />
                            <label>Savings Opportunity:</label> <span>$</span>@emergencyFund.SavingsOpportunity<br />
                        </EditForm>
                        @code {
                            private EmergencyFund emergencyFund = new();
                        }
                        break;
                    case 2:
                        <EditForm Model="retirementFunds">
                            <InputCheckbox @bind-Value="retirementFunds.Eligible" id='eligible'/> <label for='eligible'>Eligible for workplace retirement savings?</label><br /><br/>
                            <fieldset disabled=@retirementFunds.Disabled style='margin-left:20px'>
                                <label>Percent Matched:</label> <input type='text' @bind-Value=retirementFunds.PercentMatched @bind-Value:event=oninput />%<br />
                                <label>Limit:</label><input type='text' @bind-Value=retirementFunds.MatchLimit @bind-Value:event=oninput/><br />
                                <label>Contribution Required to get maximum match:</label> $<span>@retirementFunds.ContributionRequired</span><br />
                            </fieldset><br/>
                            <label>Savings Opportunity:</label> <span>$</span>@retirementFunds.SavingsOpportunity<br />
                        </EditForm>
                        @code {
                            private RetirementFunds retirementFunds = new();
                        }
                        break;
                    case 4:
                        <EditForm Model="hsa">
                            <InputCheckbox @bind-Value="hsa.Eligible" id='eligible'/> <label for='eligible'>Have high deductible health plan?</label><br/><br/>
                            <fieldset disabled=@hsa.Disabled style='margin-left:20px'>
                                <label>Individual/Family:</label>   <select @bind=hsa.Family><option value=None>choose...</option><option value=EmployeeOnly>Employee only</option><option>Family</option></select><br />
                                <label>Limit:</label> @hsa.Limit<br /><br/>

                                <label>2022 Employer Contribution:</label><input type='text'><br/>
                                <label>2022 Employee Contribution:</label><input type='text'><br/>
                            </fieldset>
                            <br/>
                            <label>Savings Opportunity:</label> <span>$</span>@hsa.SavingsOpportunity<br />
                        </EditForm>
                        @code {
                            private HealthSavingsAccount hsa = new();
                        }
                        break;
                    case 5:
                        <label>2022 Modified AGI (projected):</label> <input type='text' /><br />
                        <label>Tax Filing Status:</label> <select><option>choose...</option><option>Single</option><option>Married filing jointly</option></select><br />
                        <input type='checkbox' /> <label>50 or older?</label><br />
                        <label>Deduction allowed on IRA:</label> <span id='iraDeduction'></span><br />
                        <label>Roth IRA contribution allowed:</label> <span id='rothIRAContribution'></span><br />
                        <br/>
                        <label>Savings Opportunity:</label> <span>$</span><span></span><br />
                        break;
                    case 6:
                        <input type='checkbox' /> <label>50 or older?</label><br />
                        <label>2022 401k Contribution:</label><input type='text'><br/>
                        break;
                    case 7:
                        <input type='checkbox' /> <label>Eligible for Mega Backdoor Roth?</label><br />
                        <fieldset disabled=true>
                            <label>Limit:</label> <input type='text' /><br />
                        </fieldset><br/>
                        <label>Savings Opportunity:</label> <span>$</span><span></span><br />
                        break;
                    case 9:
                        <label>Savings Opportunity:</label> <span>no limits</span><br />
                        break;
                    case 3:
                    case 8:
                    case 10:
                        <div>
                            <i>list of debts (all interest rates):</i><br>
                            <table>
                            <thead>
                            <th><label>name</label></th>
                            <th><label>interest rate</label></th>
                            <th><label>category</label></th>
                            <th><label>payoff date</label></th>
                            <th><label>total $</label></th>
                            </thead>
                            <tr>
                            <td><input type='text' /></td>
                            <td><input type='text' /></td>
                            <td><span></span></td>
                            <td><input type='text' /></td>
                            <td><input type='text' /></td>
                            </tr>
                            </table>
                        </div>
                        <br/>
                        <label>Savings Opportunity (@priority.title):</label> <span>$</span><span>0</span><br />
                        break;
                }
        }
    }
}

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        returnVal += "<a href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                     }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                     }
                    break;
                default:
                      switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                     }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    public string foo = "<p>hello <b>worjjld</b> again</p>";

    [Parameter]
    public string? stepPath { get; set; }

    private InvestmentPriority[]? priorities;

    protected override async Task OnInitializedAsync()
    {
        priorities = await Http.GetFromJsonAsync<InvestmentPriority[]>("data/investment-priorities.json");
    }
}
