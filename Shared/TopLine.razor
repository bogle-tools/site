@inject NavigationManager Navigation
@using System.Text.Json.Serialization
@inject IJSRuntime JSRuntime
@inject IAppData appData
@inject LocalStorageAccessor LocalStorageAccessor
@inject IRSData irsData
@inject IJSRuntime JS

<div style=float:right>
    <a style=margin-left:0px href=/about>Private data</a>: <button @onclick=@Save>Save</button> or 
    <button @onclick=@Clear>Erase</button>
</div>
@code{
    private async Task Save() {
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    private async Task Clear() {
        await ProfileUtilities.Clear(appData, appData.CurrentProfileName, irsData);
        Navigation.NavigateTo("/");
    }

    protected override async Task OnInitializedAsync()
    {
        ProfileUtilities.LocalStorageAccessor = LocalStorageAccessor;
        await ProfileUtilities.SetProfileNames(appData);

        if (appData.CurrentProfileName != null && appData.ProfileNames.Contains(appData.CurrentProfileName))
        {
            await ProfileUtilities.Load(appData);
        }
        else
        {
            await ProfileUtilities.SetProfileNames(appData);
            if (appData.ProfileNames.Count == 0)
            {
                appData.CurrentProfileName = "primary";
                await LocalStorageAccessor.SetValueAsync("CurrentProfileName", appData.CurrentProfileName);
                appData.FamilyData = new FamilyData(appData);
                ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
                await ProfileUtilities.SetProfileNames(appData);
            }
            else
            {
                appData.CurrentProfileName = null;
                appData.LastPageUri = Navigation.Uri;
                Navigation.NavigateTo("/profiles");
            }
        }
    }
}
