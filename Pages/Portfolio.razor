@page "/portfolio-tracker"
@page "/portfolio-tracker/{View}"
@page "/portfolio"
@page "/portfolio/{View}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .mainTable {
        border-collapse: collapse;
        border-top: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable thead tr th{
        border-bottom: 1px solid #000000;
    }
    .mainTable th, .mainTable td {
        border-left: 1px solid rgba(0,0,0,0.2);
        border-right: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable th, .mainTable td{ /* Added padding for better layout after collapsing */
        padding: 4px 8px;
    }

    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (steps is null || appData is null)
    {
        <p>
            @if(appData == null || appData.CurrentProfileName==null){<em>No active <a href=/profiles>profile</a>.</em>} 
            else {<em>Loading...</em>}
        </p>
        <div style=float:left;margin-left:50px><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
            @if(appData!.CurrentProfileName==null){<span>choose a</span>}else {<span>@appData.CurrentProfileName</span>}</a> profile
        </div>
    } else if (appData is not null && appData.FamilyData!.PINProtected && appData.FamilyData.PIN == null) {
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading
            </h4>
        </div>
        <div style=float:left;margin-left:50px><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

        <p style=clear:left>Need PIN</p>
        <input style=width:50px;text-align:right type=text @bind-Value=PINEntry @bind-Value:event=oninput />
        <button @onclick=setPIN>Go</button>
    } else if (appData is not null && appData.FamilyData is not null) {
        if (appData.FamilyData.TaxFilingStatus == TaxFilingStatus.ChoiceNeeded) {
            taxFilingStatusEditing = true;
        }
        var prevStep = steps[steps.Length - 1];
        var nextStep = steps[0];
        string prevPage = folderName + prevStep?.step;
        string nextPage = folderName + nextStep?.step;
        appData.FamilyData.UpdatePercentages();
        
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
            </h4>
        </div>
        <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

        <div style=clear:left>
            <table id=_reviewTable>
                @foreach (var step in steps) {
                    var href = folderName + @step.step;
                    var required = (appData.FamilyData.TaxFilingStatus == TaxFilingStatus.ChoiceNeeded) ? "visibility:visible;color:red" : "visibility:hidden";
                    <tr>
                        @switch (step.step) {
                            case "people": 
                                <td>
                                    <a @onclick=toggleTaxFilingStatusEditing style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                    @((MarkupString)bold("Tax Filing Status:"))
                                    @if (!taxFilingStatusEditing) {
                                        @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@appData.FamilyData.TaxFilingString</span> }
                                        @if(appData.FamilyData.PersonCount > 0) {
                                            <span>&nbsp;@getPronoun(appData.FamilyData.People[0], false)</span>
                                        }
                                        @if(appData.FamilyData.PersonCount > 1) {
                                            <span>&nbsp;and @getPronoun(appData.FamilyData.People[1], false)</span>
                                        }
                                        <br/><hr/>
                                    } else {
                                        <select @bind=appData.FamilyData.TaxFilingStatus>
                                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                                            <option>Single</option>
                                            <option value=MarriedFilingJointly>Married filing jointly</option>
                                            <option value=MarriedFilingSeperately>Married filing separately</option>
                                            <option value=HeadOfHousehold>Head of Household</option>
                                        </select> <span style=@required>*</span><br/><br/>
                                        
                                        @for (int i = 0; i < appData.FamilyData.PersonCount; i++) {
                                            var person = appData.FamilyData.People[i];
                                            int personIndex = i + 1;

                                            <EditForm Model="person" style=margin-left:25px>
                                                @if(person?.FamilyData?.PersonCount>1){
                                                    <b>Person @personIndex:</b><br/>
                                                    <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                    <option>person @personIndex</option>
                                                    <option>him</option>
                                                    <option>her</option>
                                                    <option>me</option>
                                                    <option>them</option>
                                                </select><br/>}
                                            </EditForm><br/>
                                        }
                                    }
                                </td>
                                break;
                            case "asset-allocation":
                                @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                                    <td>
                                        <a @onclick=toggleAssetAllocationEditing style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                        @((MarkupString)bold("Desired Asset allocation:"))
                                        @if(!assetAllocationEditing) { 
                                            if (appData.FamilyData.Stocks != null && appData.FamilyData.Bonds != null) {
                                                <span>&nbsp;@appData.FamilyData.Stocks% stocks / @appData.FamilyData.Bonds% bonds</span><br/>
                                            }
                                            @if (appData.FamilyData.International != null) {
                                                <span>&nbsp;&nbsp;Desired International allocation: </span>
                                                <span>@appData.FamilyData.International%</span>
                                            }
                                        } else {
                                            <span>
                                                &nbsp;<input style=width:50px;text-align:right type=text @bind-Value=appData.FamilyData.Stocks @bind-Value:event=oninput />% stocks
                                                /
                                                <input style=width:50px;text-align:right type=text @bind-Value=appData.FamilyData.Bonds @bind-Value:event=oninput />% bonds
                                            </span><br/>
                                            <span>&nbsp;&nbsp;Desired International allocation: </span>
                                            <span><input style=width:50px;text-align:right type=text @bind-Value=appData.FamilyData.International @bind-Value:event=oninput />%</span>
                                        }
                                        <hr/>
                                    </td>
                                }
                                break;
                            case "advice-settings":
                                @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                                    @((MarkupString)bold("Advanced Portfolio Settings:"))<span>&nbsp;(experimental)</span><br/>
                                    <InputCheckbox id=stockSizeRules style=margin-left:20px @bind-Value=appData.ApplyStockSizeRules /> <label for=stockSizeRules>&nbsp;Show warning if &gt; 5% concentration of an individual stock</label><br/>
                                    <InputCheckbox id=taxEfficientRules style=margin-left:20px @bind-Value=appData.ApplyTaxEfficientPlacementRules  /> <label for=taxEfficientRules>&nbsp;Show advice for tax efficient placement</label><br/> 
                                    <InputCheckbox id=allowAfterTaxPercentage style=margin-left:20px @bind-Value=appData.AllowAfterTaxPercentage  /> <label for=allowAfterTaxPercentage>&nbsp;Track After-Tax Percentage for Account that might have Pre and Post-Tax contributions</label><br/> 
                                    <br/>
                                }
                                break;
                            case "retirement-assets":
                                @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                                <td>
                                    <a @onclick=editAccounts style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                    @((MarkupString)bold("Investable Assets"))
                                    @if (appData.FamilyData.Accounts.Count > 0) {
                                        if (View == null) {
                                            View = "allocations";
                                        }
                                        
                                        var allocationsBold = (View == "allocations") ? ";font-weight:bold" : ""; 
                                        var accountsBold = (View == "accounts") ? ";font-weight:bold" : "";
                                        var bogleheadsBold = (View == "bogleheads") ? ";font-weight:bold" : "";
                                        var custodiansBold = (View == "custodians") ? ";font-weight:bold" : "";
                                        var taxTypesBold = (View == "tax-types") ? ";font-weight:bold" : "";
                                    
                                        <label>&nbsp;by</label>
                                        <span>
                                            <a style="@allocationsBold" href=/portfolio-tracker>allocations</a> |
                                            <a style="@accountsBold" href=/portfolio-tracker/accounts>accounts</a> | 
                                            <a style="@taxTypesBold" href=/portfolio-tracker/tax-types>tax-types</a> | 
                                            <a style="@custodiansBold" href=/portfolio-tracker/custodians>custodians</a> | 
                                            <a title="Bogleheads.org style" style="@bogleheadsBold" href=/portfolio-tracker/bogleheads>accounts(bh)</a>
                                        </span><br/>

                                        @switch (View) {
                                            case "accounts":
                                                <table class=mainTable>
                                                    @if (appData.FamilyData.Accounts.Count > 0) {
                                                        <tr style=vertical-align:bottom>
                                                            <th style=padding-left:8px>Ticker</th>
                                                            <th style=padding-left:8px;text-align:center>Quantity</th>
                                                            <th style=padding-left:8px;text-align:center>Price</th>
                                                            <th style=padding-left:8px;text-align:center>Balance</th>
                                                        </tr>
                                                    }
                                                    @{var accountIndex = 0;}
                                                    @foreach (var account in appData.FamilyData.Accounts) {
                                                        bool alternateRow2 = false;
                                                        int accBuffer = accountIndex;
                                                        accountIndex++;
                                                        <tr style=color:white;background:black; @onclick='@(e=>editAccount(e,accBuffer))'>
                                                            <td colspan=3>
                                                                @account.Title
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px>
                                                                @FormatUtilities.formatMoney(account.Value, decimalPlaces:0)
                                                            </td>
                                                        </tr>
                                                        @if(account.Edit) {
                                                            <tr style=color:white;background:black;padding-left:8px>
                                                                <td colspan=4>
                                                                    @if (appData.FamilyData.PersonCount == 2) {
                                                                        <label style=padding-left:8px>Owner:</label>
                                                                        <select style=margin-left:4px @bind=account.Identifier>
                                                                            @if(account.TaxType == "Taxable" || account.TaxType == "Other") {
                                                                                <option>our</option>
                                                                            }
                                                                            @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                                                <option>@appData.FamilyData.People[p].PossessiveID</option>
                                                                            }
                                                                        </select>
                                                                    }

                                                                    <label style=padding-left:8px>Type:</label>
                                                                    <select style=margin-left:4px @bind=account.AccountType>
                                                                        <option>choice needed</option>
                                                                        <option>401(k)</option>
                                                                        <option>403(b)</option>
                                                                        <option>457(b)</option>
                                                                        <option>457(b) Governmental</option>
                                                                        <option>529</option>
                                                                        <option>Annuity (Non-Qualified)</option>
                                                                        <option>Annuity (Qualified)</option>
                                                                        <option>Brokerage</option>
                                                                        <option>HSA</option>
                                                                        <option>Individual</option>
                                                                        <option>Inherited IRA</option>
                                                                        <option>Inherited Roth IRA</option>
                                                                        <option value="Traditional IRA">IRA</option>
                                                                        <option>Refundable Deposit</option>
                                                                        <option>Rollover IRA</option>
                                                                        <option>Roth 401(k)</option>
                                                                        <option>Roth IRA</option>
                                                                        <option>SEP IRA</option>
                                                                        <option>SIMPLE IRA</option>
                                                                        <option>Solo 401(k)</option>
                                                                        <option>Taxable</option>
                                                                        <option>Traditional IRA</option>
                                                                    </select> 
                                                                </td>
                                                            </tr>
                                                            <tr style=color:white;background:black;padding-left:8px>
                                                                <td colspan=4>
                                                                    <label style=padding-left:8px>at</label> <input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' />
                                                                </td>
                                                            </tr>
                                                            @if (account.TaxType == "Pre-Tax(work)") {
                                                                <tr style=color:white;background:black;>
                                                                    <td colspan=2>
                                                                        <InputCheckbox id=currentEmployer style=margin-left:20px @bind-Value=account.CurrentEmployerRetirementFund /> <label for=currentEmployer>&nbsp;Current Employer</label>
                                                                    </td>
                                                                    <td colspan="2">
                                                                        @if (appData.AllowAfterTaxPercentage) {
                                                                            <label style=padding-left:8px>After Tax %:</label> <input type=text id=currentEmployer style=margin-left:8px;width:60px @bind-Value=account.AfterTaxPercentage @bind-Value:event=onchange />
                                                                        }
                                                                    </td>
                                                                </tr>
                                                            }
                                                            <tr style=color:white;background:black;><td colspan=4>
                                                                <label style=padding-left:8px>Note: </label><input type=text @bind-value=account.Note @bind-value:event=oninput placeholder='account note'/>
                                                                </td>
                                                            </tr>
                                                            <tr style=color:white;background:black;>
                                                                <td colspan=4 style=text-align:right>
                                                                    <button @onclick='@(e=>deleteAccount2(e,accBuffer))' title='delete account'>❌ account</button>
                                                                    <button @onclick=doneEditing>save account</button>
                                                                </td>
                                                            </tr>
                                                        }

                                                        var investmentIndex = 0;
                                                        foreach (var investment in account.Investments) {
                                                            var advice = Advisor.Advise(investment, account, appData);
                                                            int invBuffer = investmentIndex;
                                                            investmentIndex++;
                                                            string bgColor = alternateRow2 ? "white" : "lightgray";
                                                            if (!account.Edit) {
                                                                <tr style=background-color:@bgColor @onclick='@(e=>editAccount(e,accBuffer))'>
                                                                    <td style=padding-left:8px title=@investment.Name>@investment.Ticker</td>
                                                                    <td style=text-align:right;padding-left:8px>@FormatUtilities.formatDoubleTwoDecimal(investment.SharesPIN)</td>
                                                                    <td style=text-align:right;padding-left:8px>@FormatUtilities.formatMoney(investment.Price)</td>
                                                                    <td style=text-align:right;padding-left:8px>
                                                                        @FormatUtilities.formatMoney(investment.ValuePIN, decimalPlaces:0)
                                                                    </td>
                                                                </tr>
                                                                @foreach (var adviceItem in advice) {
                                                                    <tr style=background-color:@bgColor>
                                                                        <td colspan=4 style=padding-left:16px>
                                                                            <span style=background-color:yellow>@adviceItem</span>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                            } else {
                                                                <tr style=background-color:@bgColor>
                                                                    <td style=padding-left:16px>
                                                                        <input type=text style=width:70px @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/></td>
                                                                    <label>Quantity: </label>
                                                                    <td style=text-align:right;padding-left:8px><input type=text style=width:100px;text-align:right @bind-Value=investment.SharesPIN @bind-Value:event=onchange placeholder='shares'/></td>
                                                                    <td></td>
                                                                </tr>
                                                                <tr style=background-color:@bgColor>
                                                                    <td style=text-align:right;padding-left:8px colspan=3>
                                                                        <label>Cost Basis: </label>
                                                                        $<input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                                                    </td>
                                                                    <td></td>
                                                                </tr> 
                                                                <tr style=background-color:@bgColor>
                                                                    <td style=text-align:right;padding-left:8px colspan=2>
                                                                        <label>Price: </label>
                                                                        $<input width= type=text style=width:80px;text-align:right @bind-Value=investment.Price @bind-Value:event=onchange placeholder='price'/></td>
                                                                    <td style=text-align:right;padding-left:8px colspan=2>
                                                                        <label>Balance: </label>
                                                                        $<input type=text style=width:100px;text-align:right @bind-Value=investment.ValuePIN @bind-Value:event=onchange placeholder='value'/>
                                                                    </td>
                                                                </tr>
                                                                
                                                                <tr style=background-color:@bgColor>
                                                                    <td colspan=4><label style=padding-left:16px>Name:</label><input type=text style=width:300px @bind-Value=investment.Name @bind-Value:event=oninput placeholder='name'/></td>
                                                                </tr>
                                                                <tr style=background-color:@bgColor>
                                                                    <td colspan=4>
                                                                        <label style=padding-left:16px>Expense Ratio:</label><input width= type=text style=width:100px;text-align:right @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='exp. ratio'/>%
                                                                    </td>
                                                                </tr>
                                                                <tr style=background-color:@bgColor>
                                                                    <td colspan=4>
                                                                        <label style=padding-left:16px>Asset Type:</label>
                                                                        <select @bind=investment.AssetType>
                                                                            @foreach (AssetType assetType in (AssetType[]) Enum.GetValues(typeof(AssetType))) {
                                                                                <option>@assetType</option>
                                                                            }
                                                                        </select>
                                                                    </td>
                                                                </tr>
                                                                @if (investment.AssetType == global::AssetType.StocksAndBonds_ETF || investment.AssetType == global::AssetType.StocksAndBonds_Fund) {
                                                                    <tr style=background-color:@bgColor>
                                                                        <td colspan=4 style=text-align:right>
                                                                            <div style=margin-right:50px><label>US Stock:</label> <input type=text style=width:60px @bind-Value=investment.USStockPercent @bind-Value:event=oninput />%</div>
                                                                            <div style=margin-right:50px><label>International Stock:</label> <input type=text style=width:60px @bind-Value=investment.InternationalStockPercent @bind-Value:event=oninput />%</div>
                                                                            <div style=margin-right:50px><label>US Bonds:</label> <input type=text style=width:60px @bind-Value=investment.USBondsPercent @bind-Value:event=oninput />%</div>
                                                                            <div style=margin-right:50px><label>International Bonds:</label> <input type=text style=width:60px @bind-Value=investment.InternationalBondsPercent @bind-Value:event=oninput />%</div>
                                                                            <div style=margin-right:50px><label>Cash:</label> <input type=text style=width:60px @bind-Value=investment.CashPercent @bind-Value:event=oninput />%</div>
                                                                            <div style=margin-right:50px><label><b>Total:</b></label>
                                                                                <span style=text-align:left;width:60px;display:inline-block>
                                                                                    @((investment.USStockPercent??0.0)+(investment.InternationalStockPercent??0.0)+(investment.USBondsPercent??0.0)+(investment.InternationalBondsPercent??0.0)+(investment.CashPercent??0.0))%
                                                                                </span>
                                                                            </div>
                                                                        </td>
                                                                    </tr>
                                                                }
                                                                <tr style=background-color:@bgColor>
                                                                    <td colspan=4 style=text-align:right>
                                                                       <button @onclick='@(e=>deleteInvestment2(e,accBuffer, invBuffer))' title='delete investment'>❌ investment</button>
                                                                    </td>
                                                                </tr>                                                                
                                                            }

                                                            alternateRow2 = !alternateRow2;
                                                        }
                                                        @if(account.Edit) {
                                                            <tr style=background:black;color:white>
                                                                <td colspan=4><button @onclick='@(e=>addInvestment2(e,accBuffer))' style=margin-left:20px>➕ Investment</button></td>
                                                            </tr>
                                                        }
                                                        
                                                        <tr style=height:4;background:white;font-size:4pt;><td>&nbsp;</td></tr>
                                                    }
                                                    <tr>
                                                        <td colspan=2>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update quotes</a>
                                                            }
                                                            <br/>
                                                            <label>Accounts: </label><br/>
                                                            <button @onclick=addAccountInline title='add account'>➕</button>
                                                            <button @onclick=ShowImport title='to import Account info from a CSV/XLSX file'>
                                                                Import CSV... ⬆️
                                                            </button>
                                                        </td>
                                                        <td style=text-align:right;padding-left:8px colspan=2>
                                                            <b>@(FormatUtilities.formatMoney(appData.FamilyData.Value))</b>
                                                            @{var (change2,percentChange2) = portfolioChange();}
                                                            <br/>change: <i>@((MarkupString)FormatUtilities.formatMoney(change2,true))</i>
                                                            <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange2))</i>
                                                        </td>
                                                    </tr>
                                                </table>
                                                break;
                                            case "allocations":
                                                bool alternateRow = false;
                                                <table class=mainTable>
                                                    @if (appData.FamilyData.Accounts.Count > 0) {
                                                        <tr style=vertical-align:bottom>
                                                            <th style=padding-left:8px>Ticker</th>
                                                            <th style=padding-left:8px;text-align:center>Quantity</th>
                                                            <th style=text-align:right;padding-left:8px>Price</th>
                                                            <th style=padding-left:8px;text-align:center>Balance</th>
                                                        </tr>
                                                    }
                                                    @{
                                                        string? lastInvestmentCategory = null;
                                                        int groupCategories = 0;
                                                    }
             
                                                    @{var groupSize = 0;}
                                                    @foreach (var investment in appData.FamilyData.GroupedInvestments.OrderBy(i=>i.InvestmentOrder).ThenByDescending(i=>i.ValuePIN)) {
                                                        if (lastInvestmentCategory != investment.InvestmentOrderCategory) {
                                                            if (groupSize > 0) {
                                                                groupSize = 0;
                                                                <tr><td style=font-size:3pt>&nbsp;</td></tr>
                                                            }
                                                            if (groupCategories == 0) {
                                                                groupCategories++;
                                                                <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                    <td style=text-align:left colspan=4>
                                                                        Stocks&nbsp;@FormatUtilities.formatPercent(appData.FamilyData.ActualStockAllocation * 100.0)
                                                                    </td>
                                                                </tr> 
                                                            }
                                                            if (groupCategories == 1 && (investment.InvestmentOrderCategory == "Bonds" || investment.InvestmentOrderCategory == "Cash" || investment.InvestmentOrderCategory == "Other")) {
                                                                groupCategories++;
                                                                <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                    <td style=text-align:left colspan=4>
                                                                        Fixed Assets &nbsp;@FormatUtilities.formatPercent((appData.FamilyData.ActualBondAllocation + appData.FamilyData.ActualCashAllocation) * 100.0)
                                                                    </td>
                                                                </tr>
                                                            }
                                                            if (groupCategories == 2 && investment.InvestmentOrderCategory == "Other") {
                                                                groupCategories++;
                                                                <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                    <td style=text-align:left colspan=4>
                                                                        Other &nbsp;@FormatUtilities.formatPercent(appData.FamilyData.ActualOtherAllocation * 100.0)
                                                                    </td>
                                                                </tr>
                                                            }
                                                        }

                                                        if (lastInvestmentCategory != investment.InvestmentOrderCategory) {
                                                            lastInvestmentCategory = investment.InvestmentOrderCategory;
                                                            if (groupSize > 0) {
                                                                groupSize = 0;
                                                                <tr><td style=font-size:3pt>&nbsp;</td></tr>
                                                            }
                                                            <tr style=vertical-align:bottom;color:white;background-Color:DimGray>
                                                                <td style=text-align:left colspan=4>
                                                                    @switch (lastInvestmentCategory) {
                                                                        case "US Stocks":
                                                                            alternateRow = false;
                                                                            <div style=margin-left:8px;background-color:DimGray>
                                                                                @lastInvestmentCategory
                                                                                <span title='percentage of all Stock'>@FormatUtilities.formatPercent(appData.FamilyData.ActualStockAllocation*100.0 * (1.0-appData.FamilyData.ActualInternationalStockAllocation))</span>
                                                                            </div>
                                                                            break;
                                                                        case "International Stocks":
                                                                            alternateRow = false;
                                                                            <div style=margin-left:8px;background-color:DimGray>
                                                                                @lastInvestmentCategory
                                                                                <span title='percentage of all Stock'>@FormatUtilities.formatPercent(appData.FamilyData.ActualStockAllocation*appData.FamilyData.ActualInternationalStockAllocation*100.0) [@FormatUtilities.formatPercent(appData.FamilyData.ActualInternationalStockAllocation*100.0)]</span>
                                                                            </div>
                                                                            break;
                                                                        case "Bonds":
                                                                            alternateRow = false;
                                                                            <div style=margin-left:8px;background-color:DimGray>
                                                                                @lastInvestmentCategory
                                                                                <span title='percentage of all Stock'>@FormatUtilities.formatPercent(appData.FamilyData.ActualBondAllocation*100.0)</span>
                                                                            </div>
                                                                            break;
                                                                        case "Cash":
                                                                            alternateRow = false;
                                                                            <div style=margin-left:8px;background-color:DimGray>
                                                                                @lastInvestmentCategory
                                                                                <span title='percentage of all Stock'>@FormatUtilities.formatPercent(appData.FamilyData.ActualCashAllocation*100.0)</span>
                                                                            </div>
                                                                            break;
                                                                        default:
                                                                            alternateRow = false;
                                                                            break;
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                        string bgColor = alternateRow ? "white" : "lightgray";
                                                        string ftsize = investment.Ticker?.Length > 5 ? ";font-size:8pt" : "";
                                                        groupSize++;
                                                        <tr style=background-color:@bgColor>
                                                            <td style=padding-left:8px;vertical-align:text-top;@ftsize title=@investment.Name>@investment.Ticker 
                                                                @if (appData.ApplyStockSizeRules && investment.IsStock && (investment.ValuePIN > appData.FamilyData.Value * .05)) {
                                                                    <sub title='@FormatUtilities.formatMoney(appData.FamilyData.Value*.05) is 5% of portfolio' style=background-color:yellow>&nbsp;&gt;5%</sub>
                                                                }
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatDoubleTwoDecimal(investment.SharesPIN)</td>
                                                            <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatMoney(investment.Price)<br/>@((MarkupString)FormatUtilities.formatPercent3WithColor(investment.PercentChange))</td>
                                                            <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatMoney(investment.ValuePIN)
                                                                @if(investment.LastUpdated!=null) {
                                                                    if (investment.IsFund) {
                                                                        <br/>
                                                                        <span title=@investment.LastUpdated>
                                                                            @investment.LastUpdated?.ToString("ddd MM/dd")
                                                                        </span>
                                                                    } else {
                                                                        <br/>
                                                                        <span title=@investment.LastUpdated>
                                                                            @investment.LastUpdated?.ToShortTimeString()
                                                                        </span>
                                                                    }
                                                                }
                                                            </td>
                                                        </tr>
                                                        alternateRow = !alternateRow;
                                                    }
                                                    <tr>
                                                        <td colspan=5><hr/></td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan=2>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update quotes</a>
                                                            }
                                                        </td>                                                            
                                                        <td style=text-align:right;padding-left:8px colspan=2>
                                                            <b>@(FormatUtilities.formatMoney(appData.FamilyData.Value))</b>
                                                            @{var (change,percentChange) = portfolioChange();}
                                                            <br/>change: <i>@((MarkupString)FormatUtilities.formatMoney(change,true))</i>
                                                            <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange))</i>
                                                        </td>
                                                    </tr>
                                                </table>
                                                break;
                                            case "bogleheads":
                                                @foreach (var account in appData.FamilyData.Accounts.OrderBy(a=>a.PortfolioReviewOrder).ThenByDescending(a=>a.Value)) {
                                                    @((MarkupString)bold((account.Identifier != null ? "<span>"+account.Identifier+"&nbsp;</span>" : "")
                                                     + (account.TaxType == "Pre-Tax(work)" ? (account.CurrentEmployerRetirementFund ? "<span>current&nbsp;</span>" : "<span>previous&nbsp;</span>") : "") 
                                                     + account.AccountType + (account.Custodian != null ? " at " + account.Custodian : "") + " (" + FormatUtilities.formatPercent(account.Percentage) + ")" ))
                                                    <br/>
                                                    @foreach (var investment in account.Investments.OrderBy(i=>i.InvestmentOrder).ThenByDescending(i=>i.ValuePIN)) {
                                                        var advice = Advisor.Advise(investment, account, appData);
                                                        <span>&nbsp;&nbsp;&nbsp;&nbsp;@FormatUtilities.formatPercent(investment.Percentage) @investment.Name (@investment.Ticker) (@(investment.ExpenseRatio!=null?investment.ExpenseRatio:"??")%)</span><br/>
                                                        @foreach (var adviceItem in advice) {
                                                            <span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style=background-color:yellow>
                                                                @adviceItem
                                                            </span></span><br/>
                                                        }
                                                    }
                                                    <br/>
                                                }
                                                break;
                                            case "custodians":
                                                <table class=mainTable>
                                                    @if (appData.FamilyData.Accounts.Count > 0) {
                                                        <tr style=vertical-align:bottom>
                                                            <th style=padding-left:8px>Custodian</th>
                                                            <th style=padding-left:8px;text-align:center>Balance</th>
                                                        </tr>
                                                    }
                                                    @{var groupByCustodian = appData.FamilyData.Accounts
                                                        .GroupBy(a => a.Custodian)
                                                        .Select(g => new
                                                        {
                                                            Custodian = g.Key,
                                                            Value = g.Sum(a => a.Value)
                                                        })
                                                        .OrderByDescending(g => g.Value);
                                                    }
                                                    @foreach (var group in groupByCustodian) {
                                                            <tr style=color:white;background:black>
                                                            <td>
                                                                @group.Custodian
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px>
                                                                @FormatUtilities.formatMoney(group.Value)
                                                            </td>
                                                        </tr>
                                                        bool alternateRow4 = false;
                                                        @foreach (var account in appData.FamilyData.Accounts.OrderByDescending(a=>a.Value))
                                                        {
                                                            if (account.Custodian == group.Custodian) {
                                                                string bgColor = alternateRow4 ? "white" : "lightgray";
                                                                <tr style=background:@bgColor;>
                                                                    <td colspan=1>&nbsp;&nbsp;
                                                                        @account.Title
                                                                    </td>
                                                                    <td style=text-align:right;padding-left:8px>
                                                                        @FormatUtilities.formatMoney(account.Value)
                                                                    </td>
                                                                </tr>
                                                                alternateRow4 = !alternateRow4;
                                                            }
                                                        }
                                                    }
                                                    <tr>
                                                        <td>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update quotes</a>
                                                            }
                                                        </td>
                                                        <td style=text-align:right;padding-left:8px><hr/><b>@(FormatUtilities.formatMoney(appData.FamilyData.Value))</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan=2 style=text-align:right;padding-left:8px>
                                                            @{var (change4,percentChange4) = portfolioChange();}
                                                            change: <i>@((MarkupString)FormatUtilities.formatMoney(change4,true))</i>
                                                            <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange4))</i>
                                                        </td>
                                                    </tr>
                                                </table>
                                                break;                                                    
                                            case "tax-types":
                                                var showFootnotes = new bool[4];
                                                <table class=mainTable>
                                                    @if (appData.FamilyData.Accounts.Count > 0) {
                                                        <tr style=vertical-align:bottom>
                                                            <th>Tax-Type</th>
                                                            <th style=padding-left:8px;text-align:center>Unrealized<br/>Earned Income</th>
                                                            <th style=padding-left:8px;text-align:center>Unrealized<br/>Capital Gains</th>
                                                            <th style=padding-left:8px;text-align:center>Balance</th>
                                                        </tr>
                                                    }
                                                    @{var groupByTaxType = appData.FamilyData.Accounts
                                                        .GroupBy(a => a.TaxType2)
                                                        .Select(g => new
                                                        {
                                                            TaxType = g.Key,
                                                            Value = g.Sum(a => a.Value),
                                                            CostBasis = g.Sum(a => a.CalculateCostBasis())
                                                        })
                                                        .OrderByDescending(g => g.Value);
                                                    }
                                                    @foreach (var group in groupByTaxType) {
                                                        bool alternateRow3 = false;
                                                        <tr style=color:white;background:black>
                                                            <td font-size:smaller>@group.TaxType
                                                                @switch (group.TaxType)
                                                                {
                                                                    case "Pre-Tax":
                                                                        <sub>1</sub>
                                                                        showFootnotes[0] = true;
                                                                        break;
                                                                    case "Taxable":
                                                                        <sub>2</sub>
                                                                        showFootnotes[1] = true;
                                                                        break;
                                                                    case "Post-Tax":
                                                                        <sub>3</sub>
                                                                        showFootnotes[2] = true;
                                                                        break;
                                                                    case "For Beneficiaries (POD)":
                                                                    case "Refundable Deposits":
                                                                    case "Education Savings":
                                                                    default:
                                                                        <sub>4</sub>
                                                                        showFootnotes[3] = true;
                                                                        break;
                                                                }
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px>
                                                                @switch (group.TaxType) {
                                                                    case "Pre-Tax":
                                                                        <span>@FormatUtilities.formatMoneyNarrow(group.Value)</span>
                                                                        break;
                                                                    case "Taxable":
                                                                    case "Post-Tax":
                                                                        <span>@FormatUtilities.formatMoneyNarrow(0.0)</span>
                                                                        break;
                                                                    default:
                                                                        <span>NYI<sub>4</sub></span>
                                                                        showFootnotes[3] = true;
                                                                        break;
                                                                }
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px>
                                                                @if (!group.TaxType.EndsWith("-Tax")) {
                                                                    @FormatUtilities.formatMoneyNarrow(group.Value - group.CostBasis)
                                                                } else {
                                                                    @FormatUtilities.formatMoneyNarrow(0.0)
                                                                }
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px>@FormatUtilities.formatMoneyNarrow(group.Value)</td>
                                                        </tr>
                                                        <tr style=color:white;background:black>
                                                            <td colspan=4>
                                                                @FormatUtilities.formatPercent(group.Value/appData.FamilyData.Value*100.0)
                                                            </td>
                                                        </tr>
                                                        List<Investment> groupInvestments = new();
                                                        @foreach (var account in appData.FamilyData.Accounts.OrderByDescending(a=>a.Value))
                                                        {
                                                            if (account.TaxType2 == group.TaxType) {
                                                                string bgColor2 = alternateRow3 ? "white" : "lightgray";
                                                                <tr style=background:@bgColor2;>
                                                                    <td colspan=4>&nbsp;&nbsp;
                                                                        @account.Title
                                                                    </td>
                                                                </tr>
                                                                <tr style=background:@bgColor2;>
                                                                    <td style=text-align:right;padding-left:8px colspan=2>
                                                                        @switch (group.TaxType) {
                                                                            case "Pre-Tax":
                                                                                <span>@FormatUtilities.formatMoneyNarrow(account.Value)</span>
                                                                                break;
                                                                            case "Taxable":
                                                                            case "Post-Tax":
                                                                                <span>@FormatUtilities.formatMoneyNarrow(0.0)</span>
                                                                                break;
                                                                            default:
                                                                                showFootnotes[3] = true;
                                                                                <span>NYI<sub>4</sub></span>
                                                                                break;
                                                                        }
                                                                    </td>                                                                        
                                                                    <td style=text-align:right;padding-left:8px>
                                                                        @if (!account.TaxType.EndsWith("-Tax")) {
                                                                            var costBasis = account.CalculateCostBasis();
                                                                            if (costBasis != null)
                                                                            {
                                                                                <span>@FormatUtilities.formatMoneyNarrow(account.Value - costBasis)</span>
                                                                            } else {
                                                                                <span>missing<br/>cost basis</span>
                                                                            }

                                                                        } else {
                                                                            <span>@FormatUtilities.formatMoneyNarrow(0.0)</span>
                                                                        }
                                                                    </td>
                                                                    <td style=text-align:right;padding-left:8px>
                                                                        @FormatUtilities.formatMoneyNarrow(account.Value)
                                                                    </td>                                                                        
                                                                </tr>
                                                                alternateRow3 = !alternateRow3;
                                                            }
                                                        }
                                                    }
                                                    <tr>
                                                        <td colspan=2>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title='Refresh Quotes' style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update quotes</a>
                                                            }
                                                        </td>
                                                        <td colspan=2 style=text-align:right;padding-left:8px><hr/><b>@(FormatUtilities.formatMoney(appData.FamilyData.Value))</b></td>
                                                    </tr>
                                                    <tr>
                                                        <td colspan=4 style=text-align:right;padding-left:8px>
                                                            @{var (change3,percentChange3) = portfolioChange();}
                                                            change: <i>@((MarkupString)FormatUtilities.formatMoney(change3,true))</i>
                                                            <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange3))</i>
                                                        </td>
                                                    </tr>
                                                </table><br/>
                                                    <span>Current Tax law:</span><br/>
                                                    @if(showFootnotes[0]) {<span><sub>1</sub>- total sale treated as Earned Income</span><br/>}
                                                    @if(showFootnotes[1]) {<span><sub>2</sub>- profits of sale treated as Capital Gains</span><br/>}
                                                    @if(showFootnotes[2]) {<span><sub>3</sub>- no taxes on sale</span><br/>}
                                                    @if(showFootnotes[3]) {<span><sub>4</sub>- description needs to be written</span><br/>}
                                                break;
                                            default:
                                                Navigation.NavigateTo("/portfolio-tracker");
                                                break;
                                        }
                                        <br/>
                                        @if (!Navigation.Uri.EndsWith("/accounts")) {
                                            <fieldset>
                                                @((MarkupString)bold("Weighted Expense Ratio: "))
                                                <span>&nbsp;@FormatUtilities.formatPercent3(appData.FamilyData.OverallER) or @FormatUtilities.formatMoney(appData.FamilyData.ExpensesTotal) /year</span>
                                                @if (appData.FamilyData.InvestmentsMissingER > 0){<br/><span>&nbsp;(@appData.FamilyData.InvestmentsMissingER investment(s) missing ER)</span><br/>}
                                            </fieldset>
                                        }
                                    }
                                    @if (appData.FamilyData.Accounts.Count == 0) {
                                        <button style=margin-left:40px @onclick=addAccountInline title='add account'>➕</button>
                                        <button @onclick=ShowImport title='import Accounts from a CSV/XLSX file'>
                                            Import CSV... ⬆️
                                        </button>
                                        <button @onclick=showOpenBH title='open Accounts (into a new profile) from a bogleheads.org Portfolio Review'>
                                            Import(bh)
                                        </button>
                                    }
                                    @if(showEditAccountHelpers || appData.FamilyData.Accounts.Count == 0) {
                                        <br/><br/><i>Editing Investable Assets:</i>
                                        <ul>
                                            <li>
                                                To hand enter an account, click the add account button "➕" above.
                                            </li>
                                            <li>
                                                To import accounts via a CSV file from the account custodian (Vanguard, Fidelity, Schwab, etc...), click the import accounts button "Import CSV... ⬆️" above.
                                            </li>
                                            <li>
                                                To import accounts from an existing portfolio review on bogleheads.org, click the "Import(bh)" button above.
                                            </li>
                                            @if (appData.FamilyData.Accounts.Count > 0) {
                                                <li>
                                                    To edit existing accounts/investments, click on it above.
                                                </li>
                                            }
                                        </ul>
                                        <br/><span>See <a href="/updating-portfolio">3 ways to update portfolios</a> for more options to update accounts/investments.</span>
                                        <br/>
                                        <br/>
                                    }
                                    <hr/>
                                </td>
                                }
                                break;                                
                            default:
                                break;
                        }
                    </tr>
                }          
            </table>
        </div>
        
        @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
            <p>"Consider getting a <a href="portfolio-review">Portfolio Review</a> and use the <a href="/savings-planner">Savings Planner</a>!"</p>
        }
    }

@code {

    async void doneEditing()
    {
        if (appData.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            foreach (var account in accounts) {
                account.Edit = false;
            }
            
            accountIndexEditing = null;

            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    void editAccount(MouseEventArgs e, int index)
    {
        if (appData.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            if (accountIndexEditing != null) {
                accounts[accountIndexEditing.Value].Edit = false;            
            }

            accountIndexEditing = index;
            accounts[accountIndexEditing.Value].Edit = true;
        }
    }

    void editAccounts() {
        showEditAccountHelpers = !showEditAccountHelpers;
        if (!Navigation.Uri.EndsWith("/portfolio-tracker/accounts")) {
            Navigation.NavigateTo("/portfolio-tracker/accounts");
        }
    }

    void toggleTaxFilingStatusEditing() {
        taxFilingStatusEditing = !taxFilingStatusEditing;
    }

    void toggleAssetAllocationEditing() {
        assetAllocationEditing = !assetAllocationEditing;
    }

    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Quotes";
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    int? accountIndexEditing = null;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        if (appData.FamilyData is not null) {
            runningTotal += itemTotal ?? 0;
            if (!pastTotal) {
                pastTotal = appData.FamilyData.PlannedSavings <= runningTotal;

                if (pastTotal) {
                    return "<div>-------<br/><div>Planned savings " + (appData.FamilyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(appData.FamilyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
                }
            }
        }

        return "";
    }

    public int? GetRecommdedIRAAmount(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
            case IRAType.DeductibleIRA:
                return person.IRA.AmountToSave;
            case IRAType.Roth:
                return person.RothIRA.AmountToSave;
            case IRAType.NondeductibleIRAThenBackdoorRoth:
            case IRAType.NondeductibleIRA:
                return person.IRA.AmountToSave;
            default:
                return null;
        }
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.formatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.formatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + FormatUtilities.formatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string getPronoun(Person person)
    {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    [Parameter]
    public string? View { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/portfolio-tracker";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "Portfolio Tracker";
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/portfolio-assets-steps.json");
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void ShowImport() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import-accounts");
    }

    private void showOpenBH() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import-accounts-bh");
    }

    private async Task UpdateInvestmentPrice(Investment investment)
    {
        var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={investment.Ticker}&apikey={appData.EODHistoricalDataApiKey}");
        var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
        if (quoteData?.Close != null) {
            investment.Price = quoteData.Close;
            investment.UpdateValue();
        }
    }
    public static DateTime? UnixTimeStampToDateTime( int? unixTimeStamp )
    {
        if (!unixTimeStamp.HasValue) return null;
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ?? 0 ).ToLocalTime();
        return dateTime;
    }
    private async Task UpdateInvestmentsPrice(string ticker, List<Investment> investments)
    {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={ticker}&apikey={appData.EODHistoricalDataApiKey}");
            var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
            if (quoteData?.Close != null) {
                foreach (var investment in investments) {
                    investment.Price = quoteData.Close;
                    if (quoteData.Volume > 0) {
                        investment.PreviousClose = quoteData.PreviousClose; 
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else if (quoteData.Volume == 0) {
                        investment.PreviousClose = quoteData.PreviousClose;
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else {
                        investment.PreviousClose = quoteData.Close;
                        investment.PercentChange = null;
                        investment.LastUpdated = null;
                    }

                    investment.UpdateValue();
                }
            }
        }
    }

    private async Task UpdatePrice(MouseEventArgs e, Investment investment) {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            await UpdateInvestmentPrice(investment);
        }
    }

    private void finishImport()
    {
        if (appData is not null && appData.FamilyData is not null && appData.ImportResult is not null) {

            foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
            {
                if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
                {
                    updatedAccount.ReplaceAccount.Investments.Clear();
                    updatedAccount.ReplaceAccount.Investments.AddRange(updatedAccount.Investments);
                }
            }

            foreach (var newAccount in appData.ImportResult.NewAccounts)
            {
                if (newAccount.Import)
                {
                    appData.FamilyData.Accounts.Add(newAccount);
                }
            }

            appData.ImportResult = null;
        }
    }

    private void cancelImport()
    {
        appData.ImportResult = null;
    }

    private void addInvestment(MouseEventArgs e, int accountIndex)
    {
        if (appData.FamilyData is not null) {
            var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
            appData.FamilyData.Accounts[accountIndex].Investments.Add(newInvestment);
        }
    }

    private void addInvestment2(MouseEventArgs e, int accountIndex) {
        if (appData.FamilyData is not null) {
            var account = appData.FamilyData.Accounts[accountIndex];
            account.Investments.Add(new Investment(appData.FamilyData.PIN) { funds = Funds });
        }
    }

    void deleteInvestment2(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        if (appData.FamilyData is not null) {
            var account = appData.FamilyData.Accounts[accountIndex];
            var investmentToDelete = account.Investments[investmentIndex];
            account.Investments.Remove(investmentToDelete);
            appData.FamilyData.UpdatePercentages();
        }
    }

    void deleteInvestment(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        if (appData.FamilyData is not null) {
            appData.FamilyData.Accounts[accountIndex].Investments.RemoveAt(investmentIndex);
            Navigation.NavigateTo("/portfolio-tracker/reload");
            appData.FamilyData.UpdatePercentages();
        }
    }
    void addAvailableFund(MouseEventArgs e, Account account)
    {
        if (appData.FamilyData is not null) {
            var newFund = new Investment(appData.FamilyData.PIN) { funds = Funds };
            account.AvailableFunds.Add(newFund);
        }
    }

    void deleteAvailableFund(MouseEventArgs e, Account account, int investmentIndex)
    {
        account.AvailableFunds.RemoveAt(investmentIndex);
    }

    void addAccountInline()
    {
        if (appData.FamilyData is not null) {
            var newAccount = new Account(appData.FamilyData.PIN);
            var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
            newAccount.Investments.Add(newInvestment);
            newAccount.Edit = true;
            appData.FamilyData?.Accounts.Add(newAccount);
            
            Navigation.NavigateTo("/portfolio-tracker/accounts");
        }
    }

    private async void deleteAccount2(MouseEventArgs e, int accountIndex)
    {
        if (appData.FamilyData is not null) {
            var accountToDelete = appData.FamilyData.Accounts[accountIndex];
            appData.FamilyData.Accounts.Remove(accountToDelete);
            accountIndexEditing = null;
            appData.FamilyData.UpdatePercentages();
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    void addAccount()
    {
        if (appData.FamilyData is not null) {
            var newAccount = new Account(appData.FamilyData.PIN);
            var newInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds };
            newAccount.Investments.Add(newInvestment);
            appData.FamilyData?.Accounts.Add(newAccount);
        }
    }
    void deleteAccount(MouseEventArgs e, int accountIndex)
    {
        if (appData.FamilyData is not null) {
            appData.FamilyData.Accounts.RemoveAt(accountIndex);
            Navigation.NavigateTo("/portfolio-tracker/reload");
            appData.FamilyData.UpdatePercentages();
        }
    }

    private async Task LoadPortfolioForTopic(string topicStr) {
        var options = new JsonSerializerOptions() 
            {
                Converters =
                    {
                        new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                    }
            };
        var topicJsonUri = "https://raw.githubusercontent.com/bogle-tools/financial-variables/main/data/portfolios/" + topicStr + ".json";
        var stream = await Http.GetStreamAsync(topicJsonUri);
        appData.FamilyData = await FamilyData.LoadFromJsonStream(appData, stream, options);
    }

    private async Task CopyTextToClipboard()
    {
        var text = await JS.InvokeAsync<string>("getTableInnerText");
        text = text.Replace("\n✏️\t","");
        text = text.Replace("✏️\t","");
        text = text.Replace("Show Portfolio Analysis\n", "");
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task refreshPrices() {
        refreshButtonText = "Updating...";
        Dictionary<string,List<Investment>> quotes = new();

        var now = DateTime.Now.Date;
        var previousMarketClose = PreviousMarketClose(now).ToLocalTime();
        var nextMarketClose = NextMarketClose(now).ToLocalTime();
        var nextMarketOpen = new DateTime(nextMarketClose.Year,nextMarketClose.Month,nextMarketClose.Day,13,30,00).ToLocalTime();
        var marketIsBeforeOpen = DateTime.Now < nextMarketOpen;
        bool marketIsOpen = DateTime.Now >= nextMarketOpen && DateTime.Now <= nextMarketClose;
        var marketIsAfterClose = DateTime.Now > nextMarketClose;
        if (appData.FamilyData is not null) {
            foreach (var account in appData.FamilyData.Accounts) {
                foreach (var investment in account.Investments) {
                    bool fetchQuote = false;
                    if (investment.IsStock || investment.IsETF) {
                        fetchQuote = investment.LastUpdated == null || (marketIsBeforeOpen && investment.LastUpdated < previousMarketClose) || marketIsOpen || (marketIsAfterClose && investment.LastUpdated < nextMarketClose);
                    } else if (investment.IsFund) {
                        fetchQuote = investment.LastUpdated == null || investment.LastUpdated?.Date != previousMarketClose.Date;
                    }

                    if (fetchQuote && investment.Ticker != null) {
                        if (!quotes.ContainsKey(investment.Ticker)) {
                            quotes.Add(investment.Ticker, new List<Investment> () { investment });
                        } else {
                            var investments = quotes[investment.Ticker];
                            investments.Add(investment);
                        }
                    }
                }
            }

            List<string> rsuTickers = new();
            for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                var person = appData.FamilyData.People[p];
                foreach (var rsuGrant in person.RSUGrants) {
                    if (!string.IsNullOrEmpty(rsuGrant.Ticker)) {
                        var ticker = rsuGrant.Ticker.ToUpper();
                        var grantInvestment = new Investment() { Ticker = ticker, GrantToUpdateQuote = rsuGrant };
                        if (!quotes.ContainsKey(ticker)) {
                            quotes.Add(ticker, new List<Investment> () { grantInvestment });
                        } else {
                            var investments = quotes[ticker];
                            investments.Add(grantInvestment);
                        }
                    }
                }
            }

            foreach (var quote in quotes)
            {
                try {
                    await UpdateInvestmentsPrice(quote.Key, quote.Value);
                } catch (Exception ex) {
                    Console.WriteLine(ex.GetType().Name + ": " + ex.Message + " " + ex.StackTrace);
                }
            }

            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }

        refreshButtonText = "🔃 Quotes";
    }

    enum MarketDay {
        MarketDay,
        Holiday,
        HalfDay,
        WeekEnd
    }
    
    static DateTime[] holidays = {
        new DateTime(2023, 1, 2),
        new DateTime(2023, 1 , 16 ),
        new DateTime(2023, 2, 20),
        new DateTime(2023, 4, 7),
        new DateTime(2023, 5, 29),
        new DateTime(2023, 6, 19),
        new DateTime(2023, 7, 4),
        new DateTime(2023, 9, 4),
        new DateTime(2023, 11, 23),
        new DateTime(2023, 12, 25),
    };

    static DateTime[] halfDays = {
        new DateTime(2023, 7, 3),
        new DateTime(2023, 11, 24),
        new DateTime(2023, 12, 24),
    };

    private MarketDay GetMarketDay(DateTime dateTime) {
        switch (dateTime.DayOfWeek) {
            case DayOfWeek.Saturday: 
            case DayOfWeek.Sunday:
                return MarketDay.WeekEnd;
            default:
                var date = dateTime.Date;
                if (holidays.Contains(date)) {
                    return MarketDay.Holiday;
                }
                
                if (halfDays.Contains(date)) {
                    return MarketDay.HalfDay;
                }

                return MarketDay.MarketDay;
        }
    }

    private int? PINEntry { get; set; }
    private void setPIN() {
        if (appData.FamilyData is not null) {
            if (PINEntry != null) {
                appData.FamilyData.PIN = PINEntry;
            }
        }
    }

    private DateTime PreviousMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, -1);
    }
    private DateTime NextMarketClose(DateTime dateTime) {
        return MarketClose(dateTime, 1);
    }
    private DateTime MarketClose(DateTime dateTime, int direction) {
        DateTime marketCloseDay;
        if (direction == -1) {
            marketCloseDay = dateTime.AddDays(direction);
        } else {
            marketCloseDay = dateTime;
        }

        switch (GetMarketDay(marketCloseDay)) {
            case MarketDay.Holiday:
            case MarketDay.WeekEnd:
                return MarketClose(marketCloseDay.AddDays(direction), direction);
            case MarketDay.HalfDay:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 17, 0, 0);
            default:
                return new DateTime(marketCloseDay.Year, marketCloseDay.Month, marketCloseDay.Day, 20, 0, 0);
            
        }
    }

    private (double? change, double? percentChange) portfolioChange() 
    {
        if (appData.FamilyData is not null) {
            double? change = 0.0;
            double? total = 0.0;
            foreach (var investment in appData.FamilyData.GroupedInvestments)
            {
                total += investment.Value ?? 0.0;
                if (investment.PercentChange != null)
                {
                    change += (investment.Price - investment.PreviousClose) * investment.SharesPIN;
                }
            }

            var startOfDayTotal = total - change;
            return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
        }
        else 
        {
            return (null, null);
        }
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }
}
