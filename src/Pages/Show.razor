@page "/invest/{stepPath}"
@inject HttpClient Http

<PageTitle>
invest/@stepPath
</PageTitle>



@if (priorities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var priority in priorities) {
        @if (priority.step == stepPath) {
            <h2>@priority.number: @priority.title</h2>
            <h4>@((MarkupString)markupize(priority.priority))</h4>

            <p><b>Summary:</b> @((MarkupString)markupize(priority.summary))</p>
            <p><b>Approximate Return:</b> @priority.returns</p>
            <p><b>Details:</b> @((MarkupString)markupize(priority.description))</p>
            <p><b>Status:</b> 
                <select>
                    <option>Unsure</option>
                    <option>n/a</option>
                    <option>Needed</option>
                    <option>Not in Plan</option>
                    <option>Planned</option>
                    <option>Executing</option>
                    <option>Complete</option>
                </select>
            </p>
            <p><b>Worksheet:</b> </p>

                @switch (priority.number) {
                    case 1:
                        <label>Annual Expenses:</label><input type='text' /><br />

                        break;
                    case 2:
                        <label>50 or older?</label><input type='checkbox' /><br />
                        <label>Percent Matched:</label><input type='text' /><br />
                        <label>Limit:</label><input type='text' /><br />
                        <label>Amount to get full match:</label><span id='fullMatch'></span><br/>
                        <label>2022 401k Contribution:</label><input type='text'><br/>
                        <label>2022 Match:</label><span id='match'></span><br/>

                        break;
                    case 3:
                        break;
                    case 4:
                        break;
                    case 5:
                        break;
                    case 6:
                        break;
                    case 7:
                        break;
                    case 8:
                        break;
                    case 9:
                        break;
                    case 10:
                        break;
                }
        }
    }
}

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        returnVal += "<a href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                     }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                     }
                    break;
                default:
                      switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                     }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    public string foo = "<p>hello <b>worjjld</b> again</p>";

    [Parameter]
    public string? stepPath { get; set; }

    private InvestementPriority[]? priorities;

    protected override async Task OnInitializedAsync()
    {
        priorities = await Http.GetFromJsonAsync<InvestementPriority[]>("data/investment-priorities.json");
    }
}
