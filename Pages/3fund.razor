@page "/3fund/{Funds}/{Year}/{AA}/{Intl}"
@page "/3fund/{Funds}/{Year}/{AA}"
@page "/3fund/{Funds}/{Year}"
@page "/3fund/{Funds}"
@page "/3fund"
@inject HttpClient Http

<PageTitle>
  3fund/@Year
</PageTitle>

@* import papaparse from 'papaparse';
import React from 'react';
import './App.css';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  LineController,
} from "chart.js";
import { Chart } from 'react-chartjs-2';

class App extends React.Component {
  state = {
    monthlyQuotes: null,
    dailyQuotes: null,

    statusMessage: "Loading prices",
    editMode: false,


  };
  month_names_short = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

  async toCsv(uri) {
    return new Promise((resolve, reject) => {
      papaparse.parse(uri, {
        download: true,
        complete (results, file) {
          resolve(results.data)
        },
        error (error, file) {
          resolve(null)
        }
      })
    })
  }

  setTickers ()
  {
    tickers = null;
    var eof = false;
    var i = 1;
    while (!eof) {
      if (fundTypes[i][0] != '') {
        if (fundTypes[i][0].toUpperCase() == type.toUpperCase()) {
          tickers = [fundTypes[i][1], fundTypes[i][2], fundTypes[i][3]];
        }

        i++;
      } else {
        eof = true;
      }
    }
  }

  async loadFundInfo() {
    monthlyQuotes = [null, null, null];
    dailyQuotes = [null, null, null];

    this.setTickers();

    if (tickers == null) return null;

    var monthlyQuotePromises = [
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + tickers[0] + ".csv"),
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + tickers[1] + ".csv"),
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + tickers[2] + ".csv")];
    var dailyQuotePromises = [
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + tickers[0] + ".csv"),
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + tickers[1] + ".csv"),
      this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + tickers[2] + ".csv")];

    monthlyQuotes = await Promise.all(monthlyQuotePromises);
    dailyQuotes = await Promise.all(dailyQuotePromises);

    if (monthlyQuotes[0] != null) {
      var loop = true;
      while (loop) {
        if (monthlyQuotes[0][indexes[0]].length == 1 
          || monthlyQuotes[1][indexes[1]].length == 1 
          || monthlyQuotes[2][indexes[2]].length == 1) {
            loop = false;
        } else {
          var s = monthlyQuotes[0][indexes[0]][0];
          var sI = monthlyQuotes[1][indexes[1]][0];
          var b = monthlyQuotes[2][indexes[2]][0];
    
          var max;
          if (s < sI) {
            max = sI;
          } else {
            max = s;
          }
          if (max < b) {
            max = b;
          }
          
          if (s < max) indexes[0] = indexes[0] + 1;
          if (sI < max) indexes[1] = indexes[1] + 1;
          if (b < max) indexes[2] = indexes[2] + 2;
    
          if (s == sI && sI == b) {
            var date = monthlyQuotes[0][indexes[0]][0];
            startYear = parseInt(date.substr(0,4));
            startMonth = parseInt(date.substr(5,2));
            loop = false;
          }
        }
      }
      statusMessage = null;
    } else {
      statusMessage = "No data found";
    }

    this.setState(this.state);
  }

  harvestAllocations() {
    const params = new URLSearchParams(window.location.search);
    var aa = params.has('aa') ? params.get('aa') : '70-30';
    var intl = params.has('intl') ? params.get('intl') : '20';
    var sbAllocations = aa.split('-');
    this.setAllocations(sbAllocations[0], intl, sbAllocations[1], true)
  }

  setAllocations(stockAlloc, intlAlloc, bondAlloc, commit) {
    var sbAllocations = [stockAlloc, bondAlloc];

    var sAllocation = parseInt(sbAllocations[0]) / 100;
    var bAllocation = parseInt(sbAllocations[1]) / 100;
    var iAllocation = intlAlloc != null ? parseInt(intlAlloc) / 100 : 0;
    allocations = [sAllocation,iAllocation,bAllocation];

    if (commit) {
      const params = new URLSearchParams(window.location.search);

      if (type != "VanguardETF") {
        params.set('type', type);
      } else {
        if (params.has('type')) params.delete('type');
      }

      if (sAllocation != .7) {
        params.set('aa', sAllocation*100 + "-" + bAllocation*100);
      } else {
        if (params.has('aa')) params.delete('aa');
      }

      if (iAllocation != .2) {
        params.set('intl', iAllocation*100);
      } else {
        if (params.has('intl')) params.delete('intl');
      }

      if (Array.from(params).length > 0) {
        window.history.replaceState({}, "", `${window.location.pathname}?${params.toString()}`);
      } else {
        window.history.replaceState({}, "", `${window.location.pathname}`);
      }
    }
    this.setState(allocations);
  }

  getParam(params, paramName, defaultValue) {
    return params.has(paramName) ? params.get(paramName) : defaultValue
  }

  setParam (value, params, paramName, defaultValue) {
    if (value == defaultValue || value == 0) {
      if (params.has(paramName)) params.delete(paramName);
    } else {
      params.set(paramName, value);
    }
  }

  async harvestParams () {
    const params = new URLSearchParams(window.location.search);
    type = this.getParam(params, 'type', 'VanguardETF');
    showYear = Number(this.getParam(params, 'year', showYear));
    var fundTypesPromise = this.toCsv("https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/fundTypes.csv");
    fundTypes = await fundTypesPromise;
    this.harvestAllocations();
  }

  setParams() {
    var params = new URLSearchParams(window.location.search);
    this.setParam(type, params, 'type', 'VanguardETF');
    this.setParam(showYear, params, 'year', 0);
    if (Array.from(params).length > 0) {
      window.history.replaceState({}, "", `${window.location.pathname}?${params.toString()}`);
    } else {
      window.history.replaceState({}, "", `${window.location.pathname}`);
    }
  }

  async componentDidMount () {
    await this.harvestParams();
    this.loadFundInfo();
  }

  chartData =
              {
                datasets: []
              };

   changeYear = (e) => {
    var checkbox = e.target;
    var year = checkbox.getAttribute('year');
    var checked = checkbox.checked;
    showYear = checked ? Number(year) : 0

    // clear all checkboxes except for latest clickced
    var checkboxes = document.getElementsByName('check')
    checkboxes.forEach((item) => {
        item.checked = Number(item.getAttribute('year')) == showYear;
    });

    this.setParams();
    this.harvestParams();
    this.render();
  }

  render () {
    const handleChange = (e) => {
      type = e.target.value;
      this.setParams();
      this.loadFundInfo();
      this.render();
    }

    const handleSlide = (e) => {
      var stockAlloc = document.getElementById('stockAlloc');
      var bondAlloc = document.getElementById('bondAlloc');
      var stock = e.target.value;
      var bond = 100 - stock;
      stockAlloc.innerText = e.target.value + '%';
      bondAlloc.innerText = 100 - e.target.value + '%';
      var i = allocations[1] * 100;
      this.setAllocations(stock, i, bond, true);
    }

    const handleIntlSlide = (e) => {
      var intlAlloc = document.getElementById('intlAlloc');
      intlAlloc.innerText = e.target.value + '%';
      var s = allocations[0] * 100;
      var b = allocations[2] * 100;
      this.setAllocations(s.toString(), e.target.value, b.toString(), false);
    }
    
    const toggleEditMode = (e) => {
      editMode = !editMode;

      if (!editMode) {
        var stockAlloc = document.getElementById('stockAlloc');
        var bondAlloc = document.getElementById('bondAlloc');

        var stock = Number(stockAlloc.innerText.substring(0, stockAlloc.innerText.length - 1));
        var bond = Number(bondAlloc.innerText.substring(0, bondAlloc.innerText.length - 1));
        var i = allocations[1] * 100;
        this.setAllocations(stock, i, bond, true);
      }

      this.setState(this.state);
      this.render();
    }

    ChartJS.register(LineController, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);
    
    var chartOptions = 
          {
          responsive: true,
          maintainAspectRatio: true,
          scales: {
              x: {
                  ticks: {
                      font: {
                          size: 10,
                          },
                  }
              }
            }
          };

    return  (monthlyQuotes != null) &&  *@

    @if (fundFamilies != null)
    {
      Funds = Funds ?? "VanguardETF";
      AA = AA ?? "70-30";
      Intl = Intl ?? "20";
      Year = Year ?? "All";

      var sbAllocations = AA.Split('-');
      double sAllocation = double.Parse(sbAllocations[0]) / 100;
      double bAllocation = double.Parse(sbAllocations[1]) / 100;
      double iAllocation = double.Parse(Intl) / 100;
      Allocations[0] = sAllocation;
      Allocations[1] = iAllocation;
      Allocations[2] =  bAllocation;

      var selectedFundFamily = fundFamilies.Where(ff=> ff.Name.ToLower() == Funds.ToLower()).ToList()[0];
      setTickers(selectedFundFamily);
      var selectedFundFamilyIndex = selectedFundFamily.Index;
      <div lang='en'>
        <header className="App-header">
          <div>
            <select id='fundType' value='@selectedFundFamilyIndex' @onchange=@setFunds>
              @foreach (var fundFamilyItem in fundFamilies)
              {
                <option value='@fundFamilyItem.Index'>@fundFamilyItem.Name</option>
              }
            </select>
            <span id='tickers' lang='en'>
              &nbsp;&nbsp;(@Tickers[0] - @Tickers[1] - @Tickers[2])
            </span>
          </div>
          @code{
              void setFunds(ChangeEventArgs e)
              {
                  var fundFamily = fundFamilies.Where(ff=> ff.Index == int.Parse(e.Value?.ToString())).ToList()[0];
                  Funds = fundFamily.Name;
                  setTickers(fundFamily);
              }

              async void setTickers(FundFamily fundFamily)
              {
                  Tickers[0] = fundFamily.StockFund;
                  Tickers[1] = fundFamily.InternationalStockFund;
                  Tickers[2] = fundFamily.BondFund;

                  monthlyQuotes = new Array[3];
                  monthlyQuotes[0] = await MonthlyQuotes.GetMonthlyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + Tickers[0] + ".csv");
                  monthlyQuotes[1] = await MonthlyQuotes.GetMonthlyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + Tickers[1] + ".csv");
                  monthlyQuotes[2] = await MonthlyQuotes.GetMonthlyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/MA_" + Tickers[2] + ".csv");

                  dailyQuotes = new Array[3];
                  dailyQuotes[0] = await DailyQuotes.GetDailyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + Tickers[0] + ".csv");
                  dailyQuotes[1] = await DailyQuotes.GetDailyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + Tickers[1] + ".csv");
                  dailyQuotes[2] = await DailyQuotes.GetDailyQuotesAsync(Http,"https://raw.githubusercontent.com/rrelyea/3fund-prices/main/data/D_" + Tickers[2] + ".csv");
              }              
              void toggleEditMode()
              {
                  EditMode = !EditMode;
              }
          }

          <div className='container'>
            <span className='allocation item item-1'>
            Stocks: <span id='stockAlloc'>@(Allocations[0]*100)%</span>
            </span>
            <span className='item item-2'>
              <input type="range" min="0" max="100" defaultValue=@(Allocations[0]*100)  />
               <span className='slash'>&nbsp;/&nbsp;</span>
            </span>
            <span className='allocation item item-3'>
              Bonds: <span id='bondAlloc'>@(Allocations[2]*100)%</span>
            </span>
            <br/>
            <span className='allocation'>
            International: <span id='intlAlloc'>@(Allocations[1]*100)%</span>
            </span>
            <span className='allocation'>
              @* {editMode ? <input type="range" min="0" max="100" defaultValue={allocations[1]*100} onInput={(e)=>handleIntlSlide(e,false)} onChange={(e)=>handleIntlSlide(e,true)} /> : false } *@
            </span>
            <button className='editButton' onClick=@toggleEditMode>@(EditMode ? "save" : "edit")</button>
            @* <Chart type='line' id='chart' height='300' data={this.chartData} options={chartOptions} /> *@
          </div> 
          <h4>@StatusMessage</h4>
          <table>
            <tbody>
              <tr>
                <td className='column'>
                  <table>
                    @* {statusMessage != null ? <h4 id= *@
                    <thead>
                      <tr>
                        @* <th colSpan='2'><label><input defaultChecked={0==showYear} type='checkbox' name='check' year={0} className='yearButton' onClick={(e)=>this.changeYear(e)} />
                                <span className='year'>All Years</span></label>
                        </th> *@
                      </tr>
                    </thead>
                    <tbody>
                        @((MarkupString)showYears())
                    </tbody>
                  </table>
                </td>
                <td className='column'>
                  <table>
                    <thead>
                      <tr>
                        <th>showYear > 0 ? showYear : ""</th>
                      </tr>
                    </thead>
                    <tbody>
                        this.showMonths()
                    </tbody>
                  </table>
                </td>
                <td className='column'>
                  <table>
                    <thead>
                      <tr>
                        <th colSpan='2'>this.showDaysHeader()</th>
                      </tr>
                    </thead>
                    <tbody>
                        this.showDays()
                    </tbody>
                  </table>
                </td>
              </tr>
            </tbody>
          </table>
        </header>
      </div>
  
  }
@* 





  getDayChange(data, yearA, monthA, dayIndex, fund) {
    if (monthA == 1) {
      monthA = 12;
      yearA = yearA - 1;
    } else {
      monthA = monthA - 1;
    }

    var startPrice = this.getPrice(data, yearA, monthA, fund);
    if (startPrice == null) return null;
    var previousDayPrice = data.dailyQuotes[fund][dayIndex-1][1];
    if (previousDayPrice == "close") previousDayPrice = startPrice;
    var dayPrice = data.dailyQuotes[fund][dayIndex][1];
    var change = (dayPrice - previousDayPrice)/startPrice;
    return change;
  }

  

  showMonths () {
    if (showYear == 0) return null;
    if (monthlyQuotes[0] == null) return null;
    if (allocations == undefined) return null;

    var assetStock = allocations[0];
    var assetStockIntl = allocations[1];
    var assetBond = allocations[2];
    var showMonth = showYear == currentYear ? currentMonth : 12;
    var months = Array(showMonth);
    var labels = Array(showMonth + 1);
    var data = Array(showMonth + 1);
    var runningTotal = 10000;
    var eoyLabelAndDataAdded = false;
    for (var month = 1; month <= showMonth; month++) {
      var delta1 = this.getChange(this.state, showYear, month, showYear, month, 0);
      var delta2 = this.getChange(this.state, showYear, month, showYear, month, 1);
      var delta3 = this.getChange(this.state, showYear, month, showYear, month, 2);
      if (delta1 != null && delta2 != null && delta3 != null) {
        var composite = (assetStock * 100 * (1-assetStockIntl)) * delta1 + 
          (assetStock * 100 * (assetStockIntl)) * delta2 + 
          (assetBond * 100 * delta3);
        composite = delta1 == null || delta2 == null || delta3 == null ? null : composite;
        months[showMonth - month] = new Array(2);
        months[showMonth - month][0] = this.month_names_short[month-1];
        months[showMonth - month][1] = isNaN(composite) ? "---" : Number(composite).toFixed(1)+"%";
        if (!eoyLabelAndDataAdded) {
          labels[month-1] = "EOY";
          data[month-1] = runningTotal;
          eoyLabelAndDataAdded = true;
        }
        
        labels[month] = this.month_names_short[month-1];
        runningTotal = runningTotal * (100.0+Number(composite))/100.0;
        data[month] = runningTotal;
      }
    }

    this.chartData.labels = labels;
    this.chartData.datasets = [{
      data:data,
      label: showYear,
      borderColor: '#3e95cd',
      backgroundColor: '#7bb6dd',
      fill: false,
    }];

    return months.map( (period, index) => period[1] == "---" ? false : <tr key={index}><td>{period[0]}</td><td className='value'>{period[1]}</td></tr> );
  }

  days = Array(currentMonth);
  showDaysHeader () {
    this.calculateDays();
    if (currentYear == showYear) {
      var month = currentMonth - 1;
      if (this.days[0][0] > new Date().getDay()) {
        month = month - 1;
      }
      
      return this.month_names_short[month] + " " + currentYear;
    }
    else
      return false;
  }

  calculateDays () {  
    if (showYear != currentYear ||
      monthlyQuotes[0] == null ||
      allocations == undefined) {
        return;
    }

    this.days = Array(currentMonth);
    var assetStock = allocations[0];
    var assetStockIntl = allocations[1];
    var assetBond = allocations[2];
    var dayCount = dailyQuotes[0].length - 2;

    for (var dayIndex = dayCount; dayIndex >= 1 ; dayIndex--) {
      var delta1 = this.getDayChange(this.state, currentYear, currentMonth, dayIndex, 0);
      var delta2 = this.getDayChange(this.state, currentYear, currentMonth, dayIndex, 1);
      var delta3 = this.getDayChange(this.state, currentYear, currentMonth, dayIndex, 2);
      var composite = (assetStock * 100 * (1-assetStockIntl)) * delta1 + 
        (assetStock * 100 * (assetStockIntl)) * delta2 + 
        (assetBond * 100 * delta3);
      composite = delta1 == null || delta2 == null || delta3 == null ? null : composite;
      this.days[dayCount - dayIndex] = new Array(2);
      this.days[dayCount - dayIndex][0] = dailyQuotes[0][dayIndex][0].substr(8);
      this.days[dayCount - dayIndex][1] = composite;
    }
  }

  showDays () {
    if (showYear != currentYear ||
      monthlyQuotes[0] == null ||
      allocations == undefined) {
        return <tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>;
    }

    return this.days.map( (period, index) => <tr key={index}><td>{period[0]}</td><td className='value'>{Number(period[1]).toFixed(1)+"%"}</td></tr> );
  }
}

export default App; *@

@code {

    string showYears() {
      if (monthlyQuotes[0] == null) return "";

      var assetStock = Allocations[0];
      var assetStockIntl = Allocations[1];
      var assetBond = Allocations[2];
      var runningTotal = 10000;
      var eoyLabelAndDataAdded = false;

      var years = new int[currentYear - startYear];
      var yearsPerf = new int[currentYear - startYear];
      var labels = new string[currentYear - startYear + 2];
      var data = new double[currentYear - startYear + 2];

      for (var year = startYear; year <= currentYear; year++) {
        var endMonthLocal = year == currentYear ? currentMonth : 12;
        var startMonthLocal = year == startYear ? startMonth + 1 : 1;
        var delta1 = this.getChange(this.state, year, startMonthLocal, year, endMonthLocal, 0);
        if (double.IsNaN(delta1)) {
          endMonthLocal = endMonthLocal - 1;
          delta1 = this.getChange(this.state, year, startMonthLocal, year, endMonthLocal, 0);
        }
        var delta2 = this.getChange(this.state, year, startMonthLocal, year, endMonthLocal, 1);
        var delta3 = this.getChange(this.state, year, startMonthLocal, year, endMonthLocal, 2);
        var composite = (assetStock * 100 * (1-assetStockIntl)) * delta1 + 
          (assetStock * 100 * (assetStockIntl)) * delta2 + 
          (assetBond * 100 * delta3);
        composite = delta1 == null || delta2 == null || delta3 == null ? null : composite;
        years[currentYear - year + 1] = year;
        yearsPerf[currentYear - year + 1] = composite;

        if (!eoyLabelAndDataAdded) {
          labels[year - startYear] = (startYear - 1).ToString();
          data[year - startYear] = runningTotal;
          eoyLabelAndDataAdded = true;
        }
        
        labels[year - startYear + 1] = year.ToString();
        runningTotal = runningTotal * (100.0+Number(composite))/100.0;
        data[year - startYear + 1] = runningTotal;
      }

      if (showYear == 0) {
        this.chartData.labels = labels;
        this.chartData.datasets = [{
          data:data,
          label: startYear.toString() + " - " + currentYear.toString(),
          borderColor: '#3e95cd',
          backgroundColor: '#7bb6dd',
          fill: false,
        }];
      }

      string markupResult = "";
      int index = 0;
      foreach (var period in years) {
        markupResult += "<tr key=" +index + "><td><label><input name='check' defaultChecked="+period==showYear+" year="+period+ " type='checkbox' className='yearButton' onClick=@((e)=>this.changeYear(e)) />"
             + "<span className='year'>@period[0]</span></label></td><td className='value'>" + period[1]).toFixed(1)+"%") + "</td></tr>";
        index++;
      };
    }
    
    double? getChange(data, int yearA, int monthA, int yearB, int monthB, int fund) {
      if (monthA == 1) {
        monthA = 12;
        yearA = yearA - 1;
      } else {
        monthA = monthA - 1;
      }

      var startPrice = getPrice(data, yearA, monthA, fund);
      if (startPrice == null) return null;
      var endPrice = getPrice(data, yearB, monthB, fund);
      if (endPrice == null) return null;
      var change = (endPrice - startPrice)/startPrice;
      return change;
    }

    double? getPrice (data, int year, int month, int fund) {
      var i = (year - startYear) * 12 + (month - startMonth);
      if (i + indexes[fund] < 1) return null;
      if (i + indexes[fund] > data.monthlyQuotes[fund].length) return null;
      return data.monthlyQuotes[fund][i + indexes[fund]][1];
    }    
    [Parameter]
    public string? Year { get; set; }
    [Parameter]
    public string? AA { get; set; }
    [Parameter]
    public string? Intl { get; set; }
    [Parameter]
    public string? Funds { get; set; }

    public bool EditMode { get; set; }
    public double[] Allocations = new double[3];
    public string[] Tickers = new string[3];
    public string StatusMessage { get; set; } = "";
    public FundFamily[]? fundFamilies;
    public Array[]? monthlyQuotes;
    public Array[]? dailyQuotes;

    public int currentYear = DateTime.Now.Year;
    public int currentMonth = DateTime.Now.Month;
    public int startYear = 0;
    public int startMonth = 0;
    public int showYear = 0;
    public int showMonth = 0;
    public int[] indexes = {1,1,1};


    protected override async Task OnInitializedAsync()
    {
        fundFamilies = await FundFamily.GetFundFamilies(Http);
    } 
}
