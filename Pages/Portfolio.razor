@page "/portfolio"
@page "/portfolio/reload"
@page "/portfolio/topic/{TopicValue}"
@page "/portfolio/{stepPath}"
@inject HttpClient Http
@inject IAppData appData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
Portfolio@(stepPath==null?": review":": "+stepPath.Replace('-',' ')) - bogle.tools
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (new Uri(Navigation.Uri).PathAndQuery == "/portfolio/reload")
    {
        // reload is a workaround where the correct data seemed to be deleted, but i needed to navigate away and then back to retirement-assets
        Navigation.NavigateTo("/portfolio/retirement-assets");
    }
    @if (steps == null || familyData == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            familyData.UpdatePercentages();
            
            <h3 style="max-width:350px">
                Portfolio Review
                <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                <span style=text-align:center>Top</span>
                <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                <br/>
            </h3>

            <p>Getting all your information in one place to help others give you feedback is the idea behind Bogleheads.org's <a target=_blank href="https://www.bogleheads.org/forum/viewtopic.php?t=6212">Asking Portfolio Questions</a> ↗️. This tool will make it easy to post to bogleheads.org forum with the correct format.</p>
            <p>[ <b>News:</b> Read/subscribe to updates at <a target=_blank href=https://bogletools.substack.com>bogletools.substack.com</a> ]</p>
            <p><b>Feedback Welcome:</b> This feature is early in its development. Feedback is welcome on <a target=_blank href='https://www.bogleheads.org/forum/viewtopic.php?t=394456'>forum post</a> or via <a target=_blank href="https://linktr.ee/rrelyea">email/twitter</a>!</p>
            <div>
                <p ><b>Press edit (✏️) to complete each step:</b></p>

                <table id=_reviewTable>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            <td style=vertical-align:top>
                                <span>
                                    <a href="@href" style="background:blue" class="m-1 btn" >✏️</a>
                                </span>
                            </td>
                            @switch (step.step) {
                                case "age": 
                                    <td>
                                        @((MarkupString)bold("Age:"))
                                        @if(familyData.PersonCount > 0 && familyData.People[0].Age != null) {
                                            <span>&nbsp;@familyData.People[0].Age @getPronoun(familyData.People[0])</span>
                                        }
                                        @if(familyData.PersonCount > 1 && familyData.People[1].Age != null) {
                                            <span>&nbsp;and @familyData.People[1].Age @getPronoun(familyData.People[1])</span>
                                        }
                                        <br/><br/>
                                    </td>
                                   break;
                                case "emergency-fund":
                                   <td style=text-align:left>
                                        @((MarkupString)bold("Emergency funds:"))
                                        @if (familyData.EmergencyFund.CurrentMonths != null) {
                                            <span>&nbsp;@familyData.EmergencyFund.CurrentMonthsString months</span>
                                        } else if (familyData.EmergencyFund.ShowDollars) {
                                            <span>&nbsp;@formatMoney(familyData.EmergencyFund.CurrentBalance)</span>
                                        }
                                        <br/><br/>
                                   </td>
                                   break;
                                case "debts":
                                    <td style=text-align:left>
                                        @((MarkupString)bold("Debt:"))
                                        @if (familyData.Debts.Count == 0 && familyData.DebtsComplete) { <span>&nbsp;no debts</span> } 
                                        else if (familyData.Debts.Count >= 1) { 
                                            <br/>
                                            @foreach (var debt in familyData.Debts)
                                            {
                                                <span>&nbsp;&nbsp;@debt.Name: @formatMoney(debt.Total) @@ @(debt.Rate == null ? "unknown" : debt.Rate)%</span><br/> 
                                            }
                                        }
                                        <br/>
                                    </td>
                                    break;
                                case "tax-status":
                                    <td>
                                        <span>
                                            @((MarkupString)bold("Tax Filing Status:"))
                                            @if (familyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@familyData.TaxFilingStatus</span> }
                                            <br/><br/>
                                            @((MarkupString)bold("Tax Rate:"))
                                            @if (familyData.FederalMarginalTaxBracket != null) { <span>&nbsp;@familyData.FederalMarginalTaxBracket Federal, @familyData.StateMarginalTaxBracket% State</span> }
                                            <br/><br/>
                                            @((MarkupString)bold("State of Residence:"))
                                            @if (familyData.StateMarginalTaxBracket != null) { <span>&nbsp;@familyData.StateOfResidence</span> }
                                        </span>
                                        <br/><br/>
                                    </td>
                                    break;
                                case "asset-allocation":
                                    <td>
                                        @((MarkupString)bold("Desired Asset allocation:"))
                                        @if (familyData.Stocks != null && familyData.Bonds != null) {
                                            <span>&nbsp;@familyData.Stocks% stocks / @familyData.Bonds% bonds</span><br/>
                                        } else {
                                            <br/>
                                        }
                                        <span>&nbsp;&nbsp;Desired International allocation: </span>
                                        @if (familyData.International != null) {
                                            <span>@familyData.International%</span>
                                        }
                                        <br/><br/>
                                    </td>
                                    break;
                                case "retirement-assets":
                                    <td>
                                        @((MarkupString)bold("Portfolio Size:"))&nbsp;@(familyData.ValueStyle==0?formatMoneyThousands(familyData.Value):(familyData.ValueStyle==1?estimatePortfolio(familyData):formatMoney(familyData.Value)))<br/>
                                        <br/>
                                        @((MarkupString)boldUnderline("Current Retirement Assets:"))<br/>

                                        @foreach (var account in familyData.Accounts) {
                                            <br/>
                                            @((MarkupString)bold((account.Identifier != null ? "<span>"+account.Identifier+"&nbsp;</span>" : "") + account.AccountType + (account.Custodian != null ? " at " + account.Custodian : "") + " (" + formatPercent(account.Percentage) + ")" ))
                                            <br/>
                                            @foreach (var investment in account.Investments) {
                                                <span>&nbsp;&nbsp;&nbsp;&nbsp;@formatPercent(investment.Percentage) @investment.Name (@investment.Ticker) (@(investment.ExpenseRatio!=null?investment.ExpenseRatio:"??")%)</span><br/>
                                            }
                                        }
                                        <br/>
                                    </td>
                                    break;                                
                                case "available-funds":
                                    <td>
                                        @((MarkupString)boldUnderline("Available funds:"))<br/>
                                             @foreach (var account in familyData.Accounts) {
                                                @if (account.AvailableFunds.Count > 0) {
                                                    <br/>
                                                        @((MarkupString)bold("Funds available in " + account.FullName))<br/>
                                                    <br/>
                                                    @foreach (var investment in account.AvailableFunds) {
                                                        <span>&nbsp;&nbsp;&nbsp;&nbsp;@investment.Name (@investment.Ticker) (@investment.ExpenseRatio%)</span><br/>
                                                    }
                                                }
                                            }
                                            <br/>
                                    </td>
                                    break;
                                case "additional-background":
                                    @((MarkupString)boldUnderline("Additional Background:"))<br/>
                                    @familyData.AdditionalBackground
                                    <br/>
                                    break;
                                case "questions":
                                    <td>
                                        @((MarkupString)boldUnderline("Questions:"))<br/>
                                        @for (int i = 0; i < familyData.Questions.Count; i++) {
                                            var question = familyData.Questions[i];
                                            @(i+1 + ".") @question
                                            <br/><br/>
                                        }
                                    </td>
                                    break;
                                case "contributions":
                                    runningTotal = 0;
                                    pastTotal = false;

                                    <td>
                                        <span>
                                            @((MarkupString)boldUnderline("Contributions:"))
                                        </span><br/>
                                        @if (familyData.PlannedSavings > 0) {
                                            <span>Planned savings: @formatMoney(familyData.PlannedSavings)</span><br/><br/>
                                        }

                                        <span>Prioritized Investments:</span><br/>

                                        @if (familyData.EmergencyFund.AmountToSave > 0) {
                                            <span>@formatMoney(familyData.EmergencyFund.AmountToSave) in Emergency Fund</span><br/>
                                            @((MarkupString)checkTotal(familyData.EmergencyFund.AmountToSave))
                                        }
                                        @if (familyData.PersonCount > 0 && familyData.People[0].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyData.People[0].EmployerPlan.AmountToSaveForMatch) in @familyData.People[0].PossessiveID 401k (Match: @formatMoney(familyData.People[0].EmployerPlan.MatchAmount))</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[0].EmployerPlan.AmountToSaveForMatch))
                                        }
                                        @if (familyData.PersonCount > 1 && familyData.People[1].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyData.People[1].EmployerPlan.AmountToSaveForMatch) in @familyData.People[1].PossessiveID 401k (Match: @formatMoney(familyData.People[1].EmployerPlan.MatchAmount))</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[1].EmployerPlan.AmountToSaveForMatch))
                                        }
                                        @if (familyData.HighDebts > 0) {
                                            <span>@familyData.HighDebts in High Debts</span><br/>
                                            @((MarkupString)checkTotal(familyData.HighDebts))
                                        }
                                        @if (familyData.PersonCount > 0  && (familyData.People[0].EmployerBenefits.Complete || familyData.People[0].EmployerPlan.AnnualSalary == 0 || familyData.People[0].HealthSavingsAccount.EligibleForHSA  || familyData.People[0].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[0].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyData.People[0].HealthSavingsAccount.AmountToSave) in @familyData.People[0].PossessiveID HSA (Employer: @formatMoney(familyData.People[0].HealthSavingsAccount.EmployerContribution))</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[0].HealthSavingsAccount.AmountToSave))
                                        }
                                        @if (familyData.PersonCount > 1  && (familyData.People[1].EmployerBenefits.Complete || familyData.People[1].EmployerPlan.AnnualSalary == 0 || familyData.People[1].HealthSavingsAccount.EligibleForHSA  || familyData.People[1].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[1].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyData.People[1].HealthSavingsAccount.AmountToSave) in @familyData.People[1].PossessiveID HSA (Employer: @formatMoney(familyData.People[1].HealthSavingsAccount.EmployerContribution))</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[1].HealthSavingsAccount.AmountToSave))
                                        }
                                        @if (familyData.AdjustedGrossIncome != null) {
                                            if (familyData.PersonCount > 0) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[0]))</span><br/>
                                                @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyData.People[0])))
                                            }
                                            if(familyData.PersonCount > 1) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[1]))</span><br/>
                                                @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyData.People[1])))
                                            }
                                        }
                                        @if (familyData.PersonCount > 0 && familyData.People[0].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[0].PossessiveID 401k</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched))
                                        }
                                        @if (familyData.PersonCount > 1 && familyData.People[1].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[1].PossessiveID 401k</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched))
                                        }
                                        @if (familyData.PersonCount > 0 && familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                            <span>@formatMoney(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[0].PossessiveID mega backdoor roth</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                        }
                                        @if (familyData.PersonCount > 1 && familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                            <span>@formatMoney(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[1].PossessiveID mega backdoor roth</span><br/>
                                            @((MarkupString)checkTotal(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                        }
                                        @if (familyData.MediumDebts > 0) {
                                            <span>@formatMoney(familyData.MediumDebts) in Medium Debts</span><br/>
                                            @((MarkupString)checkTotal(familyData.MediumDebts))
                                        }
                                        @if (familyData.PlannedSavings > runningTotal) {
                                            <span>@formatMoney(familyData.PlannedSavings-runningTotal) in Taxable</span><br/>
                                            @((MarkupString)checkTotal(familyData.PlannedSavings-runningTotal))
                                        } else {
                                            <span>@formatMoney(0) in Taxable</span><br/>
                                        }
                                        @if (familyData.LowDebts > 0) {
                                            <span>@formatMoney(familyData.LowDebts) in Low Debts</span><br/>
                                            @((MarkupString)checkTotal(familyData.LowDebts))
                                        }
                                        <br/>
                                    </td>
                                    break;
                                default:
                                    <td style=text-align:center>NYI</td><td></td>
                                    break;
                            }
                        </tr>
                    }          
                </table>
                <br/>

                <InputCheckbox id=showMarkup style=margin-left:20px @bind-Value=ShowMarkup /> <label for=showMarkup>Use forum post markup: [b]bold[/b]</label><br/>
                <br/>
                <button style=margin-left:20px @onclick=CopyTextToClipboard>Copy to clipboard</button><br/>

                <hr/>
                <br/>
                <label>SAVE to your device via a </label>
                <button @onclick="DownloadPortfolio">
                "Download" of your portfolio data file
                </button>
                <br/>
                 (⚠️ WARNING - this data file has your $$ amounts of investments. Don't share! Keep secure. Use clipboard button above to use the standard portfolio format, which contains somewhat less info.)
                <br/>
                <br/>
                <label>LOAD portfolio data file:</label> <InputFile accept=".json" OnChange="@((e) => OnLoadPortfolio(e))" />
                @* <label>LOAD portfolio data file for Forum Topic#</label><input type=text @bind=@TopicValue /> <button @onclick="OnLoadPortfolioForTopic">Load</button> *@
                <br/>

                <br/>


                @code {

                        private async Task OnLoadPortfolioForTopic() {
                            await LoadPortfolioForTopic(TopicValue);
                        }

                        private async Task LoadPortfolioForTopic(string topicStr) {
                            Console.WriteLine("loading topic: " + topicStr);
                            var options = new JsonSerializerOptions() 
                                {
                                    Converters =
                                        {
                                            new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                                        }
                                };
                            var topicJsonUri = "https://raw.githubusercontent.com/bogle-tools/financial-variables/main/data/portfolios/" + topicStr + ".json";
                            var stream = await Http.GetStreamAsync(topicJsonUri);
                            await loadPortfolioFromStream(stream, options);
                            Console.WriteLine("loaded " + familyData.People[0].Age);
                        }

                        private async Task OnLoadPortfolio(InputFileChangeEventArgs e)
                        {
                            var files = e.GetMultipleFiles();

                            if (files != null)
                            {
                                var options = new JsonSerializerOptions() 
                                    {
                                        Converters =
                                            {
                                                new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                                            }
                                    };

                                foreach (var file in files)
                                {
                                    using (var stream = file.OpenReadStream()) {
                                        await loadPortfolioFromStream(stream, options);
                                    }
                                }
                            }
                        }

                        private async Task loadPortfolioFromStream(Stream stream, JsonSerializerOptions options) {
                            if (familyData != null) {
                                var irsData = familyData.IRSData;
                                familyData = await JsonSerializer.DeserializeAsync<FamilyData>(stream, options);
                                if (familyData != null) {
                                    familyData.IRSData = irsData;
                                    familyData.Year = 2023;
                                    familyData.SetBackPointers();
                                }
                                else 
                                {
                                    // error loading
                                }
                            }
                        }

                        private async Task DownloadPortfolio() {
                            var options = new JsonSerializerOptions() 
                            {
                                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                                IgnoreReadOnlyProperties = true,
                                WriteIndented = true,
                                Converters =
                                    {
                                        new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                                    }
                            };
                            await DownloadFileFromStream(familyData, options, "portfolio.json");
                        }
                        private async Task DownloadFileFromStream(object data, JsonSerializerOptions options, string fileName)
                        {
                            var jsonOut = System.Text.Json.JsonSerializer.Serialize(data, options);

                            using (MemoryStream ms = new MemoryStream(System.Text.Encoding.ASCII.GetBytes(jsonOut)))
                            {
                                using var streamRef = new DotNetStreamReference(stream: ms);
                                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                            }
                        }

                        private async Task CopyTextToClipboard()
                        {
                            var text = await JS.InvokeAsync<string>("getTableInnerText");
                            text = text.Replace("\n✏️\t","");
                            text = text.Replace("✏️\t","");
                            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
                        }
                    }
            </div>
            
            <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
            <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
        }
        else if (stepPath == "tax-filing-info") {

        }
        else
        {
            @foreach (var step in steps) {
                @if (step.step == stepPath) {
                    var firstStepIndex = 0;
                    var lastStepIndex = steps.Length-1;
                    var prevStep = step.number - 2 >= firstStepIndex ? steps[step.number - 2] : null;
                    var nextStep = step.number <= lastStepIndex ? steps[step.number] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <h3 style="max-width:350px">
                        <NavLink href=/portfolio>Portfolio Review</NavLink>
                        <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                        <span style=text-align:center>@step.number</span>
                        <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                        <br/>
                    </h3>
                    <h2>
                        @step.title
                    </h2>
                    <hr/>

                    <h4>@((MarkupString)markupize(step.priority))</h4>

                    <p class="article">@((MarkupString)markupize(step.summary))</p>

                        @switch (step.step) {
                            case "emergency-fund":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Current Emergency Fund:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>➗ Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <hr style=width:300px />
                                    <div style=text-align:right;width:275px>@familyData.EmergencyFund.CurrentMonthsString months</div>
                                    @if(familyData.EmergencyFund.CurrentMonths == null && familyData.EmergencyFund.CurrentBalance != null) {
                                        <br/><br/>
                                        <InputCheckbox id=ShowDollars @bind-Value=familyData.EmergencyFund.ShowDollars /> <label for=ShowDollars>Only publish amount, since I haven't yet estimated monthly expenses</label><br/>
                                        <span>(Months is MORE useful than a dollar amount.)</span>
                                    }
                                </EditForm><br/>
                                break;
                            case "debts":
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br/><br/>

                                    @if (familyData.DebtFree == TriState.ChoiceNeeded || familyData.DebtFree == TriState.True) {
                                        <label style="display:inline" for=debtFree>Debt free:</label> <InputSelect @bind-Value=familyData.DebtFree id=debtFree>
                                        @foreach (var option in Enum.GetValues<TriState>()) {
                                            <option value="@option">@option</option>
                                        }
                                        </InputSelect><br/>
                                        <br/>
                                    }

                                    <EditForm Model="familyData">

                                        <table>
                                            <thead>
                                            <th style="width:150px"><label>name</label></th>
                                            <th style="width:150px"><label>total $</label></th>
                                            <th style="width:100px"><label>interest %</label></th>
                                            <th>rate</th>
                                            <th><label></label></th>
                                            </thead>
                                            @for (var i=0;i<familyData.Debts.Count;i++) {
                                                var debt = familyData.Debts[i];
                                                int debtBuffer = i;
                                                <tr>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput placeholder='description'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput placeholder='amount owed'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput placeholder='rate'/></td>
                                                <td><span>@debt.Category</span></td>
                                                <td><button @onclick=@(e=>RemoveDebt(e, debtBuffer))>❌ Debt</button></td>
                                                </tr>
                                            }
                                        </table>
                                        <br/>
                                        <button @onclick=addDebt>➕ Debt</button>

                                        <br/><br/>
                                        <label>Amounts to Pay-Off (@step.title):</label><br/><br/>
                                        High Interest: @formatMoney(familyData.HighDebts)<br/>
                                        Medium Interest: @formatMoney(familyData.MediumDebts)<br/>
                                        Low Interest: @formatMoney(familyData.LowDebts)<br/>
                                        Unknown Interest: @formatMoney(familyData.UnknownDebts)<br/>
                                        <br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void RemoveDebt(MouseEventArgs e, int debtIndex) {
                                        familyData.Debts.RemoveAt(debtIndex);
                                    }
                                    void addDebt()
                                    {
                                        familyData?.Debts.Add(new Debt());
                                    }
                                }
                                break;
                            case "tax-status":
                                <p ><b>Worksheet:</b></p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Tax Filing Status:</label>
                                    <select @bind=familyData.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                    </select><br/>
                                    <br/>
    
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2022</option><option>2023</option></select><br/>

                                    @foreach (var taxFiler in familyData.IRSData.TaxRateData.TaxData.TaxFilers)
                                    {
                                        bool isMatch = false;
                                        switch (familyData.TaxFilingStatus.ToString())
                                        {
                                            case "MarriedFilingSeperatelyAndLivingApart":
                                                isMatch = taxFiler.TaxFilingStatus == "MarriedFilingSeperately";
                                                break;
                                            default:
                                                isMatch = taxFiler.TaxFilingStatus == familyData.TaxFilingStatus.ToString();
                                                break;
                                        }
                                        if (isMatch)
                                        {
                                            string? lastBracket = null;
                                            int? lastStartAmount = null;

                                            <br/>
                                            <InputRadioGroup @bind-Value=familyData.FederalMarginalTaxBracket>
                                                <label>Tax Bracket (@familyData.TaxFilingStatus):</label><br/>
                                                <table style="margin-left:20px">
                                                    <tr><th></th><th></th></tr>
                                                @foreach (var taxBracket in taxFiler.TaxBrackets)
                                                {
                                                    if (lastBracket != null) {
                                                        var elName = "bracket"+lastBracket.Substring(0,lastBracket.Length-2);
                                                        <tr><td><InputRadio id=@elName Value='@lastBracket'/>&nbsp;<label for=@elName>@lastBracket</label></td><td style=padding-left:30px>@(lastStartAmount==1?"Up":formatMoney(lastStartAmount)) to @formatMoney(taxBracket.StartAmount)</td></tr>
                                                    }
                                                    lastBracket = taxBracket.Rate;
                                                    lastStartAmount = taxBracket.StartAmount + 1;
                                                }
                                                    <tr><td><InputRadio Value='@lastBracket'/>&nbsp;@lastBracket</td><td style=padding-left:30px>Over @formatMoney(lastStartAmount-1)</td></tr>
                                                </table>
                                            </InputRadioGroup>
                                        }
                                    }

                                    <br/><label>State of Residence:</label>
                                    <select @bind=familyData.StateOfResidence>
                                        <option value="ChoiceNeeded">ChoiceNeeded...</option><option value="AL">Alabama (AL)</option><option value="AK">Alaska (AK)</option><option value="AS">American Samoa (AS)</option><option value="AZ">Arizona (AZ)</option><option value="AR">Arkansas (AR)</option><option value="CA">California (CA)</option><option value="CO">Colorado (CO)</option><option value="CT">Connecticut (CT)</option><option value="DE">Delaware (DE)</option><option value="DC">District of Columbia (DC)</option><option value="FL">Florida (FL)</option><option value="GA">Georgia (GA)</option><option value="GU">Guam (GU)</option><option value="HI">Hawaii (HI)</option><option value="ID">Idaho (ID)</option><option value="IL">Illinois (IL)</option><option value="IN">Indiana (IN)</option><option value="IA">Iowa (IA)</option><option value="KS">Kansas (KS)</option><option value="KY">Kentucky (KY)</option><option value="LA">Louisiana (LA)</option><option value="ME">Maine (ME)</option><option value="MD">Maryland (MD)</option><option value="MA">Massachusetts (MA)</option><option value="MI">Michigan (MI)</option><option value="MN">Minnesota (MN)</option><option value="MS">Mississippi (MS)</option><option value="MO">Missouri (MO)</option><option value="MT">Montana (MT)</option><option value="NE">Nebraska (NE)</option><option value="NV">Nevada (NV)</option><option value="NH">New Hampshire (NH)</option><option value="NJ">New Jersey (NJ)</option><option value="NM">New Mexico (NM)</option><option value="NY">New York (NY)</option><option value="NC">North Carolina (NC)</option><option value="ND">North Dakota (ND)</option><option value="CM">Northern Mariana Islands (CM)</option><option value="OH">Ohio (OH)</option><option value="OK">Oklahoma (OK)</option><option value="OR">Oregon (OR)</option><option value="PA">Pennsylvania (PA)</option><option value="PR">Puerto Rico (PR)</option><option value="RI">Rhode Island (RI)</option><option value="SC">South Carolina (SC)</option><option value="SD">South Dakota (SD)</option><option value="TN">Tennessee (TN)</option><option value="TX">Texas (TX)</option><option value="VI">U.S. Virgin Islands (VI)</option><option value="UT">Utah (UT)</option><option value="VT">Vermont (VT)</option><option value="VA">Virginia (VA)</option><option value="WA">Washington (WA)</option><option value="WV">West Virginia (WV)</option><option value="WI">Wisconsin (WI)</option><option value="WY">Wyoming (WY)</option>
                                    </select>
                                    <br/><br/>

                                    <label>State Marginal Tax Rate:</label> <input style=width:50px;text-align:right class=dollar type=text @bind-Value="familyData.StateMarginalTaxBracket" @bind-Value:event="oninput"/>%<br/><br/>
                                    <br/><br/>
                                </EditForm>
                                <br/>
                                break;
                            case "age":
                                <p ><b>Prerequisities:</b></p>
                                <label>Tax Filing Status:</label>
                                <select @bind=familyData.TaxFilingStatus>
                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                    <option>Single</option>
                                    <option value=MarriedFilingJointly>Married filing jointly</option>
                                    <option value=MarriedFilingSeperately>Married filing seperately</option>
                                    <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                    <option value=HeadOfHousehold>Head of Household</option>
                                </select><br/><br/>
                                
                                <p><b>Worksheet:</b> </p>
                                @for (int i = 0; i < familyData.PersonCount; i++) {
                                    var person = familyData.People[i];
                                    int personIndex = i + 1;
                                    <p><b>Person @personIndex:</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Age:</label> <input style=width:60px type=number min=0 max=125 @bind-Value=person.Age @bind-Value:event=oninput /><br/>

                                        @if(person?.FamilyData?.PersonCount>1){<label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                                            <option>person @personIndex</option>
                                            <option>him</option>
                                            <option>her</option>
                                            <option>me</option>
                                            <option>them</option>
                                        </select><br/>}
                                        
                                        <br/>
                                    </EditForm><br/>
                                }
                                break;
                            case "asset-allocation":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Desired Asset Allocation:</label><br/>
                                    <label>Stock:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.Stocks @bind-Value:event=oninput />%<br/>
                                    <label>Bond:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.Bonds @bind-Value:event=oninput />%<br/>
                                    <hr/>
                                    <label>Desired International allocation (% of Stock):</label><br/>
                                    <label>International:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.International @bind-Value:event=oninput />%<br/>
                                </EditForm><br/>
                                break;
                            case "available-funds":
                                <td>
                                    <label>Account</label>
                                    <select @bind=currentAccountIndex>
                                        <option>Choose Account...</option>
                                        @for (int i=0;i<familyData.Accounts.Count;i++) {
                                            var account = familyData.Accounts[i];
                                            <option value=@i>
                                                @account.FullName
                                            </option>
                                        }
                                    </select>
                                    <br/>

                                     @if(currentAccountIndex != null && currentAccountIndex != "Choose Account...") {
                                        int index = int.Parse(currentAccountIndex);
                                        var currentAccount = familyData.Accounts[index];
                                        for (int i=0;i < currentAccount.AvailableFunds.Count; i++) {
                                            var investment = currentAccount.AvailableFunds[i];
                                            int invBuffer = i;
                                            <div style=margin-top:10px;margin-left:80px;padding-left:3em;text-indent:-3em;>
                                                <button @onclick='@(e=>deleteAvailableFund(e,currentAccount,invBuffer))'>❌</button>
                                                <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                            </div>
                                            <div style=margin-left:85px>
                                                <input type=text @bind-Value=investment.Name @bind-Value:event=oninput placeholder='investment fullname' />
                                                &nbsp;(
                                                    <input style="width:70px" type=text @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='expense ratio'/>
                                                %)
                                            </div>
                                        }
                                        <br/>
                                        <button style=margin-left:80px @onclick='@(e=>addAvailableFund(e,currentAccount))'>➕</button>
                                    }
                                </td>
                                break;
                            case "additional-background":
                                <td>
                                    <textarea style=width:600px;height:300px @bind-Value=familyData.AdditionalBackground @bind-Value:event=oninput placeholder='additional background information'>
                                        @familyData.AdditionalBackground
                                    </textarea>
                                </td>
                                break;
                            case "questions":
                                <td>
                                    @for (int i = 0; i < familyData.Questions.Count; i++) {
                                        int iBuffer = i;
                                        <label >@(i+1 + ". ")</label> 
                                        <textarea style=width:500px;vertical-align:top @bind-Value=familyData.Questions[iBuffer] @bind-Value:event="oninput" placeholder="ask question">
                                            @familyData.Questions[iBuffer]
                                        </textarea>
                                        <br/>
                                        <br/>
                                    }
                                    <br/>
                                        <button style=margin-left:80px @onclick=addQuestion>➕ Question</button>
                                    <br/>
                                    @code {
                                        void addQuestion() {
                                            familyData.Questions.Add("");
                                        }
                                    }
                                </td>
                                break;                                
                            case "retirement-assets":
                                <p><b>Prerequisites:</b> </p>

                                <label style=margin-left:25px>Tax Filing Status:</label>
                                <select @bind=familyData.TaxFilingStatus>
                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                    <option>Single</option>
                                    <option value=MarriedFilingJointly>Married filing jointly</option>
                                    <option value=MarriedFilingSeperately>Married filing seperately</option>
                                    <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                    <option value=HeadOfHousehold>Head of Household</option>
                                </select><br/>
                                <br/>

                                <u><b>Current Retirement Assets:</b></u><br/>

                                @code{
                                    void editAccount(MouseEventArgs e, int index)
                                    {
                                        familyData.Accounts[index].Edit = true;
                                    }
                                }

                                accountIndex = 0;
                                @foreach (var account in familyData.Accounts) {
                                    int accBuffer = accountIndex;
                                    accountIndex++;
                                    var accountId = "account"+accBuffer;
                                    <br/>
                                    <div style=padding-left:3em;text-indent:-3em;>
                                        <button @onclick='@(e=>deleteAccount(e,accBuffer))'>❌</button>
                                        @if (familyData.PersonCount == 2) {
                                        <select @ref=accountN @bind=account.Identifier>
                                            <option>our</option>
                                            @for(int p=0;p<familyData.PersonCount;p++)
                                            {
                                                <option>@familyData.People[p].PossessiveID</option>
                                            }
                                        </select>
                                        }
                                        <select @ref=accountN @bind=account.AccountType>
                                            <option>Account Type...</option>
                                            <option>401k</option>
                                            <option>403b</option>
                                            <option>457b</option>
                                            <option>HSA</option>
                                            <option>Inherited IRA</option>
                                            <option>Inherited Roth IRA</option>
                                            <option value="Traditional IRA">IRA</option>
                                            <option>Rollover IRA</option>
                                            <option>Roth IRA</option>
                                            <option>SIMPLE IRA</option>
                                            <option>Traditional IRA</option>
                                            <option>Taxable</option>
                                        </select>
                                        <span> at <input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' /></span><br/>
                                        <span><label for=@accountId>Note: </label><input id=@accountId type=text @bind-value=account.Note @bind-value:event=oninput placeholder='account note'/></span>
                                    </div>
                                    
                                    investmentIndex = 0;
                                    @foreach (var investment in account.Investments) {
                                        int invBuffer = investmentIndex;
                                        investmentIndex++;
                                        <div style=margin-top:10px;margin-left:20px;padding-left:3em;text-indent:-3em;>
                                            <button @onclick='@(e=>deleteInvestment(e,accBuffer,invBuffer))'>❌</button>
                                            <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                            Balance 🟰 $<input style=width:100px type=text @bind-Value=investment.Value @bind-Value:event=oninput placeholder='value'/>
                                        </div>
                                        <div style=margin-left:85px>
                                            <input type=text @bind-Value=investment.Name @bind-Value:event=oninput placeholder='investment fullname' />
                                            &nbsp;(
                                                <input style="width:70px" type=text @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='expense ratio'/>
                                            %)
                                        </div>
                                    }
                                    <button style=margin-left:20px @onclick='@(e=>addInvestment(e,accBuffer))'>➕</button>
                                    <hr style=margin-left:40px/>
                                    <div style=margin-left:40px>Account Total: @formatMoney(account.Value)</div>
                                }
                                <br/>
                                <div><button @onclick=addAccount>➕ Account</button></div>
                                <hr/>
                                <div>Portfolio Size: @formatMoney(familyData.Value)</div>
                                <br/>
                                <div>
                                    Above, is the manual data entry technique. Below is an ADVANCED FEATURE (faster way) to import some data, but be careful, and make sure you trust any site you do that kind of thing with!!!
                                </div>
                                <br/>
                                <hr/>
                                    <div>⚠️ Advanced Feature: Import Vanguard/Fidelity CSV file</div>
                                    <ol>
                                        <li>Download .csv file from Vanguard or Fidelity to your downloads folder (or other location).</li>
                                        <li>Press "Choose files" button and select one or more files in your downloads folder: 
                                            <InputFile multiple=true accept=".csv" OnChange="@((e) => OnChangeCSV(e))" />
                                        </li>
                                        <li>Portfolio Review tool will attempt to load your account balances from the .csv file(s), including tickers and $$ of each stock/fund.</li>
                                        <li>Once you do the import, you likely want to delete the file from your downloads folder (that you downloaded it to in step 1).</li>
                                    </ol>
                                    <span>
                                    ⚠️ WARNING: uploading csv files from vanguard/fidelity is exposing information to this site.<br/>
                                    Only do this to a site you trust to not harvest this data. Bogle.tools runs on your machine only, even though it is a web site, and will not send data off of your device without your explicit permission.
                                    </span>
                                <br/>

                                @code{
                                    private ElementReference tickerN;
                                    private ElementReference accountN;
                                    private async void OnChangeCSV(InputFileChangeEventArgs e)
                                    {
                                        var files = e.GetMultipleFiles();
                                        if (files != null)
                                        {
                                            foreach (var file in files)
                                            {
                                                string? lastAccountNumber = null;

                                                var buffer = new byte[file.Size];
                                                await file.OpenReadStream().ReadAsync(buffer);
                                                var content = System.Text.Encoding.UTF8.GetString(buffer);
                                                var lines = System.Text.RegularExpressions.Regex.Split(content, "\r\n|\r|\n");
                                                //Fidelity: Account Number,Account Name,Symbol,Description,Quantity,Last Price,Last Price Change,Current Value
                                                //Vanguard: Account Number,Investment Name,Symbol,Shares,Share Price,Total Value,
                                                
                                                // Process the header
                                                var headerChunks = lines[0].Split(',');

                                                int accountNumberIndex = 0; // shouldn't hardcode, but for some strange reason it wasn't matching for Fidelity CSV files!?!
                                                int accountNameIndex = -1;
                                                int symbolIndex = -1;
                                                int investmentNameIndex = -1;
                                                int investmentValueIndex = -1;
                                                

                                                int chunkIndex = 0;
                                                foreach (var headerChunk in headerChunks) {
                                                    switch (headerChunk) {
                                                        case "Account Name":
                                                            accountNameIndex = chunkIndex;
                                                            break;
                                                        case "Symbol":
                                                            symbolIndex = chunkIndex;
                                                            break;
                                                        case "Investment Name":
                                                        case "Description":
                                                            investmentNameIndex = chunkIndex;
                                                            break;
                                                        case "Current Value":
                                                        case "Total Value":
                                                            investmentValueIndex = chunkIndex;
                                                            break;
                                                        case "Account Number":
                                                            accountNumberIndex = chunkIndex;
                                                            break;
                                                        default:
                                                            break;
                                                    }

                                                    chunkIndex++;
                                                }

                                                Account? currentAccount = null;
                                                for (int lineNum = 1;lineNum < lines.Length; lineNum++) {
                                                    var line = lines[lineNum];
                                                    string? accountNumber = null;
                                                    string? accountName = null;
                                                    string? symbol = null;
                                                    string? investmentName = null;
                                                    string? investmentValue = null;
                                                    if (line.Length > 0)
                                                    {
                                                        if (char.IsDigit(line[0]) || char.IsDigit(line[1]))
                                                        {
                                                            // Process this data
                                                            var chunks = line.Split(',');
                                                            
                                                            for (int i=0; i < chunks.Length; i++) {
                                                                if (accountNumberIndex == i) {
                                                                    accountNumber = chunks[i];
                                                                } else if (accountNameIndex == i) {
                                                                    accountName = chunks[i];
                                                                } else if (symbolIndex == i) {
                                                                    symbol = chunks[i];
                                                                } else if (investmentNameIndex == i) {
                                                                    investmentName = chunks[i];
                                                                } else if (investmentValueIndex == i) {
                                                                    investmentValue = chunks[i];
                                                                }
                                                            }

                                                            if (lastAccountNumber != accountNumber) {
                                                                currentAccount = new () { 
                                                                    Note = accountName != null ? "⚠️" + accountName: "⚠️*"+ accountNumber.Substring(accountNumber.Length-4,4),
                                                                    Custodian = (accountNameIndex != -1 ? "Fidelity" : "Vanguard")
                                                                 };
                                                                familyData.Accounts.Add(currentAccount);
                                                                lastAccountNumber = accountNumber;
                                                            }
                                                            
                                                            if (investmentValue[0] == '$')
                                                            {
                                                                investmentValue = investmentValue.Substring(1);
                                                            }
                                                            double doubleValue = 0.0;
                                                            double.TryParse(investmentValue, out doubleValue);


                                                            if (symbol != null || investmentName != null) {
                                                                Investment newInvestment = new () { funds = Funds, Ticker = symbol, Name = investmentName, Value = doubleValue };
                                                                currentAccount.Investments.Add(newInvestment);
                                                            }
                                                        }

                                                        if (line.Length > 1 && char.IsLetter(line[1])) // some account numbers start with a letter
                                                        {
                                                            // stop processing file at first line that starts with a letter.
                                                            break;
                                                        }
                                                    }
                                                }
                                            }

                                            Navigation.NavigateTo("/portfolio/reload");
                                        }
                                    }

                                    private async void addInvestment(MouseEventArgs e, int accountIndex)
                                    {
                                        var newInvestment = new Investment() { funds = Funds };
                                        familyData.Accounts[accountIndex].Investments.Add(newInvestment);
                                        focusTicker = true;
                                    }

                                    void deleteInvestment(MouseEventArgs e, int accountIndex, int investmentIndex)
                                    {
                                        familyData.Accounts[accountIndex].Investments.RemoveAt(investmentIndex);
                                        Navigation.NavigateTo("/portfolio/reload");
                                        familyData.UpdatePercentages();
                                    }
                                    void addAvailableFund(MouseEventArgs e, Account account)
                                    {
                                        var newFund = new Investment() { funds = Funds };
                                        account.AvailableFunds.Add(newFund);
                                        focusTicker = true;
                                    }
                                    void deleteAvailableFund(MouseEventArgs e, Account account, int investmentIndex)
                                    {
                                        account.AvailableFunds.RemoveAt(investmentIndex);
                                    }
                                    void addAccount()
                                    {
                                        var newAccount = new Account();
                                        var newInvestment = new Investment() { funds = Funds };
                                        newAccount.Investments.Add(newInvestment);
                                        familyData?.Accounts.Add(newAccount);
                                        focusAccount = true;
                                    }
                                    void deleteAccount(MouseEventArgs e, int accountIndex)
                                    {
                                        familyData.Accounts.RemoveAt(accountIndex);
                                        Navigation.NavigateTo("/portfolio/reload");
                                        familyData.UpdatePercentages();
                                    }
                                }

                                @if(familyData.Value > 0) {
                                <br/>
                                <div>Preferred technique to represent the approximate size of your total portfolio (in <NavLink href="/portfolio">portfolio review</NavLink>):</div>
                                <InputRadioGroup @bind-Value=familyData.ValueStyle>
                                    <InputRadio id=rounded Value='0' /> <label for=rounded>@formatMoneyThousands(familyData.Value)</label> <br/>
                                    <InputRadio id=estimate Value='1' /> <label for=estimate>@estimatePortfolio(familyData)</label> <br/>
                                    <InputRadio id=dollar Value='2' /> <label for=dollar>@formatMoney(familyData.Value)</label> <br/>
                                </InputRadioGroup>
                                }
                                break;
                            case "contributions":
                                Navigation.NavigateTo("/portfolio-contributions");        
                                break;
                        }
                    <p>
                        @if(step.description != "") {
                            <b>Details:</b> <span>@((MarkupString)markupize(step.description))</span>
                        }
                    </p>

                    <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                    <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        runningTotal += itemTotal ?? 0;
        if (!pastTotal) {
            pastTotal = familyData.PlannedSavings <= runningTotal;

            if (pastTotal) {
                return "<div>-------<br/><div>Planned savings " + (familyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + formatMoney(itemTotal+(familyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
            }
        }

        return null;
    }

    public int? GetRecommdedIRAAmount(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
            case IRAType.DeductibleIRA:
                return person.IRA.AmountToSave;
            case IRAType.Roth:
                return person.RothIRA.AmountToSave;
            case IRAType.NondeductibleIRAThenBackdoorRoth:
            case IRAType.NondeductibleIRA:
                return person.IRA.AmountToSave;
            default:
                return null;
        }
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + formatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + formatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string getPronoun(Person person)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            return "(" + person.Identifier + ")";
        }
        else
        {
            return "";
        }
    }

    public string formatMoney(int? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }
    public string formatMoney(double? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }
    public string formatMoneyThousands(double? amount) 
    {
        if (amount == null) return "";

        if (amount >= 1000000) {
            return String.Format("${0:#,0.##M}", Math.Round((double)amount / 10000.0)/100.0);
        } else if (amount >= 1000) {
            return String.Format("${0:#,0.##K}", Math.Round((double)amount / 1000.0));
        } else {
            return String.Format("${0:#,0.##}", amount);
        }
    }
    public string formatPercent(double? amount)
    {
        return String.Format("{0:#,0.#}%", amount);
    }

    public string estimatePortfolio(IFamilyData familyData) 
    {
        if (familyData.Value >= 10000000) {
            return "8-figures";
        } else if (familyData.Value >= 6666666) {
            return "high 7-figures";
        } else if (familyData.Value >= 3333333) {
            return "mid 7-figures";
        } else if (familyData.Value >= 1000000) {
            return "low 7-figures";
        } else if (familyData.Value >= 666666) {
            return "high 6-figures";
        } else if (familyData.Value >= 333333) {
            return "mid 6-figures";
        } else if (familyData.Value >= 100000) {
            return "low 6-figures";
        } else if (familyData.Value >= 66666) {
            return "high 5-figures";
        } else if (familyData.Value >= 33333) {
            return "mid 5-figures";
        } else if (familyData.Value >= 10000) {
            return "low 5-figures";
        } else if (familyData.Value >= 1000) {
            return "4-figures";
        } else if (familyData.Value == 0) {
            return "-";
        } else {
            return "less than $1,000";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }


    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (focusTicker)
            {
                await tickerN.FocusAsync();
                focusTicker = false;
            } else if (focusAccount) {
                await accountN.FocusAsync();
                focusAccount = false;
            }
    }

    [Parameter]
    public string? stepPath { get; set; }

    [Parameter]
    public string? TopicValue { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string folderName = "/portfolio/";
    private bool focusTicker = false;
    private bool focusAccount = false;

    private IFamilyData familyData {
        get {
            return appData.FamilyData;
        }
        set {
            appData.FamilyData = value;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/portfolio-steps.json");

        Console.WriteLine("TopicValue: " + TopicValue);
        if (!string.IsNullOrEmpty(TopicValue)) {
            await LoadPortfolioForTopic(TopicValue);
        }
    }
}
