@page "/portfolio"
@page "/portfolio/{stepPath}"
@page "/portfolio/reload"
@inject HttpClient Http
@inject IFamilyYears familyYears
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
Portfolio@(stepPath==null?": review":": "+stepPath.Replace('-',' '))
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (new Uri(Navigation.Uri).PathAndQuery == "/portfolio/reload")
    {
        // reload is a workaround where the correct data seemed to be deleted, but i needed to navigate away and then back to retirement-assets
        Navigation.NavigateTo("/portfolio/retirement-assets");
    }

    @if (steps == null || familyYears == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            familyYears.UpdatePercentages();
            
            <h3 style="max-width:350px">
                Portfolio Review
                <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                <span style=text-align:center>Top</span>
                <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                <br/>
            </h3>

            <p>Getting all your information in one place to help others give you feedback is the idea behind Bogleheads.org's <a target=_blank href="https://www.bogleheads.org/forum/viewtopic.php?t=6212">Asking Portfolio Questions</a> ↗️. This tool will make it easy to post to bogleheads.org forum with the correct format.</p>
            <p><b>Feedback Welcome:</b> This feature is early in its development. Feedback is welcome on <a href='https://www.bogleheads.org/forum/viewtopic.php?t=394456'>forum post</a> or via <a href="https://linktr.ee/rrelyea">email/twitter</a>!</p>
            <div>
                <p ><b>Press edit (✏️) to complete each step:</b></p>

                <table id=_reviewTable>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            <td style=vertical-align:top>
                                <span>
                                    <a href="@href" style="background:blue" class="m-1 btn" >✏️</a>
                                </span>
                            </td>
                            @switch (step.step) {
                                case "age": 
                                    <td>
                                        @((MarkupString)bold("Age:"))
                                        @if(familyYears.PersonCount > 0 && familyYears.People[0].Age != null) {
                                            <span>&nbsp;@familyYears.People[0].Age @getPronoun(familyYears.People[0])</span>
                                        }
                                        @if(familyYears.PersonCount > 1 && familyYears.People[1].Age != null) {
                                            <span>&nbsp;and @familyYears.People[1].Age @getPronoun(familyYears.People[1])</span>
                                        }
                                        <br/><br/>
                                    </td>
                                   break;
                                case "emergency-fund":
                                   <td style=text-align:left>
                                        @((MarkupString)bold("Emergency funds:"))
                                        @if (familyYears.EmergencyFund.CurrentMonths != null) {
                                            <span>&nbsp;@familyYears.EmergencyFund.CurrentMonthsString months</span>
                                        } else if (familyYears.EmergencyFund.ShowDollars) {
                                            <span>&nbsp;@formatMoney(familyYears.EmergencyFund.CurrentBalance)</span>
                                        }
                                        <br/><br/>
                                   </td>
                                   break;
                                case "debts":
                                    <td style=text-align:left>
                                        @((MarkupString)bold("Debt:"))
                                        @if (familyYears.Debts.Count == 0) { <span>&nbsp;no debts</span> } 
                                        else if (familyYears.Debts.Count >= 1) { 
                                            <br/>
                                            @foreach (var debt in familyYears.Debts)
                                            {
                                                <span>&nbsp;&nbsp;@debt.Name: @formatMoney(debt.Total) @@ @(debt.Rate == null ? "unknown" : debt.Rate)%</span><br/> 
                                            }
                                        }
                                        <br/>
                                    </td>
                                    break;
                                case "tax-status":
                                    <td>
                                        <span>
                                            @((MarkupString)bold("Tax Filing Status:"))
                                            @if (familyYears.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@familyYears.TaxFilingStatus</span> }
                                            <br/><br/>
                                            @((MarkupString)bold("Tax Rate:"))
                                            @if (familyYears.FederalMarginalTaxBracket != null) { <span>&nbsp;@familyYears.FederalMarginalTaxBracket Federal, @familyYears.StateMarginalTaxBracket% State</span> }
                                            <br/><br/>
                                            @((MarkupString)bold("State of Residence:"))
                                            @if (familyYears.StateMarginalTaxBracket != null) { <span>&nbsp;@familyYears.StateOfResidence</span> }
                                        </span>
                                        <br/><br/>
                                    </td>
                                    break;
                                case "asset-allocation":
                                    <td>
                                        @((MarkupString)bold("Desired Asset allocation:"))
                                        @if (familyYears.Stocks != null && familyYears.Bonds != null) {
                                            <span>&nbsp;@familyYears.Stocks% stocks / @familyYears.Bonds% bonds</span><br/>
                                        } else {
                                            <br/>
                                        }
                                        <span>&nbsp;&nbsp;Desired International allocation: </span>
                                        @if (familyYears.International != null) {
                                            <span>@familyYears.International%</span>
                                        }
                                        <br/><br/>
                                    </td>
                                    break;
                                case "retirement-assets":
                                    <td>
                                        @((MarkupString)bold("Portfolio Size:"))&nbsp;@(familyYears.ValueStyle==0?formatMoneyThousands(familyYears.Value):(familyYears.ValueStyle==1?estimatePortfolio(familyYears):formatMoney(familyYears.Value)))<br/>
                                        <br/>
                                        @((MarkupString)boldUnderline("Current Retirement Assets:"))<br/>

                                        @foreach (var account in familyYears.Accounts) {
                                            <br/>
                                            @((MarkupString)bold((account.Identifier != null ? "<span>"+account.Identifier+"&nbsp;</span>" : "") + account.AccountType + (account.Custodian != null ? " at " + account.Custodian : "") + " (" + formatPercent(account.Percentage) + ")" ))
                                            <br/>
                                            @foreach (var investment in account.Investments) {
                                                <span>&nbsp;&nbsp;&nbsp;&nbsp;@formatPercent(investment.Percentage) @investment.Name (@investment.Ticker) (@investment.ExpenseRatio%)</span><br/>
                                            }
                                        }
                                        <br/>
                                    </td>
                                    break;                                
                                case "available-funds":
                                    <td>
                                        @((MarkupString)boldUnderline("Available funds:"))<br/>
                                             @foreach (var account in familyYears.Accounts) {
                                                @if (account.AvailableFunds.Count > 0) {
                                                    <br/>
                                                        @((MarkupString)bold("Funds available in " + account.FullName))<br/>
                                                    <br/>
                                                    @foreach (var investment in account.AvailableFunds) {
                                                        <span>&nbsp;&nbsp;&nbsp;&nbsp;@investment.Name (@investment.Ticker) (@investment.ExpenseRatio%)</span><br/>
                                                    }
                                                }
                                            }
                                            <br/>
                                    </td>
                                    break;
                                case "additional-background":
                                    @((MarkupString)boldUnderline("Additional Background:"))<br/>
                                    @familyYears.AdditionalBackground
                                    <br/>
                                    break;
                                case "questions":
                                    <td>
                                        @((MarkupString)boldUnderline("Questions:"))<br/>
                                        @for (int i = 0; i < familyYears.Questions.Count; i++) {
                                            var question = familyYears.Questions[i];
                                            @(i+1 + ".") @question
                                            <br/><br/>
                                        }
                                    </td>
                                    break;
                                case "contributions":
                                    runningTotal = 0;
                                    pastTotal = false;

                                    <td>
                                        <span>
                                            @((MarkupString)boldUnderline("Contributions:"))
                                        </span><br/>
                                        @if (familyYears.PlannedSavings > 0) {
                                            <span>Planned savings: @formatMoney(familyYears.PlannedSavings)</span><br/><br/>
                                        }

                                        <span>Prioritized Investments:</span><br/>

                                        @if (familyYears.EmergencyFund.AmountToSave > 0) {
                                            <span>@formatMoney(familyYears.EmergencyFund.AmountToSave) in Emergency Fund</span><br/>
                                            @((MarkupString)checkTotal(familyYears.EmergencyFund.AmountToSave))
                                        }
                                        @if (familyYears.PersonCount > 0 && familyYears.People[0].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyYears.People[0].EmployerPlan.AmountToSaveForMatch) in @familyYears.People[0].PossessiveID 401k (Match: @formatMoney(familyYears.People[0].EmployerPlan.MatchAmount))</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[0].EmployerPlan.AmountToSaveForMatch))
                                        }
                                        @if (familyYears.PersonCount > 1 && familyYears.People[1].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyYears.People[1].EmployerPlan.AmountToSaveForMatch) in @familyYears.People[1].PossessiveID 401k (Match: @formatMoney(familyYears.People[1].EmployerPlan.MatchAmount))</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[1].EmployerPlan.AmountToSaveForMatch))
                                        }
                                        @if (familyYears.HighDebts > 0) {
                                            <span>@familyYears.HighDebts in High Debts</span><br/>
                                            @((MarkupString)checkTotal(familyYears.HighDebts))
                                        }
                                        @if (familyYears.PersonCount > 0 && familyYears.People[0].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyYears.People[0].HealthSavingsAccount.AmountToSave) in @familyYears.People[0].PossessiveID HSA (Employer: @formatMoney(familyYears.People[0].HealthSavingsAccount.EmployerContribution))</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[0].HealthSavingsAccount.AmountToSave))
                                        }
                                        @if (familyYears.PersonCount > 1 && familyYears.People[1].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyYears.People[1].HealthSavingsAccount.AmountToSave) in @familyYears.People[1].PossessiveID HSA (Employer: @formatMoney(familyYears.People[1].HealthSavingsAccount.EmployerContribution))</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[1].HealthSavingsAccount.AmountToSave))
                                        }
                                        @if (familyYears.AdjustedGrossIncome != null) {
                                            if (familyYears.PersonCount > 0) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyYears.People[0]))</span><br/>
                                                @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyYears.People[0])))
                                            }
                                            if(familyYears.PersonCount > 1) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyYears.People[1]))</span><br/>
                                                @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyYears.People[1])))
                                            }
                                        }
                                        @if (familyYears.PersonCount > 0 && familyYears.People[0].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyYears.People[0].EmployerPlan.AmountToSaveForNonMatched) in @familyYears.People[0].PossessiveID 401k</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[0].EmployerPlan.AmountToSaveForNonMatched))
                                        }
                                        @if (familyYears.PersonCount > 1 && familyYears.People[1].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyYears.People[1].EmployerPlan.AmountToSaveForNonMatched) in @familyYears.People[1].PossessiveID 401k</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[1].EmployerPlan.AmountToSaveForNonMatched))
                                        }
                                        @if (familyYears.PersonCount > 0 && familyYears.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                            <span>@formatMoney(familyYears.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyYears.People[0].PossessiveID mega backdoor roth</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                        }
                                        @if (familyYears.PersonCount > 1 && familyYears.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                            <span>@formatMoney(familyYears.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyYears.People[1].PossessiveID mega backdoor roth</span><br/>
                                            @((MarkupString)checkTotal(familyYears.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                        }
                                        @if (familyYears.MediumDebts > 0) {
                                            <span>@formatMoney(familyYears.MediumDebts) in Medium Debts</span><br/>
                                            @((MarkupString)checkTotal(familyYears.MediumDebts))
                                        }
                                        @if (familyYears.PlannedSavings > runningTotal) {
                                            <span>@formatMoney(familyYears.PlannedSavings-runningTotal) in Taxable</span><br/>
                                            @((MarkupString)checkTotal(familyYears.PlannedSavings-runningTotal))
                                        } else {
                                            <span>@formatMoney(0) in Taxable</span><br/>
                                        }
                                        @if (familyYears.LowDebts > 0) {
                                            <span>@formatMoney(familyYears.LowDebts) in Low Debts</span><br/>
                                            @((MarkupString)checkTotal(familyYears.LowDebts))
                                        }
                                        <br/>
                                    </td>
                                    break;
                                default:
                                    <td style=text-align:center>NYI</td><td></td>
                                    break;
                            }
                        </tr>
                    }          
                </table>
                <br/>

                <InputCheckbox id=showMarkup style=margin-left:20px @bind-Value=ShowMarkup /> <label for=showMarkup>Use forum post markup: [b]bold[/b]</label><br/>
                <br/>
                <button style=margin-left:20px @onclick=CopyTextToClipboard>Copy to clipboard</button><br/>
                
                @if (new Uri(Navigation.Uri).Host == "localhost")
                {
                    <br/>
                    <label>Load portfolio data file:</label> <InputFile OnChange="@((e) => OnChange(e))" />
                    <br/>
                    <br/>
                    <button @onclick="DownloadPortfolio">
                    Download portfolio data file
                    </button>
                                        <br/>
                    <button @onclick="DownloadEmployer1">
                    Download employer1 file
                    </button>
                                                            <br/>
                    <button @onclick="DownloadEmployer2">
                    Download employer2 file
                    </button>
                }

                @code {
                        IReadOnlyList<IBrowserFile>? files = new List<IBrowserFile>();
                        void OnChange(InputFileChangeEventArgs e)
                        {
                        files = e.GetMultipleFiles();
                        }
                        async Task ReadFiles()
                        {
                        if (files != null)
                        {
                            foreach (var file in files)
                            {
                                // get the file size
                                var buffer = new byte[file.Size];
                                // read the text file
                                await file.OpenReadStream().ReadAsync(buffer);
                                // convert byte array to string
                                var content = System.Text.Encoding.UTF8.GetString(buffer);
                                // print results(content of file) to console
                                Console.WriteLine(content);
                                }
                            }
                        }

                        private async Task DownloadEmployer1() {
                            await DownloadEmployer(0);
                        }
                        private async Task DownloadEmployer2() {
                            await DownloadEmployer(1);
                        }
                        private async Task DownloadEmployer(int index) {
                            var options = new JsonSerializerOptions() 
                            {
                                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                                WriteIndented = true,
                                Converters =
                                    {
                                        new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                                    }
                            };
                            await DownloadFileFromStream(familyYears.People[index].EmployerBenefits, options, "employer-benefits-"+index+".json");
                        }
                        private async Task DownloadPortfolio() {
                            var options = new JsonSerializerOptions() 
                            {
                                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault,
                                IgnoreReadOnlyProperties = true,
                                WriteIndented = true
                            };
                            await DownloadFileFromStream(familyYears, options, "portfolio.json");
                        }
                        private async Task DownloadFileFromStream(object data, JsonSerializerOptions options, string fileName)
                        {
                            var jsonOut = System.Text.Json.JsonSerializer.Serialize(data, options);

                            using (MemoryStream ms = new MemoryStream(System.Text.Encoding.ASCII.GetBytes(jsonOut)))
                            {
                                using var streamRef = new DotNetStreamReference(stream: ms);
                                await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
                            }
                        }

                        private async Task CopyTextToClipboard()
                        {
                            var text = await JS.InvokeAsync<string>("getTableInnerText");
                            text = text.Replace("\n✏️\t","");
                            text = text.Replace("✏️\t","");
                            await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
                        }
                    }
            </div>
            
            <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
            <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
        }
        else if (stepPath == "tax-filing-info") {

        }
        else
        {
            @foreach (var step in steps) {
                @if (step.step == stepPath) {
                    var firstStepIndex = 0;
                    var lastStepIndex = steps.Length-1;
                    var prevStep = step.number - 2 >= firstStepIndex ? steps[step.number - 2] : null;
                    var nextStep = step.number <= lastStepIndex ? steps[step.number] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <h3 style="max-width:350px">
                        <NavLink href=/portfolio>Portfolio Review</NavLink>
                        <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                        <span style=text-align:center>@step.number</span>
                        <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                        <br/>
                    </h3>
                    <h2>
                        @step.title
                    </h2>
                    <hr/>

                    <h4>@((MarkupString)markupize(step.priority))</h4>

                    <p class="article">@((MarkupString)markupize(step.summary))</p>

                        @switch (step.step) {
                            case "emergency-fund":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyYears" style=margin-left:25px>
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <label>Current Emergency Fund:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>➗ Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <hr style=width:300px />
                                    <div style=text-align:right;width:275px>@familyYears.EmergencyFund.CurrentMonthsString months</div>
                                    @if(familyYears.EmergencyFund.CurrentMonths == null && familyYears.EmergencyFund.CurrentBalance != null) {
                                        <br/><br/>
                                        <InputCheckbox id=ShowDollars @bind-Value=familyYears.EmergencyFund.ShowDollars /> <label for=ShowDollars>Only publish amount, since I haven't yet estimated monthly expenses</label><br/>
                                        <span>(Months is MORE useful than a dollar amount.)</span>
                                    }
                                </EditForm><br/>
                                break;
                            case "debts":
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br/><br/>
                                    <EditForm Model="familyYears">
                                        <table>
                                            <thead>
                                            <th style="width:150px"><label>name</label></th>
                                            <th style="width:150px"><label>total $</label></th>
                                            <th style="width:100px"><label>interest %</label></th>
                                            <th>rate</th>
                                            <th><label></label></th>
                                            </thead>
                                            @for (var i=0;i<familyYears.Debts.Count;i++) {
                                                var debt = familyYears.Debts[i];
                                                int debtBuffer = i;
                                                <tr>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput placeholder='description'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput placeholder='amount owed'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput placeholder='rate'/></td>
                                                <td><span>@debt.Category</span></td>
                                                <td><button @onclick=@(e=>RemoveDebt(e, debtBuffer))>❌ Debt</button></td>
                                                </tr>
                                            }
                                        </table>
                                        <br/>
                                        <button @onclick=addDebt>➕ Debt</button>

                                        <br/><br/>
                                        <label>Amounts to Pay-Off (@step.title):</label><br/><br/>
                                        High Interest: @formatMoney(familyYears.HighDebts)<br/>
                                        Medium Interest: @formatMoney(familyYears.MediumDebts)<br/>
                                        Low Interest: @formatMoney(familyYears.LowDebts)<br/>
                                        Unknown Interest: @formatMoney(familyYears.UnknownDebts)<br/>
                                        <br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void RemoveDebt(MouseEventArgs e, int debtIndex) {
                                        familyYears.Debts.RemoveAt(debtIndex);
                                    }
                                    void addDebt()
                                    {
                                        familyYears?.Debts.Add(new Debt());
                                    }
                                }
                                break;
                            case "tax-status":
                                <p ><b>Worksheet:</b></p>
                                <EditForm Model="familyYears" style=margin-left:25px>
                                    <label>Tax Filing Status:</label>
                                    <select @bind=familyYears.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                    </select><br/>
                                    <br/>
    
                                    <label>Target Year:</label> <select @bind=familyYears.Year><option>2022</option><option>2023</option></select><br/>

                                    @foreach (var taxFiler in familyYears.TaxRateData.TaxData.TaxFilers)
                                    {
                                        bool isMatch = false;
                                        switch (familyYears.TaxFilingStatus.ToString())
                                        {
                                            case "MarriedFilingSeperatelyAndLivingApart":
                                                isMatch = taxFiler.TaxFilingStatus == "MarriedFilingSeperately";
                                                break;
                                            default:
                                                isMatch = taxFiler.TaxFilingStatus == familyYears.TaxFilingStatus.ToString();
                                                break;
                                        }
                                        if (isMatch)
                                        {
                                            string? lastBracket = null;
                                            int? lastStartAmount = null;

                                            <br/>
                                            <InputRadioGroup @bind-Value=familyYears.FederalMarginalTaxBracket>
                                                <label>Tax Bracket (@familyYears.TaxFilingStatus):</label><br/>
                                                <table style="margin-left:20px">
                                                    <tr><th></th><th></th></tr>
                                                @foreach (var taxBracket in taxFiler.TaxBrackets)
                                                {
                                                    if (lastBracket != null) {
                                                        <tr><td><InputRadio Value='@lastBracket'/>&nbsp;@lastBracket</td><td style=padding-left:30px>@(lastStartAmount==1?"Up":formatMoney(lastStartAmount)) to @formatMoney(taxBracket.StartAmount)</td></tr>
                                                    }
                                                    lastBracket = taxBracket.Rate;
                                                    lastStartAmount = taxBracket.StartAmount + 1;
                                                }
                                                    <tr><td><InputRadio Value='@lastBracket'/>&nbsp;@lastBracket</td><td style=padding-left:30px>Over @formatMoney(lastStartAmount-1)</td></tr>
                                                </table>
                                            </InputRadioGroup>
                                        }
                                    }

                                    <br/><label>State of Residence:</label>
                                    <select @bind=familyYears.StateOfResidence>
                                        <option value="ChoiceNeeded">ChoiceNeeded...</option><option value="AL">Alabama (AL)</option><option value="AK">Alaska (AK)</option><option value="AS">American Samoa (AS)</option><option value="AZ">Arizona (AZ)</option><option value="AR">Arkansas (AR)</option><option value="CA">California (CA)</option><option value="CO">Colorado (CO)</option><option value="CT">Connecticut (CT)</option><option value="DE">Delaware (DE)</option><option value="DC">District of Columbia (DC)</option><option value="FL">Florida (FL)</option><option value="GA">Georgia (GA)</option><option value="GU">Guam (GU)</option><option value="HI">Hawaii (HI)</option><option value="ID">Idaho (ID)</option><option value="IL">Illinois (IL)</option><option value="IN">Indiana (IN)</option><option value="IA">Iowa (IA)</option><option value="KS">Kansas (KS)</option><option value="KY">Kentucky (KY)</option><option value="LA">Louisiana (LA)</option><option value="ME">Maine (ME)</option><option value="MD">Maryland (MD)</option><option value="MA">Massachusetts (MA)</option><option value="MI">Michigan (MI)</option><option value="MN">Minnesota (MN)</option><option value="MS">Mississippi (MS)</option><option value="MO">Missouri (MO)</option><option value="MT">Montana (MT)</option><option value="NE">Nebraska (NE)</option><option value="NV">Nevada (NV)</option><option value="NH">New Hampshire (NH)</option><option value="NJ">New Jersey (NJ)</option><option value="NM">New Mexico (NM)</option><option value="NY">New York (NY)</option><option value="NC">North Carolina (NC)</option><option value="ND">North Dakota (ND)</option><option value="CM">Northern Mariana Islands (CM)</option><option value="OH">Ohio (OH)</option><option value="OK">Oklahoma (OK)</option><option value="OR">Oregon (OR)</option><option value="PA">Pennsylvania (PA)</option><option value="PR">Puerto Rico (PR)</option><option value="RI">Rhode Island (RI)</option><option value="SC">South Carolina (SC)</option><option value="SD">South Dakota (SD)</option><option value="TN">Tennessee (TN)</option><option value="TX">Texas (TX)</option><option value="VI">U.S. Virgin Islands (VI)</option><option value="UT">Utah (UT)</option><option value="VT">Vermont (VT)</option><option value="VA">Virginia (VA)</option><option value="WA">Washington (WA)</option><option value="WV">West Virginia (WV)</option><option value="WI">Wisconsin (WI)</option><option value="WY">Wyoming (WY)</option>
                                    </select>
                                    <br/><br/>

                                    <label>State Marginal Tax Rate:</label> <input class=dollar type=text @bind-Value="familyYears.StateMarginalTaxBracket" @bind-Value:event="oninput"/>%<br/><br/>
                                    <br/><br/>
                                </EditForm>
                                <br/>
                                break;
                            case "age":
                                <p ><b>Prerequisities:</b></p>
                                <label>Tax Filing Status:</label>
                                <select @bind=familyYears.TaxFilingStatus>
                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                    <option>Single</option>
                                    <option value=MarriedFilingJointly>Married filing jointly</option>
                                    <option value=MarriedFilingSeperately>Married filing seperately</option>
                                    <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                    <option value=HeadOfHousehold>Head of Household</option>
                                </select><br/><br/>
                                
                                <p><b>Worksheet:</b> </p>
                                @for (int i = 0; i < familyYears.PersonCount; i++) {
                                    var person = familyYears.People[i];
                                    int personIndex = i + 1;
                                    <p><b>Person @personIndex:</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Age:</label> <input style=width:60px type=text @bind-Value=person.Age @bind-Value:event=oninput /><br/>

                                        <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                            <option value="ChoiceNeeded">ChoiceNeeded</option>
                                            <option>person @personIndex</option>
                                            <option>him</option>
                                            <option>her</option>
                                            <option>me</option>
                                            <option>them</option>
                                        </select><br/><br/>
                                    </EditForm><br/>
                                }
                                break;
                            case "asset-allocation":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyYears" style=margin-left:25px>
                                    <label>Desired Asset Allocation:</label><br/>
                                    <label>Stock:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyYears.Stocks @bind-Value:event=oninput />%<br/>
                                    <label>Bond:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyYears.Bonds @bind-Value:event=oninput />%<br/>
                                    <hr/>
                                    <label>Desired International allocation (% of Stock):</label><br/>
                                    <label>International:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyYears.International @bind-Value:event=oninput />%<br/>
                                </EditForm><br/>
                                break;
                            case "available-funds":
                                <td>
                                    <label>Account</label>
                                    <select @bind=currentAccountIndex>
                                        <option>Choose Account...</option>
                                        @for (int i=0;i<familyYears.Accounts.Count;i++) {
                                            var account = familyYears.Accounts[i];
                                            <option value=@i>
                                                @account.FullName
                                            </option>
                                        }
                                    </select>
                                    <br/>

                                     @if(currentAccountIndex != null && currentAccountIndex != "Choose Account...") {
                                        int index = int.Parse(currentAccountIndex);
                                        var currentAccount = familyYears.Accounts[index];
                                        for (int i=0;i < currentAccount.AvailableFunds.Count; i++) {
                                            var investment = currentAccount.AvailableFunds[i];
                                            int invBuffer = i;
                                            <div style=margin-top:10px;margin-left:80px;padding-left:3em;text-indent:-3em;>
                                                <button @onclick='@(e=>deleteAvailableFund(e,currentAccount,invBuffer))'>❌</button>
                                                <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                            </div>
                                            <div style=margin-left:85px>
                                                <input type=text @bind-Value=investment.Name @bind-Value:event=oninput placeholder='investment fullname' />
                                                &nbsp;(
                                                    <input style="width:70px" type=text @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='expense ratio'/>
                                                %)
                                            </div>
                                        }
                                        <br/>
                                        <button style=margin-left:80px @onclick='@(e=>addAvailableFund(e,currentAccount))'>➕</button>
                                    }
                                </td>
                                break;
                            case "additional-background":
                                <td>
                                    <textarea style=width:600px;height:300px @bind-Value=familyYears.AdditionalBackground @bind-Value:event=oninput placeholder='additional background information'>
                                        @familyYears.AdditionalBackground
                                    </textarea>
                                </td>
                                break;
                            case "questions":
                                <td>
                                    @for (int i = 0; i < familyYears.Questions.Count; i++) {
                                        int iBuffer = i;
                                        <label >@(i+1 + ". ")</label> 
                                        <textarea style=width:500px;vertical-align:top @bind-Value=familyYears.Questions[iBuffer] @bind-Value:event="oninput" placeholder="ask question">
                                            @familyYears.Questions[iBuffer]
                                        </textarea>
                                        <br/>
                                        <br/>
                                    }
                                    <br/>
                                        <button style=margin-left:80px @onclick=addQuestion>➕ Question</button>
                                    <br/>
                                    @code {
                                        void addQuestion() {
                                            familyYears.Questions.Add("");
                                        }
                                    }
                                </td>
                                break;                                
                            case "retirement-assets":
                                <p><b>Prerequisites:</b> </p>

                                <label style=margin-left:25px>Tax Filing Status:</label>
                                <select @bind=familyYears.TaxFilingStatus>
                                    <option value="ChoiceNeeded">ChoiceNeeded</option>
                                    <option>Single</option>
                                    <option value=MarriedFilingJointly>Married filing jointly</option>
                                    <option value=MarriedFilingSeperately>Married filing seperately</option>
                                    <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                    <option value=HeadOfHousehold>Head of Household</option>
                                </select><br/>
                                <br/>

                                <u><b>Current Retirement Assets:</b></u><br/>

                                @code{
                                    void editAccount(MouseEventArgs e, int index)
                                    {
                                        familyYears.Accounts[index].Edit = true;
                                    }
                                }

                                accountIndex = 0;
                                @foreach (var account in familyYears.Accounts) {
                                    int accBuffer = accountIndex;
                                    accountIndex++;
                                    <br/>
                                    <div style=padding-left:3em;text-indent:-3em;>
                                        <button @onclick='@(e=>deleteAccount(e,accBuffer))'>❌</button>
                                        @if (familyYears.PersonCount == 2) {
                                        <select @ref=accountN @bind=account.Identifier>
                                            <option>our</option>
                                            @for(int p=0;p<familyYears.PersonCount;p++)
                                            {
                                                <option>@familyYears.People[p].PossessiveID</option>
                                            }
                                        </select>
                                        }
                                        <select @ref=accountN @bind=account.AccountType>
                                            <option>Account Type...</option>
                                            <option>401k</option>
                                            <option>403b</option>
                                            <option>457b</option>
                                            <option>Inherited IRA</option>
                                            <option>Inherited Roth IRA</option>
                                            <option value="Traditional IRA">IRA</option>
                                            <option>Rollover IRA</option>
                                            <option>Roth IRA</option>
                                            <option>SIMPLE IRA</option>
                                            <option>Traditional IRA</option>
                                            <option>Taxable</option>
                                        </select>
                                        <span> at <input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' /></span>
                                    </div>
                                    
                                    investmentIndex = 0;
                                    @foreach (var investment in account.Investments) {
                                        int invBuffer = investmentIndex;
                                        investmentIndex++;
                                        <div style=margin-top:10px;margin-left:20px;padding-left:3em;text-indent:-3em;>
                                            <button @onclick='@(e=>deleteInvestment(e,accBuffer,invBuffer))'>❌</button>
                                            <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                            Balance 🟰 $<input style=width:100px type=text @bind-Value=investment.Value @bind-Value:event=oninput placeholder='value'/>
                                        </div>
                                        <div style=margin-left:85px>
                                            <input type=text @bind-Value=investment.Name @bind-Value:event=oninput placeholder='investment fullname' />
                                            &nbsp;(
                                                <input style="width:70px" type=text @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='expense ratio'/>
                                            %)
                                        </div>
                                    }
                                    <button style=margin-left:20px @onclick='@(e=>addInvestment(e,accBuffer))'>➕</button>
                                    <hr style=margin-left:40px/>
                                    <div style=margin-left:40px>Account Total: @formatMoney(account.Value)</div>
                                }
                                <br/>
                                <div><button @onclick=addAccount>➕</button></div>
                                <hr/>
                                <div>Portfolio Size: @formatMoney(familyYears.Value)</div>

                                @code{
                                    private ElementReference tickerN;
                                    private ElementReference accountN;

                                    private async void addInvestment(MouseEventArgs e, int accountIndex)
                                    {
                                        var newInvestment = new Investment(Funds);
                                        familyYears.Accounts[accountIndex].Investments.Add(newInvestment);
                                        focusTicker = true;
                                    }

                                    void deleteInvestment(MouseEventArgs e, int accountIndex, int investmentIndex)
                                    {
                                        familyYears.Accounts[accountIndex].Investments.RemoveAt(investmentIndex);
                                        Navigation.NavigateTo("/portfolio/reload");
                                    }
                                    void addAvailableFund(MouseEventArgs e, Account account)
                                    {
                                        var newFund = new Investment(Funds);
                                        account.AvailableFunds.Add(newFund);
                                        focusTicker = true;
                                    }
                                    void deleteAvailableFund(MouseEventArgs e, Account account, int investmentIndex)
                                    {
                                        account.AvailableFunds.RemoveAt(investmentIndex);
                                    }
                                    void addAccount()
                                    {
                                        var newAccount = new Account();
                                        var newInvestment = new Investment(Funds);
                                        newAccount.Investments.Add(newInvestment);
                                        familyYears?.Accounts.Add(newAccount);
                                        focusAccount = true;
                                    }
                                    void deleteAccount(MouseEventArgs e, int accountIndex)
                                    {
                                        familyYears.Accounts.RemoveAt(accountIndex);
                                        Navigation.NavigateTo("/portfolio/reload");
                                    }
                                }

                                @if(familyYears.Value > 0) {
                                <br/>
                                <div>Preferred technique to represent the approximate size of your total portfolio (in <NavLink href="/portfolio">portfolio review</NavLink>):</div>
                                <InputRadioGroup @bind-Value=familyYears.ValueStyle>
                                    <InputRadio id=rounded Value='0' /> <label for=rounded>@formatMoneyThousands(familyYears.Value)</label> <br/>
                                    <InputRadio id=estimate Value='1' /> <label for=estimate>@estimatePortfolio(familyYears)</label> <br/>
                                    <InputRadio id=dollar Value='2' /> <label for=dollar>@formatMoney(familyYears.Value)</label> <br/>
                                </InputRadioGroup>
                                }
                                break;
                            case "contributions":
                                Navigation.NavigateTo("/portfolio-contributions");        
                                break;
                        }
                    <p>
                        @if(step.description != "") {
                            <b>Details:</b> <span>@((MarkupString)markupize(step.description))</span>
                        }
                    </p>

                    <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                    <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        runningTotal += itemTotal ?? 0;
        if (!pastTotal) {
            pastTotal = familyYears.PlannedSavings <= runningTotal;

            if (pastTotal) {
                return "<div>-------<br/><div>Planned savings " + (familyYears.PlannedSavings==runningTotal?"met":"exceeded") + " after " + formatMoney(itemTotal+(familyYears.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
            }
        }

        return null;
    }

    public int? GetRecommdedIRAAmount(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
            case IRAType.DeductibleIRA:
                return person.IRA.AmountToSave;
            case IRAType.Roth:
                return person.RothIRA.AmountToSave;
            case IRAType.NondeductibleIRAThenBackdoorRoth:
            case IRAType.NondeductibleIRA:
                return person.IRA.AmountToSave;
            default:
                return null;
        }
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + formatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + formatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string getPronoun(Person person)
    {
        if (person.Identifier != null && person.Identifier != "None") {
            return "(" + person.Identifier + ")";
        }
        else
        {
            return "";
        }
    }

    public string formatMoney(int? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }
    public string formatMoney(double? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }
    public string formatMoneyThousands(double? amount) 
    {
        if (amount == null) return "";

        if (amount >= 1000000) {
            return String.Format("${0:#,0.##M}", Math.Round((double)amount / 10000.0)/100.0);
        } else if (amount >= 1000) {
            return String.Format("${0:#,0.##K}", Math.Round((double)amount / 1000.0));
        } else {
            return String.Format("${0:#,0.##}", amount);
        }
    }
    public string formatPercent(double? amount)
    {
        return String.Format("{0:#,0.#}%", amount);
    }

    public string estimatePortfolio(IFamilyYears familyYears) 
    {
        if (familyYears.Value >= 10000000) {
            return "8-figures";
        } else if (familyYears.Value >= 6666666) {
            return "high 7-figures";
        } else if (familyYears.Value >= 3333333) {
            return "mid 7-figures";
        } else if (familyYears.Value >= 1000000) {
            return "low 7-figures";
        } else if (familyYears.Value >= 666666) {
            return "high 6-figures";
        } else if (familyYears.Value >= 333333) {
            return "mid 6-figures";
        } else if (familyYears.Value >= 100000) {
            return "low 6-figures";
        } else if (familyYears.Value >= 66666) {
            return "high 5-figures";
        } else if (familyYears.Value >= 33333) {
            return "mid 5-figures";
        } else if (familyYears.Value >= 10000) {
            return "low 5-figures";
        } else if (familyYears.Value >= 1000) {
            return "4-figures";
        } else if (familyYears.Value == 0) {
            return "-";
        } else {
            return "less than $1,000";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }


    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (focusTicker)
            {
                await tickerN.FocusAsync();
                focusTicker = false;
            } else if (focusAccount) {
                await accountN.FocusAsync();
                focusAccount = false;
            }
    }

    [Parameter]
    public string? stepPath { get; set; }
    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string folderName = "/portfolio/";
    private bool focusTicker = false;
    private bool focusAccount = false;

    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/portfolio-steps.json");
    }
}
