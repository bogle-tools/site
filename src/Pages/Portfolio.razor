@page "/portfolio"
@page "/portfolio/{stepPath}"
@inject HttpClient Http
@inject IFamilyYears familyYears

<PageTitle>
portfolio/@stepPath
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
</style>

    @if (steps == null || familyYears == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            
            <h2 style="max-width:350px">
                <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                Portfolio Review
                <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
            </h2>
            <p><b>Early Preview:</b> This feature is early in its development. Feedback is welcome!</p>
            <p>Getting all your information in one place to help others give you feedback is the idea behind Bogleheads.org's <a target=_blank href="https://www.bogleheads.org/forum/viewtopic.php?t=6212">Asking Portfolio Questions</a><span class="oi oi-external-link m-2 aria-hidden="true"></span>. This tool will make it easy to post to bogleheads.org forum with the correct format.</p>

            <div>
                
                
                <p ><b>Edit (✏️) and complete all the steps:</b></p>

                <table>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            <td>
                                <div>
                                    <a href="@href" style="background:blue" class="m-1 btn" >✏️</a>
                                </div>
                            </td>
                            @switch (step.step) {
                                case "age": 
                                    <td>
                                        <b>Age:</b> @familyYears.Active.People[0].Age @getPronoun(familyYears.Active.People[0])
                                        @if(familyYears.Active.PersonCount > 1 && familyYears.Active.People[1].Age != null) {
                                            <span>&nbsp;and @familyYears.Active.People[1].Age @getPronoun(familyYears.Active.People[1])</span>
                                        }
                                    </td>
                                   break;
                                case "emergency-fund":
                                   <td style=text-align:left>
                                        <b>Emergency funds:</b>
                                        @if (familyYears.Active.EmergencyFund.CurrentMonths != null) {
                                            <span>&nbsp;@familyYears.Active.EmergencyFund.CurrentMonthsString months</span>
                                        } else if (familyYears.Active.EmergencyFund.UseAmount) {
                                            <span>&nbsp;$@familyYears.Active.EmergencyFund.CurrentBalance</span>
                                        }
                                   </td>
                                   break;
                                case "debts":
                                    <td style=text-align:left>
                                        <b>Debt:</b> 
                                        @if (familyYears.Active.Debts.Count == 0) { <span>&nbsp;no debts</span> } 
                                        else if (familyYears.Active.Debts.Count >= 1) { 
                                            <br/>
                                            @foreach (var debt in familyYears.Active.Debts)
                                            {
                                                <span>&nbsp;&nbsp;@debt.Name: @formatMoney(debt.Total) @@ @debt.Rate%</span><br/> 
                                            }
                                        }
                                    </td>
                                    break;
                                case "tax-status":
                                    <td>
                                        <span>
                                            <b>Tax Filing Status:</b> 
                                            @if (familyYears.Active.TaxFilingStatus != TaxFilingStatus.None) { <span>&nbsp;@familyYears.Active.TaxFilingStatus</span> }
                                            <br/>
                                            <b>Tax Rate:</b> 
                                            @if (familyYears.Active.FederalMarginalTaxBracket != null) { <span>&nbsp;@familyYears.Active.FederalMarginalTaxBracket Federal, @familyYears.Active.StateMarginalTaxBracket% State</span> }
                                            <br/>
                                            <b>State of Residence:</b>
                                            @if (familyYears.Active.StateMarginalTaxBracket != null) { <span>&nbsp;@familyYears.Active.StateOfResidence</span> }
                                        </span>
                                    </td>
                                    break;
                                case "asset-allocation":
                                    <td>
                                        <b>Desired Asset allocation:</b>
                                        @if (familyYears.Active.Stocks != null && familyYears.Active.Bonds != null) {
                                            <span>&nbsp;@familyYears.Active.Stocks% stocks / @familyYears.Active.Bonds% bonds</span><br/>
                                        } else {
                                            <br/>
                                        }
                                        <span>&nbsp;&nbsp;Desired International allocation: </span>
                                            @if (familyYears.Active.International != null) {
                                                <span>@familyYears.Active.International%</span>
                                            }
                                    </td>
                                    break;
                                case "retirement-assets":
                                    <td>
                                        <span>
                                            <u><b>Current Retirement Assets:</b></u><br/>
                                        </span>
                                    </td>
                                    break;                                
                                case "contributions":
                                    <td>
                                        <span>
                                            <u><b>Contributions:</b></u><br/><br/>
                                            <b>New annual Contributions</b>
                                        </span>
                                    </td>
                                    break;
                                default:
                                    <td style=text-align:center>NYI</td><td></td>
                                    break;
                            }
                        </tr>
                    }
                </table>
            </div>
            
            <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
            <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
        }
        else if (stepPath == "tax-filing-info") {

        }
        else
        {
            @foreach (var step in steps) {
                @if (step.step == stepPath) {
                    var prevStep = step.number >= 1 + 1 ? steps[step.number - 2] : null;
                    var nextStep = step.number <= steps.Length - 1 ? steps[step.number] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <h2 style="max-width:350px">
                        <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                        @step.number: @step.title
                        <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                    </h2>

                    <h4>@((MarkupString)markupize(step.priority))</h4>

                    <p>@((MarkupString)markupize(step.summary))</p>

                        @switch (step.step) {
                            case "emergency-fund":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <label>Current Emergency Fund:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>➗ Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <hr style=width:300px />
                                    <div style=text-align:right;width:275px>@familyYears.Active.EmergencyFund.CurrentMonthsString months</div>
                                    @if(familyYears.Active.EmergencyFund.CurrentMonths == null && familyYears.Active.EmergencyFund.CurrentBalance != null) {
                                        <br/><br/>
                                        <InputCheckbox id=useAmount @bind-Value=familyYears.Active.EmergencyFund.UseAmount /> <label for=useAmount>Only publish amount (don't know approximate expenses)</label><br/>
                                        <span>(Months is MORE useful than a dollar amount.)</span>
                                    }
                                </EditForm><br/>
                                break;
                            case "debts":
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br>
                                    <EditForm Model="familyYears.Active">
                                        <table>
                                            <thead>
                                            <th><label>name</label></th>
                                            <th><label>interest %</label></th>
                                            <th><label>category</label></th>
                                            <th><label>total $</label></th>
                                            <th><label>payoff date</label></th>
                                            <th><label></label></th>
                                            </thead>
                                            @foreach (var debt in familyYears.Active.Debts) {
                                                var myDebt = debt;
                                                <tr>
                                                <td><input type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput /></td>
                                                <td><input type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput /></td>
                                                <td><span>@debt.Category</span></td>
                                                <td><input type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput /></td>
                                                <td><input type=text class=dollar @bind-Value=debt.PayoffDate @bind-Value:event=oninput /></td>
                                                <td><button @onclick=@(() => familyYears.Active.Debts.Remove(myDebt))>@myDebt.Name<span class="oi oi-delete" aria-hidden="true"></span></button></td>
                                                </tr>
                                            }
                                        </table>
                                        <button @onclick=addDebt>Add</button>

                                        <br/><br/>
                                        <label>Amounts to Pay-Off (@step.title):</label><br/>
                                        High Interest: <span>$</span>@familyYears.Active.HighDebts<br/>
                                        Medium Interest: <span>$</span>@familyYears.Active.MediumDebts<br/>
                                        Low Interest: <span>$</span>@familyYears.Active.LowDebts<br/>
                                        <br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void addDebt()
                                    {
                                        familyYears.Active?.Debts.Add(new Debt() { Name = "new", Rate = 3.0, Total = 5000 });
                                    }
                                }
                                break;
                            case "tax-status":
                                <p ><b>Worksheet:</b></p>
                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Tax Filing Status:</label>
                                    <select @bind=familyYears.Active.TaxFilingStatus>
                                        <option value=None>choose...</option>
                                        <option>Single</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                    </select><br/>
                                    @foreach (var taxFiler in familyYears.Active.TaxRateData.TaxData.TaxFilers)
                                    {
                                        bool isMatch = false;
                                        switch (familyYears.Active.TaxFilingStatus.ToString())
                                        {
                                            case "MarriedFilingSeperatelyAndLivingApart":
                                                isMatch = taxFiler.TaxFilingStatus == "MarriedFilingSeperately";
                                                break;
                                            default:
                                                isMatch = taxFiler.TaxFilingStatus == familyYears.Active.TaxFilingStatus.ToString();
                                                break;
                                        }
                                        if (isMatch)
                                        {
                                            string lastBracket = null;
                                            int? lastStartAmount = null;

                                            <br/>
                                            <InputRadioGroup @bind-Value=familyYears.Active.FederalMarginalTaxBracket>
                                                <label>Federal Marginal Tax Rate:</label><br/>
                                                <table style="margin-left:20px">
                                                    <tr><th></th><th style=text-align:right;padding-right:10px>From</th><th style=text-align:right;padding-right:10px>To</th></tr>
                                                @foreach (var taxBracket in taxFiler.TaxBrackets)
                                                {
                                                    if (lastBracket != null) {
                                                        <tr><td><InputRadio Value='@lastBracket'/>&nbsp;@lastBracket</td><td style=text-align:right;padding-left:30px>@formatMoney(lastStartAmount)</td><td style=text-align:right;padding-left:30px>@formatMoney(taxBracket.StartAmount-1)</td></tr>
                                                    }
                                                    lastBracket = taxBracket.Rate;
                                                    lastStartAmount = taxBracket.StartAmount;
                                                }
                                                    <tr><td><InputRadio Value='@lastBracket'/>@lastBracket</td><td style=text-align:right;padding-left:30px>@formatMoney(lastStartAmount)</td><td style=padding-left:30px>and up</td></tr>
                                                </table>
                                            </InputRadioGroup>
                                        }
                                    }

                                    <br/><label>State of Residence:</label>
                                    <select @bind=familyYears.Active.StateOfResidence>
                                        <option value="None">Choose...</option><option value="AL">Alabama (AL)</option><option value="AK">Alaska (AK)</option><option value="AS">American Samoa (AS)</option><option value="AZ">Arizona (AZ)</option><option value="AR">Arkansas (AR)</option><option value="CA">California (CA)</option><option value="CO">Colorado (CO)</option><option value="CT">Connecticut (CT)</option><option value="DE">Delaware (DE)</option><option value="DC">District of Columbia (DC)</option><option value="FL">Florida (FL)</option><option value="GA">Georgia (GA)</option><option value="GU">Guam (GU)</option><option value="HI">Hawaii (HI)</option><option value="ID">Idaho (ID)</option><option value="IL">Illinois (IL)</option><option value="IN">Indiana (IN)</option><option value="IA">Iowa (IA)</option><option value="KS">Kansas (KS)</option><option value="KY">Kentucky (KY)</option><option value="LA">Louisiana (LA)</option><option value="ME">Maine (ME)</option><option value="MD">Maryland (MD)</option><option value="MA">Massachusetts (MA)</option><option value="MI">Michigan (MI)</option><option value="MN">Minnesota (MN)</option><option value="MS">Mississippi (MS)</option><option value="MO">Missouri (MO)</option><option value="MT">Montana (MT)</option><option value="NE">Nebraska (NE)</option><option value="NV">Nevada (NV)</option><option value="NH">New Hampshire (NH)</option><option value="NJ">New Jersey (NJ)</option><option value="NM">New Mexico (NM)</option><option value="NY">New York (NY)</option><option value="NC">North Carolina (NC)</option><option value="ND">North Dakota (ND)</option><option value="CM">Northern Mariana Islands (CM)</option><option value="OH">Ohio (OH)</option><option value="OK">Oklahoma (OK)</option><option value="OR">Oregon (OR)</option><option value="PA">Pennsylvania (PA)</option><option value="PR">Puerto Rico (PR)</option><option value="RI">Rhode Island (RI)</option><option value="SC">South Carolina (SC)</option><option value="SD">South Dakota (SD)</option><option value="TN">Tennessee (TN)</option><option value="TX">Texas (TX)</option><option value="VI">U.S. Virgin Islands (VI)</option><option value="UT">Utah (UT)</option><option value="VT">Vermont (VT)</option><option value="VA">Virginia (VA)</option><option value="WA">Washington (WA)</option><option value="WV">West Virginia (WV)</option><option value="WI">Wisconsin (WI)</option><option value="WY">Wyoming (WY)</option>
                                    </select>
                                    <br/><br/>

                                    <label>State Marginal Tax Rate:</label> <input class=dollar type=text @bind-Value="familyYears.Active.StateMarginalTaxBracket" @bind-Value:event="oninput"/>%<br/><br/>
                                    <br/><br/>
                                </EditForm>
                                <br/>
                                break;
                            case "age":
                                <p ><b>Prerequisities:</b></p>
                                <label>Tax Filing Status:</label>
                                <select @bind=familyYears.Active.TaxFilingStatus>
                                    <option value=None>choose...</option>
                                    <option>Single</option>
                                    <option value=HeadOfHousehold>Head of Household</option>
                                    <option value=MarriedFilingJointly>Married filing jointly</option>
                                    <option value=MarriedFilingSeperately>Married filing seperately</option>
                                    <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                </select><br/><br/>
                                
                                <p><b>Worksheet:</b> </p>
                                @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                    var person = familyYears.Active.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Age:</label> <input type=text @bind-Value=person.Age @bind-Value:event=oninput /><br/>

                                        <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                            <option value=None>choose...</option>
                                            <option>me</option>
                                            <option>them</option>
                                            <option>him</option>
                                            <option>her</option>
                                        </select><br/><br/>
                                    </EditForm><br/>
                                }
                                break;
                            case "asset-allocation":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Stock:</label> <input type=text @bind-Value=familyYears.Active.Stocks @bind-Value:event=oninput />%<br/>
                                    <label>Bond:</label> <input type=text @bind-Value=familyYears.Active.Bonds @bind-Value:event=oninput />%<br/>
                                    <label>International:</label> <input type=text @bind-Value=familyYears.Active.International @bind-Value:event=oninput />%<br/>
                                </EditForm><br/>
                                break;
                        }
                    <p>
                        @if(step.description != "") {
                            <b>Details:</b> <span>@((MarkupString)markupize(step.description))</span>
                        }
                    </p>

                    <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                    <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>IRA: $" + person.IRA.AmountToSave + " ($" + person.IRA.DeductionAllowed + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>IRA: $" + person.IRA.AmountToSave + " ($" + person.IRA.DeductionAllowed + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>Roth IRA: $" + person.RothIRA.AmountToSave + "</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>IRA: $" + person.IRA.AmountToSave + " ($" + person.IRA.DeductionAllowed + " Deductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>IRA: $" + person.IRA.AmountToSave + " ($" + person.IRA.DeductionAllowed + " Deductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string getPronoun(Person person)
    {
        if (person.Identifier != null && person.Identifier != "None") {
            return "(" + person.Identifier + ")";
        }
        else
        {
            return "";
        }
    }

    public string formatMoney(int? amount) 
    {
        return String.Format("${0:#,0.#}", amount);
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    [Parameter]
    public string? stepPath { get; set; }

    private Step[]? steps;
    private const string folderName = "/portfolio/";

    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/portfolio-steps.json");
    }
}
