@page "/profiles"
@page "/activate"
@inject IAppData appData
@inject NavigationManager Navigation
@inject LocalStorageAccessor LocalStorageAccessor
@inject IRSData irsData
@inject HttpClient Http

<PageTitle>bogle.tools profiles</PageTitle>

<h1>bogle.tools profiles</h1>
@if (profileNames != null && profileNames.Count > 0)
{
    <p>Click on profile name to make it the active profile. You'll be navigated back to your prior page.</p>

    <table>
        <tr>
            <th></th>
            <th>Name</th>
            <th>Action</th>
        </tr>
    @foreach(var profileName in profileNames)
    {
        <tr>
            <td>
                @if(profileName==appData.CurrentProfileName){<b>&nbsp;[active]&nbsp;</b>} 
            </td>
            <td>
                @if (renameProfileName == profileName)
                {
                    <EditForm Model="appData">
                        <InputText @bind-Value=newName />
                    </EditForm>
                }
                else
                {
                    <a href=/portfolio @onclick="@(e=>makeProfileActive(e,profileName))" @onclick:preventDefault>@profileName</a><span>&nbsp;</span>
                }
            </td>
            <td>
                @if(!importing) {
                    @if (renameProfileName == null || renameProfileName == profileName)
                    {
                        <button @onclick="@(e=>renameProfile(e,profileName))">Rename</button>
                    }
                    @if (renameProfileName == null)
                    {
                        <button @onclick="@(e=>deleteProfile(e,profileName))">Del</button>
                    }
                    @if (renameProfileName == null)
                    {
                        <button @onclick="@(e=>shareProfileData(e,profileName))">Share</button>
                    }
                }
            </td>
        </tr>
    }
    </table>
} else {
    newProfileName = "primary";
    
    <p>Choose a profile name (defaults to 'primary') to store your data locally.</p>
}
<br/>
@if(!importing){<label>Create new profile:</label>} else {<label>Import shared profile:</label>}
<br/>
<InputText placeholder="profile name" @bind-Value="@newProfileName" />
@if(!importing){<button @onclick="createProfile">➕ create</button>} else
{<InputText placeholder="import code" @bind-Value="@importCode" />}
<button @onclick="importProfile">➕ import</button>
<br/>
<span>@log</span>
@code {
    private ElementReference renameBox;
    private bool importing = false;

    private async Task importProfile()
    {
        if (!importing)
        {
            importCode = null;
            importing = true;
        }
        else
        {
            await doImportProfile();
            importing = false;
            profileNames = await appData.CalculateProfileNames();
        }
    }
    private async Task doImportProfile()
    {
        var jsonEncoding = "{ 'importCode':'"+importCode+"'}";
        var myHttpContent = new MyHttpContent(jsonEncoding);
        var familyDataResponse = await Http.PostAsync($"https://api.bogle.tools/api/sharedata", myHttpContent, CancellationToken.None);
        await ProfileUtilities.Save(newProfileName, await familyDataResponse.Content.ReadAsStringAsync());
        if (appData.CurrentProfileName == newProfileName)
        {
            await ProfileUtilities.Load(appData);
        }
        
        newProfileName = "";
    }

    private async Task makeProfileActive(EventArgs e, string profileName)
    {
        appData.CurrentProfileName = profileName;
        await LocalStorageAccessor.SetValueAsync("CurrentProfileName", profileName);
        await ProfileUtilities.Load(appData);
        if (appData.LastPageUri != null)
        {
            Navigation.NavigateTo(appData.LastPageUri);
        }
        else
        {
            Navigation.NavigateTo("/portfolio");
        }
    }

    private async Task renameProfile(EventArgs e, string profileName)
    {
        if (renameProfileName == null)
        {
            renameProfileName = profileName;
            newName = profileName;
        }
        else
        {
            profileNames = await appData.CalculateProfileNames();
            if (newName != renameProfileName && !string.IsNullOrEmpty(newName) && !profileNames.Contains(newName))
            {
                await LocalStorageAccessor.RenameKey(renameProfileName, newName);

                if (appData.CurrentProfileName == renameProfileName)
                {
                    appData.CurrentProfileName = newName;
                }

                renameProfileName = null;
            }

            profileNames = await appData.CalculateProfileNames();
        }
    }

    private async Task shareProfileData(EventArgs e, string profileName)
    {
        //TODO: what if not saved? this will get from localstorage.
        var profileData = await ProfileUtilities.GetProfileData(profileName);
        var jsonEncoding = "{ \"profileData\":'"+profileData+"'}";
        var myHttpContent = new MyHttpContent(jsonEncoding);
        var securityKeyResponse = await Http.PostAsync($"https://api.bogle.tools/api/sharedata", myHttpContent, CancellationToken.None);
        log += $"\n{profileName} profile shared. Navigate another device to bogle.tools/activate within 2 minutes: " + await securityKeyResponse.Content.ReadAsStringAsync() + "\n";
    }

    private async Task deleteProfile(EventArgs e, string profileName)
    {
        await LocalStorageAccessor.RemoveAsync(profileName);
        if (appData.CurrentProfileName == profileName)
        {
            appData.CurrentProfileName = null;
            appData.FamilyData = null;
        }

        profileNames = await appData.CalculateProfileNames();
    }

    private async Task createProfile()
    {
        if (!string.IsNullOrEmpty(newProfileName)) {
            await ProfileUtilities.Save(newProfileName, new FamilyData(appData));
            newProfileName = "";
            profileNames = await appData.CalculateProfileNames();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        profileNames = await appData.CalculateProfileNames();
    }

    private List<string> profileNames;
    private string newProfileName { get; set; }
    private string? renameProfileName { get; set; }
    private string? newName {get; set;}
    private string? importCode { get; set;}
    private string? log {get;set;}
}