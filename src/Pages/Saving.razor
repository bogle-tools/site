@page "/saving"
@page "/saving/{stepPath}"
@page "/portfolio-contributions"
@inject HttpClient Http
@inject IFamilyYears familyYears

<PageTitle>
saving/@stepPath
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>

    @if (steps == null || familyYears == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            
            <h3 style="max-width:350px">
                Annual Saving
                <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                <span style=text-align:center>0</span>
                <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                <br/>
            </h3>

            <p>To save money efficiently, you should prioritize the most efficient techniques. This tool helps you apply the <a target=_blank href="https://www.bogleheads.org/wiki/Prioritizing_investments">Bogleheads Prioritizing Investments wiki</a> ↗️. Review and complete the steps that apply to you.</p>
            <p><b>Feedback Welcome:</b> This feature is early in its development. Feedback is welcome on <a href='https://www.bogleheads.org/forum/viewtopic.php?t=393724'>forum post</a> or via <a href="https://linktr.ee/rrelyea">email/twitter</a>!</p>

            <div>
                <p ><b>Prerequisities:</b></p>
                <EditForm Model="familyYears.Active" style=margin-left:25px>
                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>
                    <label>Tax Filing Status:</label>
                    <select @bind=familyYears.Active.TaxFilingStatus>
                        <option value=None>choose...</option>
                        <option>Single</option>
                        <option value=MarriedFilingJointly>Married filing jointly</option>
                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                        <option value=HeadOfHousehold>Head of Household</option>
                    </select><br/>
                    @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                        var person = familyYears.Active.People[i];
                        <span>Person @(i+1):</span><br/>
                        <div style=margin-left:25px>
                            <label>Age:</label> <input style=width:60px type=text @bind-Value=person.Age @bind-Value:event=oninput /><br/>

                            <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                <option value=None>choose...</option>
                                <option>person @(i+1)</option>
                                <option>him</option>
                                <option>her</option>
                                <option>me</option>
                                <option>them</option>
                            </select><br/>
                        </div>
                    }
                    <label>Estimated Adjusted Gross Income:</label> $<input type=text class=dollar @bind-Value=familyYears.Active.AdjustedGrossIncome @bind-Value:event=oninput /><br/>
                    <label>Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/>
                    <label>Annual Income Tax Paid:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.IncomeTaxPaid" @bind-Value:event="oninput" /><br/>
                    <label>Money in Taxable Fund, to help invest more:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.TaxableToInvest" @bind-Value:event="oninput" /><br/>
                    <label>Planned Savings:</label> <span>@formatMoney(familyYears.Active.PlannedSavings)</span><br/>
                </EditForm>
                <br/>
                <p ><b>Prioritized Steps:</b></p>

                <p><b>Press edit (✏️) to complete each step:</b></p>
                <table>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            <td style=text-align:right>
                                @step.number
                            </td>
                            <td>
                                <a href="@href" style="background:blue" class="m-1 btn" >✏️</a>
                            </td>
                            @switch (step.step) {
                                case "emergency-fund": 
                                    <td>
                                        @if (familyYears.Active.EmergencyFund.AmountToSave != null) {
                                            <span>@formatMoney(familyYears.Active.EmergencyFund.AmountToSave) in Emergency Fund</span><br/>
                                        } else {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                   break;
                                case "retirement-funds-match":
                                    <td>
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyYears.Active.People[0].EmployerPlan.AmountToSaveForMatch) in @familyYears.Active.People[0].PossessiveID 401k (Match: @formatMoney(familyYears.Active.People[0].EmployerPlan.MatchAmount))</span><br/>
                                        }
                                        @if (familyYears.Active.People[1].EmployerPlan.AmountToSaveForMatch > 0) {
                                            <span>@formatMoney(familyYears.Active.People[1].EmployerPlan.AmountToSaveForMatch) in @familyYears.Active.People[1].PossessiveID 401k (Match: @formatMoney(familyYears.Active.People[1].EmployerPlan.MatchAmount))</span><br/>
                                        }
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForMatch == null && familyYears.Active.People[1].EmployerPlan.AmountToSaveForMatch == null) {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                   break;
                                case "high-interest-debt":
                                    <td>
                                        @if (familyYears.Active.Debts.Count > 0) {
                                            <span>@formatMoney(familyYears.Active.HighDebts>0?familyYears.Active.HighDebts:0) in High-Interest Debts</span><br/>
                                        } else {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                    break;
                                case "hsa":
                                    <td>
                                        @if (familyYears.Active.People[0].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyYears.Active.People[0].HealthSavingsAccount.AmountToSave) in @familyYears.Active.People[0].PossessiveID HSA (Employer: @formatMoney(familyYears.Active.People[0].HealthSavingsAccount.EmployerContribution))</span><br/>
                                        }
                                        @if (familyYears.Active.People[1].HealthSavingsAccount.AmountToSave > 0) {
                                            <span>@formatMoney(familyYears.Active.People[1].HealthSavingsAccount.AmountToSave) in @familyYears.Active.People[1].PossessiveID HSA (Employer: @formatMoney(familyYears.Active.People[1].HealthSavingsAccount.EmployerContribution))</span><br/>
                                        }
                                        @if (familyYears.Active.People[0].HealthSavingsAccount.AmountToSave == null && familyYears.Active.People[1].HealthSavingsAccount.AmountToSave == null) {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                   break;
                                case "ira-or-roth-ira":
                                    <td>
                                        @if (familyYears.Active.AdjustedGrossIncome != null) {
                                            if (familyYears.Active.PersonCount > 0) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyYears.Active.People[0]))</span><br/>
                                            }
                                            if(familyYears.Active.PersonCount > 1) {
                                                <span>@((MarkupString)GetRecommendedIRAMarkup(familyYears.Active.People[1]))</span><br/>
                                            }
                                        } else {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                    break;
                                case "employer-retirement-funds": 
                                    <td>
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyYears.Active.People[0].EmployerPlan.AmountToSaveForNonMatched) in @familyYears.Active.People[0].PossessiveID 401k</span><br/>
                                        }
                                        @if (familyYears.Active.People[1].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                            <span>@formatMoney(familyYears.Active.People[1].EmployerPlan.AmountToSaveForNonMatched) in @familyYears.Active.People[1].PossessiveID 401k</span><br/>
                                        }
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForNonMatched == null && familyYears.Active.People[1].EmployerPlan.AmountToSaveForNonMatched == null) {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                    break;
                                case "mega-backdoor-roth": 
                                    <td>
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForBackdoorRoth > 0) {
                                            <span>@formatMoney(familyYears.Active.People[0].EmployerPlan.AmountToSaveForBackdoorRoth) in @familyYears.Active.People[0].PossessiveID mega backdoor roth</span><br/>
                                        }
                                        @if (familyYears.Active.People[1].EmployerPlan.AmountToSaveForBackdoorRoth > 0) {
                                            <span>@formatMoney(familyYears.Active.People[1].EmployerPlan.AmountToSaveForBackdoorRoth) in @familyYears.Active.People[1].PossessiveID mega backdoor roth</span><br/>
                                        }
                                        @if (familyYears.Active.People[0].EmployerPlan.AmountToSaveForBackdoorRoth == null && familyYears.Active.People[1].EmployerPlan.AmountToSaveForBackdoorRoth == null) {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                   break;
                                case "medium-interest-debt":
                                    <td>
                                        @if (familyYears.Active.Debts.Count > 0) {
                                                <span>@formatMoney(familyYears.Active.MediumDebts>0?familyYears.Active.MediumDebts:0) in Medium-Interest Debts</span><br/>
                                        } else {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                    break;
                                case "taxable-accounts": 
                                    <td>
                                        "no limit" in Taxable
                                    </td>
                                    break;                                                                   
                                case "low-interest-debt":
                                    <td>
                                        @if (familyYears.Active.Debts.Count > 0) {
                                                <span>@formatMoney(familyYears.Active.LowDebts>0?familyYears.Active.LowDebts:0) in Low-Interest Debts</span><br/>
                                        } else {
                                            <b>@step.title</b>
                                        }
                                    </td>
                                    break;
                                default:
                                    <td style=text-align:center>NYI</td><td></td>
                                    break;
                            }
                        </tr>
                    }
                </table>
            </div>
            
            <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
            <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
        }
        else if (stepPath == "tax-filing-info") {

        }
        else
        {
            @foreach (var step in steps) {
                @if (step.step == stepPath) {
                    var prevStep = step.number >= 1 + 1 ? steps[step.number - 2] : null;
                    var nextStep = step.number <= 10 - 1 ? steps[step.number] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <h3 style="max-width:350px">
                        Annual Saving
                        <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                        <span style=text-align:center>@step.number</span>
                        <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                        <br/>
                    </h3>
                    <h2>
                        @step.title
                    </h2>
                    <hr/>

                    <h4>@((MarkupString)markupize(step.priority))</h4>

                    <p class="article"><b>Summary:</b> @((MarkupString)markupize(step.summary))</p>

                        @switch (step.number) {
                            case 1:
                                <p ><b>Prerequisities:</b></p>
                                <label style=margin-left:25px>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>
                                <br />

                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <label>Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <label>Planned size of emergency fund:</label><br/>
                                    <InputRadioGroup @bind-Value=familyYears.Active.EmergencyFund.TargetMonths>
                                        <InputRadio Value='0'/> None<br/>
                                        <InputRadio Value='1'/> 1 month: @formatMoney(familyYears.Active.EmergencyFund.MonthlyExpenses)<br/>
                                        <InputRadio Value='3'/> 3 months: @formatMoney(familyYears.Active.EmergencyFund.ThreeMonths)<br/>
                                        <InputRadio Value='4'/> Other: <br/>
                                    </InputRadioGroup>
                                    <div style="margin-left:20px">$<input type=text class=dollar @bind-Value="familyYears.Active.EmergencyFund.EFOther" @bind-Value:event="oninput" /></div>
                                    <br/>
                                    <label>Current Size:</label> <span>$</span><input class=dollar type=text @bind-Value="familyYears.Active.EmergencyFund.CurrentBalance" @bind-Value:event="oninput" /><br/><br/>
                                    <label>Amount to Save:</label> @formatMoney(familyYears.Active.EmergencyFund.AmountToSave)<br/>
                                </EditForm><br/>
                                break;
                            case 2:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyYears.Active.TaxFilingStatus>
                                        <option value=None>choose...</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                </EditForm><br/>
                                @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                    var person = familyYears.Active.People[i];
                                    var eligibleId = "eligible-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Employer:</label> <input type=text @bind-Value=person.EmployerPlan.Employer @bind-Value:event=oninput /> (optional and private)<br/>
                                        <label>Annual Salary:</label> $<input type=text class=dollar @bind-Value=person.EmployerPlan.AnnualSalary @bind-Value:event=oninput /><br/>
                                        <br/>
                                        @if (person.EmployerPlan.AnnualSalary != null) {
                                        <InputCheckbox @bind-Value=person.EmployerPlan.Eligible id=@eligibleId /> <label style="display:inline" for=@eligibleId>Eligible for workplace retirement savings</label><br/><br/>
                                        <fieldset disabled=@person.EmployerPlan.NotEligible style='margin-left:20px'>
                                            <label>Match:</label> <input type=text class=percent @bind-Value=person.EmployerPlan.MatchA @bind-Value:event=oninput />%
                                            <label margin-left:30px>for first</label> <input type=text class=percent @bind-Value=person.EmployerPlan.MatchALimit @bind-Value:event=oninput/>%<br/>
                                            <label>Match B:</label> <input type=text class=percent @bind-Value=person.EmployerPlan.MatchB @bind-Value:event=oninput />%
                                            <label margin-left:30px>for next</label> <input type=text class=percent @bind-Value=person.EmployerPlan.MatchBLimit @bind-Value:event=oninput/>%<br/>
                                            <label>Max Match:</label> $<input type=text class=dollar @bind-Value=person.EmployerPlan.MaxMatch @bind-Value:event=oninput/><br/>
                                            <label>Contribution required to get maximum match:</label> <span>@formatMoney(person.EmployerPlan.AmountToSaveForMatch)</span><br/>
                                            <label>Match Amount:</label> <span>@formatMoney(person.EmployerPlan.MatchAmount)</span><br/>
                                        </fieldset>
                                        }
                                    </EditForm><br/>
                                }
                                break;
                            case 4:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>
                                    
                                    <label>Tax Filing Status:</label> <select @bind=familyYears.Active.TaxFilingStatus>
                                                <option value=None>choose...</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing seperately</option>
                                                <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                                </select><br/>
                                </EditForm><br/>
                                @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                    var person = familyYears.Active.People[i];
                                    var haveHDHPid = "eligible-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <label>Eligible for Catchup Contributions (55 or older):</label> @person.FiftyFiveOrOver<br/><br/>
                                        <InputCheckbox @bind-Value=person.HealthSavingsAccount.Eligible id='@haveHDHPid'/> <label for='@haveHDHPid' style="display:inline">Have high deductible health plan</label><br/><br/>
                                        <fieldset disabled=@person.HealthSavingsAccount.NotEligible style='margin-left:20px'>
                                            <label>Individual/Family:</label>   <select @bind=person.HealthSavingsAccount.Family><option value=None>choose...</option><option value=EmployeeOnly>Employee only</option><option>Family</option></select><br/>

                                            <label>Contribution Limit:</label> @formatMoney(person.HealthSavingsAccount.Limit)<br/><br/>

                                            @* @if (person.Employer != null) {
                                                <p>@person.Employer.Company</p>
                                                <label>Employer Contribution Levels:</label> <select>
                                                foreach(var entry in person.Employer.RetirementSavings.HSA.EmployerContribution) {
                                                    <option value="{entry.Value}">{entry.Key}</option>
                                                }
                                                </select><br/>
                                            } *@

                                            <label>@person.FamilyYear.Year Employer Contribution:</label> $<input type=text class=dollar @bind-Value=person.HealthSavingsAccount.EmployerContribution @bind-Value:event=oninput><br/>
                                        </fieldset>
                                        <br/>
                                        <label>Amount to Save:</label> @formatMoney(person.HealthSavingsAccount.AmountToSave)<br/>
                                    </EditForm><br/>
                                }

                                break;
                            case 5:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyYears.Active.TaxFilingStatus>
                                        <option value=None>choose...</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                    <label>@familyYears.Active.Year Adjusted Gross Income:</label> $<input type=text class=dollar @bind-Value=familyYears.Active.AdjustedGrossIncome @bind-Value:event=oninput /><br/>
                                </EditForm><br/>

                                if (familyYears.Active.AdjustedGrossIncome != null) {
                                    @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                        var person = familyYears.Active.People[i];
                                        var eligibleId = "eligible-" + i;
                                        var over50id = "over50-" + i;
                                        var existingIRABalance = "existingIRABalance-" + i;
                                        var tId = "traditional-" + i;
                                        var rId = "roth-" + i;
                                        var traditional = "traditional";
                                        var roth = "roth";
                                        <p><b>Person @(i+1):</b> </p>

                                        <EditForm Model="person" style=margin-left:25px>
                                            <InputCheckbox @bind-Value=person.EmployerPlan.Eligible id='@eligibleId'/> <label for='@eligibleId'>Eligible for workplace retirement savings</label><br/><br/>
                                            <label>Eligible for Catchup Contributions (50 or older):</label> @person.FiftyOrOver<br/><br/>
                                            <InputCheckbox id=@existingIRABalance @bind-Value=person.IRA.HasExistingBalance /> <label for=@existingIRABalance>Has IRA with > $0</label><br/><br/>

                                            <label><i>Recommended Option:</i></label><br/>
                                            @switch(@person.IRATypeRecommendation) {
                                                case IRAType.DeductibleIRAThenBackdoorRoth:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- then carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target="blank">backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.DeductibleIRA:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- if IRA balance was 0 before the contribution, could carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target="blank">backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.Roth:
                                                    <label for=@rId>- Contribute to Roth IRA: $<span>@person.RothIRA.AmountToSave</span></label><br/>
                                                    break;
                                                case IRAType.NondeductibleIRAThenBackdoorRoth:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- then carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target="blank">backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                                case IRAType.NondeductibleIRA:
                                                    <label for=@tId>- Contribute to IRA: $<span>@person.IRA.AmountToSave</span> <span>($@person.IRA.DeductionAllowed Tax Deductible)</span><br/></label><br/>
                                                    <span>- if IRA balance was 0 before the contribution, could carefully evaluate <a href="https://www.bogleheads.org/wiki/Backdoor_Roth_IRA" target="blank">backdoor roth</a> process and do if appropriate (IRA $ -> Roth $)</span><br/><br/>
                                                    break;
                                            }
                                        </EditForm><br/>
                                    }
                                }

                                break;
                            case 6:
                                <p><b>Prerequisities:</b> </p>

                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyYears.Active.TaxFilingStatus>
                                                <option value=None>choose...</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing seperately</option>
                                                <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                                </select><br/>
                                </EditForm><br/>
                                @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                    var person = familyYears.Active.People[i];
                                    var eligibleId = "eligible-" + i;
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <InputCheckbox @bind-Value=person.EmployerPlan.Eligible id=@eligibleId /> <label for=@eligibleId>Eligible for workplace retirement savings</label><br/><br/>

                                        <label>Eligible for Catchup Contributions (50 or older):</label> @person.FiftyOrOver<br/><br/>

                                        <label>@person.FamilyYear.Year 401k Total Contribution Allowed:</label> $<span>@person.EmployerPlan.ContributionAllowed</span><br/>
                                        <label>minus Matched Contribution Allowed (step 2):</label> $<span>@person.EmployerPlan.AmountToSaveForMatch</span><br/>
                                        <label>Amount to Save (unmatched):</label> $<span>@person.EmployerPlan.AmountToSaveForNonMatched</span><br/>
                                    </EditForm><br/>
                                }

                                break;
                            case 7:
                                <p><b>Prerequisities:</b> </p>
                                <EditForm Model="familyYears.Active" style=margin-left:25px>
                                    <label>Target Year:</label> <select @bind=familyYears.CurrentYear><option value=0>2022</option><option value=1>2023</option></select><br/>

                                    <label>Tax Filing Status:</label> <select @bind=familyYears.Active.TaxFilingStatus>
                                        <option value=None>choose...</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                        </select><br/>
                                </EditForm><br/>

                                @for (int i = 0; i < familyYears.Active.PersonCount; i++) {
                                    var person = familyYears.Active.People[i];
                                    <p><b>Person @(i+1):</b> </p>

                                    <EditForm Model="person" style=margin-left:25px>
                                        <InputCheckbox @bind-Value=person.EmployerPlan.Eligible id='eligible'/> <label for='eligible'>Eligible for workplace retirement savings</label><br/><br/>

                                        <fieldset disabled=@person.EmployerPlan.NotEligible style='margin-left:20px'>
                                            <label>@person.FamilyYear.Year Employer Post Tax "Mega Backdoor Roth" Contribution Allowed:</label> <span>$</span><input type=text class=dollar @bind-Value=person.EmployerPlan.AmountToSaveForBackdoorRoth @bind-Value:event=oninput/><br/><br/>
                                        </fieldset>
                                        <label>Amount to Save:</label> <span>$</span><span>@person.EmployerPlan.AmountToSaveForBackdoorRoth</span><br/>
                                    </EditForm><br/>
                                }

                                break;
                            case 9:
                                <label style=margin-left:25px>Amount to Save:</label> <span>no limits</span><br/><br/>
                                break;
                            case 3:
                            case 8:
                            case 10:
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br/><br/>
                                    <EditForm Model="familyYears.Active">
                                        <table>
                                            <thead>
                                            <th style="width:150px"><label>name</label></th>
                                            <th style="width:150px"><label>total $</label></th>
                                            <th style="width:100px"><label>interest %</label></th>
                                            <th><label>rate category</label></th>
                                            <th><label></label></th>
                                            </thead>
                                            @for (var i=0;i<familyYears.Active.Debts.Count;i++) {
                                                var debt = familyYears.Active.Debts[i];
                                                int debtBuffer = i;
                                                <tr>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput placeholder='description'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput placeholder='amount owed'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput placeholder='rate'/></td>
                                                <td><span>@debt.Category</span></td>
                                                <td><button @onclick=@(e=>RemoveDebt(e, debtBuffer))>❌ Debt</button></td>
                                                </tr>
                                            }
                                        </table>
                                        <br/>
                                        <button @onclick=addDebt>➕ Debt</button>

                                        <br/><br/>
                                        <label>Amount to Pay-Off (@step.title):</label> <span>$</span>
                                        @switch (step.number) {
                                            case 3:
                                                @familyYears.Active.HighDebts;
                                                break;
                                            case 8:
                                                @familyYears.Active.MediumDebts;
                                                break;
                                            case 10:
                                                @familyYears.Active.LowDebts;
                                                break;
                                            default:
                                                break;
                                        }
                                        <br/><br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void RemoveDebt(MouseEventArgs e, int debtIndex) {
                                        familyYears.Active.Debts.RemoveAt(debtIndex);
                                    }
                                    void addDebt()
                                    {
                                        familyYears.Active?.Debts.Add(new Debt());
                                    }
                                }
                            
                                break;
                        }
                    <p><b>Approximate Return:</b> @step.returns</p>
                    <p class="article"><b>Details:</b> @((MarkupString)markupize(step.description))</p>

                    <a style='font-size:24pt' href="@prevPage"><span class="oi oi-arrow-left m-2 aria-hidden="true"></span></a>
                    <a style='font-size:24pt;float:right' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {
    public enum Mode {
        normal = 0,
        href,
        text,
    }

    public string formatMoney(int? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }
    public string formatMoney(double? amount) 
    {
        return String.Format("${0:#,0.##}", amount);
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + formatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + formatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + formatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + formatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    [Parameter]
    public string? stepPath { get; set; }

    private Step[]? steps;

    private const string folderName = "/saving/";


    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/saving-steps.json");
    }
}
