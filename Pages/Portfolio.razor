@page "/portfolio"
@page "/portfolio/reload"
@page "/portfolio/{stepPath}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (steps == null || appData == null || familyData == null)
    {
        <p>
            @if(appData.CurrentProfileName==null){<em>No active <a href=/profiles>profile</a>.</em>} 
            else {<em>Loading...</em>}
        </p>
        <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
            @if(appData.CurrentProfileName==null){<span>choose a</span>}else {<span>@appData.CurrentProfileName</span>}</a> profile
        </div>    
    } else {
        if (stepPath == null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            familyData.UpdatePercentages();
            
            <div style=float:left>
                <h4 style="max-width:450px">
                    @pageHeading
                </h4>
            </div>
            <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

            <div style=clear:left>
                <table id=_reviewTable>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            @switch (step.step) {
                                case "people": 
                                    <td>
                                        <a @onclick=toggleTaxFilingStatusEditing class="m-2" >✏️</a>
                                        @((MarkupString)bold("Tax Filing Status:"))
                                        @if (!taxFilingStatusEditing) {
                                            @if (familyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@familyData.TaxFilingStatus</span> }
                                            @if(familyData.PersonCount > 0) {
                                                <span>&nbsp;@getPronoun(familyData.People[0], false)</span>
                                            }
                                            @if(familyData.PersonCount > 1) {
                                                <span>&nbsp;and @getPronoun(familyData.People[1], false)</span>
                                            }
                                            <br/><hr/>
                                        } else {
                                            <select @bind=familyData.TaxFilingStatus>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing seperately</option>
                                                <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                            </select><br/><br/>
                                            
                                            @for (int i = 0; i < familyData.PersonCount; i++) {
                                                var person = familyData.People[i];
                                                int personIndex = i + 1;

                                                <EditForm Model="person" style=margin-left:25px>
                                                    @if(person?.FamilyData?.PersonCount>1){
                                                        <b>Person @personIndex:</b><br/>
                                                        <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                        <option>person @personIndex</option>
                                                        <option>him</option>
                                                        <option>her</option>
                                                        <option>me</option>
                                                        <option>them</option>
                                                    </select><br/>}
                                                </EditForm><br/>
                                            }
                                        }
                                    </td>
                                   break;
                                case "asset-allocation":
                                    <td>
                                        <a @onclick=toggleAssetAllocationEditing  class="m-2" >✏️</a>
                                        @((MarkupString)bold("Desired Asset allocation:"))
                                        @if(!assetAllocationEditing) { 
                                            if (familyData.Stocks != null && familyData.Bonds != null) {
                                                <span>&nbsp;@familyData.Stocks% stocks / @familyData.Bonds% bonds</span><br/>
                                            }
                                            @if (familyData.International != null) {
                                                <span>&nbsp;&nbsp;Desired International allocation: </span>
                                                <span>@familyData.International%</span>
                                            }
                                        } else {
                                            <span>
                                                &nbsp;<input style=width:50px;text-align:right type=text @bind-Value=familyData.Stocks @bind-Value:event=oninput />% stocks
                                                /
                                                <input style=width:50px;text-align:right type=text @bind-Value=familyData.Bonds @bind-Value:event=oninput />% bonds
                                            </span><br/>
                                            <span>&nbsp;&nbsp;Desired International allocation: </span>
                                            <span><input style=width:50px;text-align:right type=text @bind-Value=familyData.International @bind-Value:event=oninput />%</span>
                                        }


                                        <br/>
                                        @if (!double.IsNaN(familyData.ActualStockAllocation) || !double.IsNaN(familyData.ActualBondAllocation) || !double.IsNaN(familyData.ActualInternationalStockAllocation)) {
                                            <br/>
                                            <fieldset>
                                                @((MarkupString)bold("Actual Asset allocation: "))
                                                <span>&nbsp;@if(assetAllocationEditing) {} else {@FormatUtilities.formatPercent(familyData.ActualStockAllocation*100.0)} stocks / @FormatUtilities.formatPercent(familyData.ActualBondAllocation*100.0) bonds</span><br/>
                                                <span>&nbsp;&nbsp;Actual International allocation: </span>
                                                <span>@FormatUtilities.formatPercent(familyData.ActualInternationalStockAllocation*100.0)</span><br/>
                                                <span>&nbsp;&nbsp;Actual Cash allocation: </span>
                                                <span>@FormatUtilities.formatPercent(familyData.ActualCashAllocation*100.0)</span><br/>
                                                @if(familyData.ActualOtherAllocation > 0.0) {
                                                    <span>&nbsp;&nbsp;Actual Unclassified allocation: </span>
                                                    <span>@FormatUtilities.formatPercent(familyData.ActualOtherAllocation*100.0)</span><br/>
                                                }
                                            </fieldset>
                                        }
                                        <hr/>
                                    </td>
                                    break;
                                case "retirement-assets":
                                    <td>
                                        <a @onclick=editAccounts class="m-2" >✏️</a>
                                        @((MarkupString)bold("Current Retirement Assets:"))<br/>
                                        @if (familyData.Accounts.Count > 0) {
                                            if (appData.PortfolioView == null) { appData.PortfolioView = "by Ticker"; }
                                            <label>&nbsp;&nbsp;View:&nbsp;</label><InputSelect @bind-Value=appData.PortfolioView >
                                                <option>by Account</option>
                                                @* <option>by Account (cost basis)</option> *@
                                                <option>by Ticker</option>
                                                <option>by Custodian</option>
                                                <option>by Tax Type</option>
                                            </InputSelect>
                                            @if(showEditAccountHelpers) {
                                                <br/><i>Editing Retirement Assets:</i>
                                                <br/><span>Click on account/investment, in "by Account" view to edit.
                                                <br/>Add/import accounts buttons are below the account list.
                                                <br/>Details on <a href="/updating-portfolio">3 ways to update portfolios</a>.</span>
                                            }

                                            @switch (appData.PortfolioView) {
                                                case "by Account":
                                                case "by Account (cost basis)":
                                                    var showCostBasis = appData.PortfolioView.EndsWith("(cost basis)");
                                                    <table>
                                                        @if (familyData.Accounts.Count > 0) {
                                                            <tr style=vertical-align:bottom>
                                                                <th style=padding-left:8px>Ticker</th>
                                                                <th style=padding-left:8px;text-align:center>Quantity</th>
                                                                <th style=padding-left:8px;text-align:center>Price</th>
                                                                <th style=padding-left:8px;text-align:center>Balance</th>
                                                            </tr>
                                                        }
                                                        @{var accountIndex = 0;}
                                                        @foreach (var account in familyData.Accounts.OrderByDescending(a=>a.Value)) {
                                                            bool alternateRow2 = false;
                                                            int accBuffer = accountIndex;
                                                            accountIndex++;
                                                            <tr style=color:white;background:black; @onclick='@(e=>editAccount(e,accBuffer))'>
                                                                <td colspan=3>
                                                                    @((account.Custodian != null ? account.Custodian + " ": "")+ account.Note)
                                                                    <span>(@account.Identifier</span>
                                                                    @if(!string.IsNullOrEmpty(account.Identifier)) { <span>&nbsp;@account.AccountType)</span> }
                                                                    else { <span>@account.AccountType)</span> }
                                                                </td>
                                                                <td style=text-align:right;padding-left:8px>
                                                                    @FormatUtilities.formatMoney(account.Value)
                                                                </td>
                                                            </tr>
                                                            @if(account.Edit) {
                                                                <tr style=color:white;background:black;padding-left:8px><td colspan=3>
                                                                    <label style=padding-left:8px>Custodian: </label><input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' />
                                                                </td>
                                                                <td >
                                                                    <div style=float:right><button @onclick=doneEditing>done</button></div>
                                                                </td>
                                                                </tr>
                                                                
                                                                <tr style=color:white;background:black;padding-left:8px><td colspan=3>
                                                                    @if (familyData.PersonCount == 2) {
                                                                        <select style=margin-left:8px @ref=accountN @bind=account.Identifier>
                                                                            <option>our</option>
                                                                            @for(int p=0;p<familyData.PersonCount;p++) {
                                                                                <option>@familyData.People[p].PossessiveID</option>
                                                                            }
                                                                        </select>
                                                                    }
                                                                    <select style=margin-left:8px @ref=accountN @bind=account.AccountType>
                                                                        <option>Account Type...</option>
                                                                        <option>401k</option>
                                                                        <option>403b</option>
                                                                        <option>457b</option>
                                                                        <option>529</option>
                                                                        <option>Annuity (Non-Qualified)</option>
                                                                        <option>Annuity (Qualified)</option>
                                                                        <option>HSA</option>
                                                                        <option>Inherited IRA</option>
                                                                        <option>Inherited Roth IRA</option>
                                                                        <option value="Traditional IRA">IRA</option>
                                                                        <option>Life Insurance</option>
                                                                        <option>Refundable Deposit</option>
                                                                        <option>Rollover IRA</option>
                                                                        <option>Roth 401k</option>
                                                                        <option>Roth IRA</option>
                                                                        <option>SEP IRA</option>
                                                                        <option>SIMPLE IRA</option>
                                                                        <option>Solo 401k</option>
                                                                        <option>Taxable</option>
                                                                        <option>Traditional IRA</option>
                                                                    </select>
                                                                    </td>
                                                                    <td >
                                                                        <div style=float:right><button @onclick='@(e=>deleteAccount2(e,accBuffer))' title='delete account'>❌ account</button></div>
                                                                    </td>
                                                                </tr>
                                                                <tr style=color:white;background:black;><td colspan=4>
                                                                    <label style=padding-left:8px>Note: </label><input type=text @bind-value=account.Note @bind-value:event=oninput placeholder='account note'/>
                                                                    </td>
                                                                </tr>
                                                            }

                                                            var investmentIndex = 0;
                                                            foreach (var investment in account.Investments.OrderByDescending(i=>i.Value)) {
                                                                int invBuffer = investmentIndex;
                                                                investmentIndex++;
                                                                string bgColor = alternateRow2 ? "white" : "lightgray";
                                                                if (!account.Edit) {
                                                                    <tr style=background-color:@bgColor @onclick='@(e=>editAccount(e,accBuffer))'>
                                                                        <td style=padding-left:8px title=@investment.Name>@investment.Ticker</td>
                                                                        <td style=text-align:right;padding-left:8px>@FormatUtilities.formatDoubleFourDecimal(investment.Shares)</td>
                                                                        <td style=text-align:right;padding-left:8px>@FormatUtilities.formatMoney(investment.Price)</td>
                                                                        <td style=text-align:right;padding-left:8px>@if(account.Investments.Count>1){@FormatUtilities.formatMoney(investment.Value)}</td>
                                                                    </tr>
                                                                } else {
                                                                    <tr style=background-color:@bgColor>
                                                                        <td style=padding-left:16px>
                                                                            <input type=text style=width:70px @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/></td>
                                                                        <td style=text-align:right;padding-left:8px><input type=text style=width:100px;text-align:right @bind-Value=investment.Shares @bind-Value:event=oninput placeholder='shares'/></td>
                                                                        <td style=text-align:right;padding-left:8px>$<input width= type=text style=width:80px;text-align:right @bind-Value=investment.Price @bind-Value:event=oninput placeholder='price'/></td>
                                                                        <td style=text-align:right;padding-left:8px>
                                                                            $<input type=text style=width:100px;text-align:right @bind-Value=investment.Value @bind-Value:event=oninput placeholder='value'/>
                                                                        </td>
                                                                    </tr>
                                                                    <tr style=background-color:@bgColor>
                                                                        <td style=text-align:right;padding-left:8px colspan=4>
                                                                            <label>Cost Basis: </label>
                                                                            $<input type=text style=width:100px;text-align:right @bind-Value=investment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                                                        </td>
                                                                    </tr>                                                                    
                                                                    <tr style=background-color:@bgColor>
                                                                        <td colspan=4><label style=padding-left:16px>Name:</label><input width= type=text style=width:320px @bind-Value=investment.Name @bind-Value:event=oninput placeholder='name'/></td>
                                                                    </tr>
                                                                    <tr style=background-color:@bgColor>
                                                                        <td colspan=4>
                                                                            <label style=padding-left:16px>Expense Ratio:</label><input width= type=text style=width:100px;text-align:right @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='exp. ratio'/>%
                                                                        </td>
                                                                    </tr>
                                                                    <tr style=background-color:@bgColor>
                                                                        <td colspan=4>
                                                                            <label style=padding-left:16px>Asset Type:</label>
                                                                            <select @bind=investment.AssetType>
                                                                                @foreach (AssetType assetType in (AssetType[]) Enum.GetValues(typeof(AssetType))) {
                                                                                    <option>@assetType</option>
                                                                                }
                                                                            </select>
                                                                            <div style=float:right><button @onclick='@(e=>deleteInvestment2(e,accBuffer, invBuffer))' title='delete investment'>❌</button></div>
                                                                        </td>
                                                                    </tr>
                                                                }

                                                                alternateRow2 = !alternateRow2;
                                                            }
                                                            @if(account.Edit) {
                                                                <tr style=background:black;color:white>
                                                                    <td colspan=4><button @onclick='@(e=>addInvestment2(e,accBuffer))' style=margin-left:20px>➕ Investment</button></td>
                                                                </tr>
                                                            }
                                                        }
                                                        <tr>
                                                            <td colspan=2>
                                                                @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                                {
                                                                    <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                                } else {
                                                                    <a href="updated-quotes">Enable<br/>updates</a>
                                                                }
                                                                <br/>
                                                                <label>Accounts: </label>
                                                                <button @onclick=addAccountInline title='add account'>➕</button>
                                                                <button @onclick=ShowImport title='to import Account info from a CSV/XLSX file'>
                                                                    @if(showImport){<span>Import</span>}
                                                                    ⬆️
                                                                </button>
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px colspan=2>
                                                                <b>@(FormatUtilities.formatMoney(familyData.Value))</b>
                                                                @{var (change2,percentChange2) = portfolioChange();}
                                                                <br/>change: <i>@((MarkupString)FormatUtilities.formatMoney(change2,true))</i>
                                                                <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange2))</i>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                    break;
                                                case "by Ticker":
                                                    bool alternateRow = false;
                                                    <table>
                                                        @if (familyData.Accounts.Count > 0) {
                                                            <tr style=vertical-align:bottom>
                                                                <th style=padding-left:8px>Ticker</th>
                                                                <th style=padding-left:8px;text-align:center>Quantity</th>
                                                                <th style=text-align:right;padding-left:8px>Price</th>
                                                                <th style=padding-left:8px;text-align:center>Balance</th>
                                                            </tr>
                                                        }
                                                        @foreach (var investment in familyData.GroupedInvestments) {
                                                            string bgColor = alternateRow ? "white" : "lightgray";
                                                            <tr style=background-color:@bgColor>
                                                                <td style=padding-left:8px;vertical-align:text-top title=@investment.Name>@investment.Ticker</td>
                                                                <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatDoubleFourDecimal(investment.Shares)</td>
                                                                <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatMoney(investment.Price)<br/>@((MarkupString)FormatUtilities.formatPercent3WithColor(investment.PercentChange))</td>
                                                                <td style=text-align:right;padding-left:8px;vertical-align:text-top>@FormatUtilities.formatMoney(investment.Value)@if(investment.LastUpdated!=null){<br/><span>@investment.LastUpdated?.ToShortTimeString()</span>}</td>
                                                            </tr>
                                                            alternateRow = !alternateRow;
                                                        }
                                                        <tr>
                                                            <td colspan=5><hr/></td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan=2>
                                                                @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                                {
                                                                    <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                                } else {
                                                                    <a href="updated-quotes">Enable<br/>updates</a>
                                                                }
                                                            </td>                                                            
                                                            <td style=text-align:right;padding-left:8px colspan=2>
                                                                <b>@(FormatUtilities.formatMoney(familyData.Value))</b>
                                                                @{var (change,percentChange) = portfolioChange();}
                                                                <br/>change: <i>@((MarkupString)FormatUtilities.formatMoney(change,true))</i>
                                                                <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange))</i>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                    break;
                                                case "by Custodian":
                                                    <table>
                                                        @if (familyData.Accounts.Count > 0) {
                                                            <tr style=vertical-align:bottom>
                                                                <th style=padding-left:8px>Custodian</th>
                                                                <th style=padding-left:8px;text-align:center>Balance</th>
                                                            </tr>
                                                        }
                                                        @{var groupByCustodian = familyData.Accounts
                                                            .GroupBy(a => a.Custodian)
                                                            .Select(g => new
                                                            {
                                                                Custodian = g.Key,
                                                                Value = g.Sum(a => a.Value)
                                                            })
                                                            .OrderByDescending(g => g.Value);
                                                        }
                                                        @foreach (var group in groupByCustodian) {
                                                                <tr style=color:white;background:black>
                                                                <td>
                                                                    @group.Custodian
                                                                </td>
                                                                <td style=text-align:right;padding-left:8px>
                                                                    @FormatUtilities.formatMoney(group.Value)
                                                                </td>
                                                            </tr>
                                                            bool alternateRow4 = false;
                                                            List<Investment> groupInvestments = new();
                                                            @foreach (var account in familyData.Accounts.OrderByDescending(a=>a.Value))
                                                            {
                                                                if (account.Custodian == group.Custodian) {
                                                                    string bgColor = alternateRow4 ? "white" : "lightgray";
                                                                    <tr style=background:@bgColor;>
                                                                        <td colspan=1>&nbsp;&nbsp;
                                                                            @((account.Custodian != null ? account.Custodian + " ": "")+ account.Note)
                                                                            <span>(@account.Identifier</span>
                                                                            @if(!string.IsNullOrEmpty(account.Identifier)) { <span>&nbsp;@account.AccountType)</span> }
                                                                            else { <span>@account.AccountType)</span> }
                                                                        </td>
                                                                        <td style=text-align:right;padding-left:8px>
                                                                            @FormatUtilities.formatMoney(account.Value)
                                                                        </td>
                                                                    </tr>
                                                                    alternateRow4 = !alternateRow4;
                                                                    foreach (var investment in account.Investments)
                                                                    {
                                                                        groupInvestments.Add(investment);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        <tr>
                                                            <td>
                                                                @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                                {
                                                                    <button @onclick=@refreshPrices title=Refresh style=min-width:80px;>@refreshButtonText</button>
                                                                } else {
                                                                    <a href="updated-quotes">Enable<br/>updates</a>
                                                                }
                                                            </td>
                                                            <td style=text-align:right;padding-left:8px><hr/><b>@(FormatUtilities.formatMoney(familyData.Value))</b></td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan=2 style=text-align:right;padding-left:8px>
                                                                @{var (change4,percentChange4) = portfolioChange();}
                                                                change: <i>@((MarkupString)FormatUtilities.formatMoney(change4,true))</i>
                                                                <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange4))</i>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                    break;                                                    
                                                case "by Tax Type":
                                                    var showFootnotes = new bool[4];
                                                    <table>
                                                        @if (familyData.Accounts.Count > 0) {
                                                            <tr style=vertical-align:bottom>
                                                                <th>Tax-Type</th>
                                                                <th style=padding-left:8px;text-align:center>Unrealized<br/>Capital Gains</th>
                                                                <th style=padding-left:8px;text-align:center>Balance</th>
                                                            </tr>
                                                        }
                                                        @{var groupByTaxType = familyData.Accounts
                                                            .GroupBy(a => a.TaxType)
                                                            .Select(g => new
                                                            {
                                                                TaxType = g.Key,
                                                                Value = g.Sum(a => a.Value),
                                                                CostBasis = g.Sum(a => a.CalculateCostBasis())
                                                            })
                                                            .OrderByDescending(g => g.Value);
                                                            bool alternateRow3 = false;
                                                        }
                                                        @foreach (var group in groupByTaxType) {
                                                            string bgColor = alternateRow3 ? "white" : "lightgray";
                                                            <tr style=background-color:@bgColor>
                                                                <td>@group.TaxType
                                                                    @switch (group.TaxType)
                                                                    {
                                                                        case "Pre-Tax":
                                                                            <sub>1</sub>
                                                                            showFootnotes[0] = true;
                                                                            break;
                                                                        case "Taxable":
                                                                            <sub>2</sub>
                                                                            showFootnotes[1] = true;
                                                                            break;
                                                                        case "Post-Tax":
                                                                            <sub>3</sub>
                                                                            showFootnotes[2] = true;
                                                                            break;
                                                                        case "For Beneficiaries (POD)":
                                                                        case "Refundable Deposits":
                                                                        case "Education Savings":
                                                                        default:
                                                                            <sub>4</sub>
                                                                            showFootnotes[3] = true;
                                                                            break;
                                                                    }
                                                                </td>
                                                                <td style=text-align:right;padding-left:8px>
                                                                    @if (!group.TaxType.EndsWith("-Tax")) {
                                                                        @FormatUtilities.formatMoney(group.Value - group.CostBasis)
                                                                    }
                                                                </td>
                                                                <td style=text-align:right;padding-left:8px>@FormatUtilities.formatMoney(group.Value)</td>
                                                            </tr>
                                                            alternateRow3 = !alternateRow3;
                                                        }
                                                        <tr>
                                                            <td colspan=4 style=padding-left:8px;max-width:150px>

                                                            </td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan=2>
                                                                @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                                {
                                                                    <button @onclick=@refreshPrices title='Refresh Quotes' style=min-width:80px;>@refreshButtonText</button>
                                                                } else {
                                                                    <a href="updated-quotes">Enable<br/>updates</a>
                                                                }
                                                            </td>
                                                            <td colspan=2 style=text-align:right;padding-left:8px><hr/><b>@(FormatUtilities.formatMoney(familyData.Value))</b></td>
                                                        </tr>
                                                        <tr>
                                                            <td colspan=4 style=text-align:right;padding-left:8px>
                                                                @{var (change3,percentChange3) = portfolioChange();}
                                                                change: <i>@((MarkupString)FormatUtilities.formatMoney(change3,true))</i>
                                                                <br/>% change: <i>@((MarkupString)FormatUtilities.formatPercent3WithColor(percentChange3))</i>
                                                            </td>
                                                        </tr>
                                                    </table><br/>
                                                        <span>Current Tax law:</span><br/>
                                                        @if(showFootnotes[0]) {<span><sub>1</sub>- total sale treated as Earned Income</span><br/>}
                                                        @if(showFootnotes[1]) {<span><sub>2</sub>- profits of sale treated as Capital Gains</span><br/>}
                                                        @if(showFootnotes[2]) {<span><sub>3</sub>- no taxes on sale</span><br/>}
                                                        @if(showFootnotes[3]) {<span><sub>4</sub>- description needs to be written</span><br/>}
                                                    break;
                                                default:
                                                    break;
                                            }
                                            <br/>
                                            <fieldset>
                                                @((MarkupString)bold("Weighted Expense Ratio: "))
                                                <span>&nbsp;@FormatUtilities.formatPercent3(familyData.OverallER) or @FormatUtilities.formatMoney(familyData.ExpensesTotal) /year</span>
                                                @if (familyData.InvestmentsMissingER > 0){<br/><span>&nbsp;(@familyData.InvestmentsMissingER investment(s) missing ER)</span><br/>}
                                            </fieldset>
                                        }
                                        @if (appData.FamilyData.Accounts.Count == 0) {
                                            <label>accounts: </label>
                                            <button @onclick=addAccountInline title='add account'>➕</button>
                                            <button @onclick=ShowImport title='to import Account info from a CSV/XLSX file'>
                                                @if(showImport){<span>Hide</span>}
                                                ⬆️
                                            </button>
                                        }

                                        <hr/>
                                    </td>
                                    break;                                
                                default:
                                    break;
                            }
                        </tr>
                    }          
                </table>
                <p>Consider getting a <a href="portfolio-review">Portfolio Review</a> via Bogleheads.org</p>
            </div>
            
            <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
        }
        else
        {
            @foreach (var step in steps) {
                @if (step.step == stepPath) {
                    var firstStepIndex = 0;
                    var lastStepIndex = steps.Length-1;
                    var prevStep = step.number - 2 >= firstStepIndex ? steps[step.number - 2] : null;
                    var nextStep = step.number <= lastStepIndex ? steps[step.number] : null;
                    string prevPage = folderName + prevStep?.step;
                    string nextPage = folderName + nextStep?.step;

                    <div style=float:left>
                        <h4 style="max-width:450px">
                            <NavLink href=@pagePath>@pageHeading</NavLink> &gt; @step.title (@step.number)<br/>
                        </h4>
                        <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a>
                        <hr/>
                    </div>
                    <div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

                    <p class="article" style=clear:left>@((MarkupString)markupize(step.summary))</p>

                        @switch (step.step) {
                            case "emergency-fund":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Current Emergency Fund:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.CurrentBalance" @bind-Value:event="oninput"/><br/><br/>
                                    <label>➗ Monthly Expenses:</label> <span>$</span><input class=dollar type=text @bind-Value="familyData.EmergencyFund.MonthlyExpenses" @bind-Value:event="oninput" /><br/><br/>
                                    <hr style=width:300px />
                                    <div style=text-align:right;width:275px>@familyData.EmergencyFund.CurrentMonthsString months</div>
                                    @if(familyData.EmergencyFund.CurrentMonths == null && familyData.EmergencyFund.CurrentBalance != null) {
                                        <br/><br/>
                                        <InputCheckbox id=ShowDollars @bind-Value=familyData.EmergencyFund.ShowDollars /> <label for=ShowDollars>Only publish amount, since I haven't yet estimated monthly expenses</label><br/>
                                        <span>(Months is MORE useful than a dollar amount.)</span>
                                    }
                                </EditForm><br/>
                                break;
                            case "debts":
                                <p><b>Worksheet:</b> </p>
                                <div>
                                    <i>list of debts (all interest rates):</i><br/><br/>

                                    @if (familyData.DebtFree == TriState.ChoiceNeeded || familyData.DebtFree == TriState.True) {
                                        <label style="display:inline" for=debtFree>Debt free:</label> <InputSelect @bind-Value=familyData.DebtFree id=debtFree>
                                        @foreach (var option in Enum.GetValues<TriState>()) {
                                            <option value="@option">@option</option>
                                        }
                                        </InputSelect><br/>
                                        <br/>
                                    }

                                    <EditForm Model="familyData">

                                        <table>
                                            <thead>
                                            <th style="width:150px"><label>name</label></th>
                                            <th style="width:150px"><label>total $</label></th>
                                            <th style="width:100px"><label>interest %</label></th>
                                            <th>rate</th>
                                            <th><label></label></th>
                                            </thead>
                                            @for (var i=0;i<familyData.Debts.Count;i++) {
                                                var debt = familyData.Debts[i];
                                                int debtBuffer = i;
                                                <tr>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Name @bind-Value:event=oninput placeholder='description'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Total @bind-Value:event=oninput placeholder='amount owed'/></td>
                                                <td><input style=width:100% type=text class=dollar @bind-Value=debt.Rate @bind-Value:event=oninput placeholder='rate'/></td>
                                                <td><span>@debt.Category</span></td>
                                                <td><button @onclick=@(e=>RemoveDebt(e, debtBuffer))>❌ Debt</button></td>
                                                </tr>
                                            }
                                        </table>
                                        <br/>
                                        <button @onclick=addDebt>➕ Debt</button>

                                        <br/><br/>
                                        <label>Amounts to Pay-Off (@step.title):</label><br/><br/>
                                        High Interest: @FormatUtilities.formatMoney(familyData.HighDebts)<br/>
                                        Medium Interest: @FormatUtilities.formatMoney(familyData.MediumDebts)<br/>
                                        Low Interest: @FormatUtilities.formatMoney(familyData.LowDebts)<br/>
                                        Unknown Interest: @FormatUtilities.formatMoney(familyData.UnknownDebts)<br/>
                                        <br/>
                                    </EditForm>
                                </div>

                                @code{
                                    void RemoveDebt(MouseEventArgs e, int debtIndex) {
                                        familyData.Debts.RemoveAt(debtIndex);
                                    }
                                    void addDebt()
                                    {
                                        familyData?.Debts.Add(new Debt());
                                    }
                                }
                                break;
                            case "tax-status":
                                <p ><b>Worksheet:</b></p>
                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Tax Filing Status:</label>
                                    <select @bind=familyData.TaxFilingStatus>
                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                        <option>Single</option>
                                        <option value=MarriedFilingJointly>Married filing jointly</option>
                                        <option value=MarriedFilingSeperately>Married filing seperately</option>
                                        <option value=MarriedFilingSeperatelyAndLivingApart>Married filing seperately (and living apart)</option>
                                        <option value=HeadOfHousehold>Head of Household</option>
                                    </select><br/>
                                    <br/>
    
                                    <label>Target Year:</label> <select @bind=familyData.Year><option>2022</option><option>2023</option></select><br/>

                                    @foreach (var taxFiler in familyData.AppData.IRSData.TaxRateData.TaxData.TaxFilers)
                                    {
                                        bool isMatch = false;
                                        switch (familyData.TaxFilingStatus.ToString())
                                        {
                                            case "MarriedFilingSeperatelyAndLivingApart":
                                                isMatch = taxFiler.TaxFilingStatus == "MarriedFilingSeperately";
                                                break;
                                            default:
                                                isMatch = taxFiler.TaxFilingStatus == familyData.TaxFilingStatus.ToString();
                                                break;
                                        }
                                        if (isMatch)
                                        {
                                            string? lastBracket = null;
                                            int? lastStartAmount = null;

                                            <br/>
                                            <InputRadioGroup @bind-Value=familyData.FederalMarginalTaxBracket>
                                                <label>Tax Bracket (@familyData.TaxFilingStatus):</label><br/>
                                                <table style="margin-left:20px">
                                                    <tr><th></th><th></th></tr>
                                                @foreach (var taxBracket in taxFiler.TaxBrackets)
                                                {
                                                    if (lastBracket != null) {
                                                        var elName = "bracket"+lastBracket.Substring(0,lastBracket.Length-2);
                                                        <tr><td><InputRadio id=@elName Value='@lastBracket'/>&nbsp;<label for=@elName>@lastBracket</label></td><td style=padding-left:30px>@(lastStartAmount==1?"Up":FormatUtilities.formatMoney(lastStartAmount)) to @FormatUtilities.formatMoney(taxBracket.StartAmount)</td></tr>
                                                    }
                                                    lastBracket = taxBracket.Rate;
                                                    lastStartAmount = taxBracket.StartAmount + 1;
                                                }
                                                    <tr><td><InputRadio Value='@lastBracket'/>&nbsp;@lastBracket</td><td style=padding-left:30px>Over @FormatUtilities.formatMoney(lastStartAmount-1)</td></tr>
                                                </table>
                                            </InputRadioGroup>
                                        }
                                    }

                                    <br/><label>State of Residence:</label>
                                    <select @bind=familyData.StateOfResidence>
                                        <option value="ChoiceNeeded">ChoiceNeeded...</option><option value="AL">Alabama (AL)</option><option value="AK">Alaska (AK)</option><option value="AS">American Samoa (AS)</option><option value="AZ">Arizona (AZ)</option><option value="AR">Arkansas (AR)</option><option value="CA">California (CA)</option><option value="CO">Colorado (CO)</option><option value="CT">Connecticut (CT)</option><option value="DE">Delaware (DE)</option><option value="DC">District of Columbia (DC)</option><option value="FL">Florida (FL)</option><option value="GA">Georgia (GA)</option><option value="GU">Guam (GU)</option><option value="HI">Hawaii (HI)</option><option value="ID">Idaho (ID)</option><option value="IL">Illinois (IL)</option><option value="IN">Indiana (IN)</option><option value="IA">Iowa (IA)</option><option value="KS">Kansas (KS)</option><option value="KY">Kentucky (KY)</option><option value="LA">Louisiana (LA)</option><option value="ME">Maine (ME)</option><option value="MD">Maryland (MD)</option><option value="MA">Massachusetts (MA)</option><option value="MI">Michigan (MI)</option><option value="MN">Minnesota (MN)</option><option value="MS">Mississippi (MS)</option><option value="MO">Missouri (MO)</option><option value="MT">Montana (MT)</option><option value="NE">Nebraska (NE)</option><option value="NV">Nevada (NV)</option><option value="NH">New Hampshire (NH)</option><option value="NJ">New Jersey (NJ)</option><option value="NM">New Mexico (NM)</option><option value="NY">New York (NY)</option><option value="NC">North Carolina (NC)</option><option value="ND">North Dakota (ND)</option><option value="CM">Northern Mariana Islands (CM)</option><option value="OH">Ohio (OH)</option><option value="OK">Oklahoma (OK)</option><option value="OR">Oregon (OR)</option><option value="PA">Pennsylvania (PA)</option><option value="PR">Puerto Rico (PR)</option><option value="RI">Rhode Island (RI)</option><option value="SC">South Carolina (SC)</option><option value="SD">South Dakota (SD)</option><option value="TN">Tennessee (TN)</option><option value="TX">Texas (TX)</option><option value="VI">U.S. Virgin Islands (VI)</option><option value="UT">Utah (UT)</option><option value="VT">Vermont (VT)</option><option value="VA">Virginia (VA)</option><option value="WA">Washington (WA)</option><option value="WV">West Virginia (WV)</option><option value="WI">Wisconsin (WI)</option><option value="WY">Wyoming (WY)</option>
                                    </select>
                                    <br/><br/>

                                    <label>State Marginal Tax Rate:</label> <input style=width:50px;text-align:right class=dollar type=text @bind-Value="familyData.StateMarginalTaxBracket" @bind-Value:event="oninput"/>%<br/><br/>
                                    <br/><br/>
                                </EditForm>
                                <br/>
                                break;
                            case "people":
                                <p><b>Worksheet:</b> </p>

                                break;
                            case "asset-allocation":
                                <p><b>Worksheet:</b> </p>

                                <EditForm Model="familyData" style=margin-left:25px>
                                    <label>Desired Asset Allocation:</label><br/>
                                    <label>Stock:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.Stocks @bind-Value:event=oninput />%<br/>
                                    <label>Bond:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.Bonds @bind-Value:event=oninput />%<br/>
                                    <hr/>
                                    <label>Desired International allocation (% of Stock):</label><br/>
                                    <label>International:</label> <input style=width:50px;text-align:right type=text @bind-Value=familyData.International @bind-Value:event=oninput />%<br/>
                                </EditForm><br/>
                                break;
                            case "available-funds":
                                <td>
                                    <label>Account</label>
                                    <select @bind=currentAccountIndex>
                                        <option>Choose Account...</option>
                                        @for (int i=0;i<familyData.Accounts.Count;i++) {
                                            var account = familyData.Accounts[i];
                                            <option value=@i>
                                                @account.FullName
                                            </option>
                                        }
                                    </select>
                                    <br/>

                                     @if(currentAccountIndex != null && currentAccountIndex != "Choose Account...") {
                                        int index = int.Parse(currentAccountIndex);
                                        var currentAccount = familyData.Accounts[index];
                                        for (int i=0;i < currentAccount.AvailableFunds.Count; i++) {
                                            var investment = currentAccount.AvailableFunds[i];
                                            int invBuffer = i;
                                            <div style=margin-top:10px;margin-left:80px;padding-left:3em;text-indent:-3em;>
                                                <button @onclick='@(e=>deleteAvailableFund(e,currentAccount,invBuffer))'>❌</button>
                                                <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                            </div>
                                            <div style=margin-left:85px>
                                                <input type=text @bind-Value=investment.Name @bind-Value:event=oninput placeholder='investment fullname' />
                                                &nbsp;(
                                                    <input style="width:70px" type=text @bind-Value=investment.ExpenseRatio @bind-Value:event=oninput placeholder='expense ratio'/>
                                                %)
                                            </div>
                                        }
                                        <br/>
                                        <button style=margin-left:80px @onclick='@(e=>addAvailableFund(e,currentAccount))'>➕</button>
                                    }
                                </td>
                                break;
                            case "additional-background":
                                <td>
                                    <textarea style=width:600px;height:300px @bind-Value=familyData.AdditionalBackground @bind-Value:event=oninput placeholder='additional background information'>
                                        @familyData.AdditionalBackground
                                    </textarea>
                                </td>
                                break;
                            case "questions":
                                <td>
                                    @for (int i = 0; i < familyData.Questions.Count; i++) {
                                        int iBuffer = i;
                                        <label >@(i+1 + ". ")</label> 
                                        <textarea style=width:500px;vertical-align:top @bind-Value=familyData.Questions[iBuffer] @bind-Value:event="oninput" placeholder="ask question">
                                            @familyData.Questions[iBuffer]
                                        </textarea>
                                        <br/>
                                        <br/>
                                    }
                                    <br/>
                                        <button style=margin-left:80px @onclick=addQuestion>➕ Question</button>
                                    <br/>
                                    @code {
                                        void addQuestion() {
                                            familyData.Questions.Add("");
                                        }
                                    }
                                </td>
                                break;                                
                            case "retirement-assets":
                                @if(appData.ImportResult == null) {
                                    <u><b>Current Retirement Assets:</b></u><br/>

                                    var accountIndex = 0;
                                    @foreach (var account in familyData.Accounts) {
                                        int accBuffer = accountIndex;
                                        accountIndex++;
                                        var accountId = "account"+accBuffer;
                                        <br/>
                                        <div style=padding-left:3em;text-indent:-3em;>
                                            <button @onclick='@(e=>deleteAccount(e,accBuffer))'>❌</button>
                                            @if (familyData.PersonCount == 2) {
                                            <select @ref=accountN @bind=account.Identifier>
                                                <option>our</option>
                                                @for(int p=0;p<familyData.PersonCount;p++)
                                                {
                                                    <option>@familyData.People[p].PossessiveID</option>
                                                }
                                            </select>
                                            }
                                            <select @ref=accountN @bind=account.AccountType>
                                                <option>Account Type...</option>
                                                <option>401k</option>
                                                <option>403b</option>
                                                <option>457b</option>
                                                <option>529</option>
                                                <option>Annuity (Non-Qualified)</option>
                                                <option>Annuity (Qualified)</option>
                                                <option>HSA</option>
                                                <option>Inherited IRA</option>
                                                <option>Inherited Roth IRA</option>
                                                <option value="Traditional IRA">IRA</option>
                                                <option>Life Insurance</option>
                                                <option>Refundable Deposit</option>
                                                <option>Rollover IRA</option>
                                                <option>Roth 401k</option>
                                                <option>Roth IRA</option>
                                                <option>SEP IRA</option>
                                                <option>SIMPLE IRA</option>
                                                <option>Solo 401k</option>
                                                <option>Taxable</option>
                                                <option>Traditional IRA</option>
                                            </select>
                                            <span> at <input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' /></span><br/>
                                            <span><label for=@accountId>Note: </label><input id=@accountId type=text @bind-value=account.Note @bind-value:event=oninput placeholder='account note'/></span>
                                        </div>
                                        
                                        investmentIndex = 0;
                                        @foreach (var investment in account.Investments) {
                                            int invBuffer = investmentIndex;
                                            investmentIndex++;
                                            <div style=margin-top:10px;margin-left:20px;padding-left:3em;text-indent:-3em;>
                                                <button @onclick='@(e=>deleteInvestment(e,accBuffer,invBuffer))'>❌</button>
                                                <input @ref=tickerN style="width:70px;text-transform: uppercase;" type=text @bind-Value=investment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                                $<input style="width:140px" type=text @bind-Value=investment.Price @bind-Value:event=oninput placeholder='' />
                                                ✖️ <input style="width:140px" type=text @bind-Value=investment.Shares @bind-Value:event=oninput placeholder='' /> shares
                                                🟰 $<input style=width:100px type=text @bind-Value=investment.Value @bind-Value:event=oninput placeholder='value'/>
                                                <br/>
                                            </div>
                                        }
                                        <button style=margin-left:20px @onclick='@(e=>addInvestment(e,accBuffer))'>➕</button>
                                        <hr style=margin-left:40px/>
                                        <div style=margin-left:40px>Account Total: @FormatUtilities.formatMoney(account.Value)</div>
                                    }
                                    <br/>
                                    <hr/>
                                    <div>Portfolio Size: @FormatUtilities.formatMoney(familyData.Value)</div>
                                    <br/>
                                    <div>
                                        <button @onclick=addAccount>➕ Account</button> to manually enter another Account's info.
                                    </div>
                                    <br/>
                                    <div>
                                        <button @onclick=ShowImport>
                                            @if(showImport){<span>Hide</span>}
                                            Import Accounts
                                        </button> to import Account info from a CSV/XLSX file.
                                        @if(showError){<br/><br/><span style=color:red>ERROR: must be a CSV file from Ameriprise, eTrade, Fidelity, Merrill Edge, Schwab, or Vanguard or a XLSX file from Morgan Stanley.</span><br/>}
                                        @if(showImport){
                                            <br/>
                                            <fieldset style=margin-left:20px>
                                                <span>Download portfolio details from custodian website, and then "choose file", to import: </span><br/>
                                                <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
                                                <ul>
                                                    <li>Currently supports importing Ameriprise, eTrade, Fidelity, Merrill Edge, Morgan Stanley, Schwab, or Vanguard data files</li>
                                                    <li>If your custodian's format isn't supported yet, we're happy to try to add support. If you can share your custodian's downloaded CSV file format (feel free to anonymize/change the data), please email it to suggestions@bogle.tools with details on what custodian it is from.</li>
                                                    <li>CAUTION: only share personal info (like these files) to apps worthy of your trust!</li>
                                                </ul>
                                            </fieldset>
                                        }
                                    </div>
                                    <br/>

                                    @if(familyData.Value > 0) {
                                    <br/>
                                    <div>Preferred technique to represent the approximate size of your total portfolio (in <NavLink href="/portfolio">portfolio review</NavLink>):</div>
                                    <InputRadioGroup @bind-Value=familyData.ValueStyle>
                                        <InputRadio id=rounded Value='0' /> <label for=rounded>@FormatUtilities.formatMoneyThousands(familyData.Value)</label> <br/>
                                        <InputRadio id=estimate Value='1' /> <label for=estimate>@estimatePortfolio(familyData)</label> <br/>
                                        <InputRadio id=dollar Value='2' /> <label for=dollar>@FormatUtilities.formatMoney(familyData.Value)</label> <br/>
                                    </InputRadioGroup>
                                    }
                                } else {
                                    <EditForm Model=@appData.ImportResult>
                                        <div>Data Files Contains These Accounts/Investments - Choose Which to Import:</div>
                                        <br/>
                                        <button @onclick=finishImport>Import selected accounts</button>
                                        <button @onclick=cancelImport>Cancel Import</button>
                                        <br/>
                                        <br/>

                                        @foreach (var error in appData.ImportResult.Errors)
                                        {
                                            <div style=font-weight:bold>Error: @error.Exception.Message</div>
                                            @if(error.Exception.InnerException!=null){ <div>Failure location: <br/>@error.Exception.InnerException.StackTrace<br/><br/></div>};
                                        }

                                        <div><InputCheckbox @bind-Value=appData.ImportResult.ImportUpdatedAccounts /> UPDATE these EXISTING accounts in your data file:</div>
                                        @foreach (var account in appData.ImportResult.UpdatedAccounts)
                                        {
                                            <div style=margin-left:40px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)</div>
                                            @foreach (var investment in account.Investments)
                                            {
                                                <div style=margin-left:80px>@investment.Name (@investment.Ticker) @(investment.Shares) shares =&gt; @FormatUtilities.formatMoney(investment.Value)</div>
                                            }
                                        }

                                        <br/>
                                        <div><InputCheckbox @bind-Value=appData.ImportResult.ImportNewAccounts /> ADD these NEW accounts in your data file:</div>
                                        @foreach (var account in appData.ImportResult.NewAccounts)
                                        {
                                            <div style=margin-left:40px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)</div>
                                            @foreach (var investment in account.Investments)
                                            {
                                                <div style=margin-left:80px>@investment.Name (@investment.Ticker) @(investment.Shares) shares =&gt; @FormatUtilities.formatMoney(investment.Value)</div>
                                            }
                                        }
                                    </EditForm>
                                }
                                break;
                            case "contributions":
                                <div>
                                    Edit Savings Contribution at: <a href="/saving">/saving</a><br/><br/>

                                    <span>
                                        @((MarkupString)boldUnderline("Contributions:"))
                                    </span><br/>
                                    @if (familyData.PlannedSavings > 0) {
                                        <span>Planned savings: @FormatUtilities.formatMoney(familyData.PlannedSavings)</span><br/><br/>
                                    }

                                    <span>Prioritized Investments:</span><br/>

                                    @if (familyData.EmergencyFund.AmountToSave > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.EmergencyFund.AmountToSave) in Emergency Fund</span><br/>
                                        @((MarkupString)checkTotal(familyData.EmergencyFund.AmountToSave))
                                    }
                                    @if (familyData.PersonCount > 0 && familyData.People[0].EmployerPlan.AmountToSaveForMatch > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[0].EmployerPlan.AmountToSaveForMatch) in @familyData.People[0].PossessiveID 401k (Match: @FormatUtilities.formatMoney(familyData.People[0].EmployerPlan.MatchAmount))</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[0].EmployerPlan.AmountToSaveForMatch))
                                    }
                                    @if (familyData.PersonCount > 1 && familyData.People[1].EmployerPlan.AmountToSaveForMatch > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[1].EmployerPlan.AmountToSaveForMatch) in @familyData.People[1].PossessiveID 401k (Match: @FormatUtilities.formatMoney(familyData.People[1].EmployerPlan.MatchAmount))</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[1].EmployerPlan.AmountToSaveForMatch))
                                    }
                                    @if (familyData.HighDebts > 0) {
                                        <span>@familyData.HighDebts in High Debts</span><br/>
                                        @((MarkupString)checkTotal(familyData.HighDebts))
                                    }
                                    @if (familyData.PersonCount > 0  && (familyData.People[0].EmployerBenefits.Complete || familyData.People[0].EmployerPlan.AnnualSalary == 0 || familyData.People[0].HealthSavingsAccount.EligibleForHSA  || familyData.People[0].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[0].HealthSavingsAccount.AmountToSave > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[0].HealthSavingsAccount.AmountToSave) in @familyData.People[0].PossessiveID HSA (Employer: @FormatUtilities.formatMoney(familyData.People[0].HealthSavingsAccount.EmployerContribution))</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[0].HealthSavingsAccount.AmountToSave))
                                    }
                                    @if (familyData.PersonCount > 1  && (familyData.People[1].EmployerBenefits.Complete || familyData.People[1].EmployerPlan.AnnualSalary == 0 || familyData.People[1].HealthSavingsAccount.EligibleForHSA  || familyData.People[1].HealthSavingsAccount.EligibleForHSACatchUpOnly) && familyData.People[1].HealthSavingsAccount.AmountToSave > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[1].HealthSavingsAccount.AmountToSave) in @familyData.People[1].PossessiveID HSA (Employer: @FormatUtilities.formatMoney(familyData.People[1].HealthSavingsAccount.EmployerContribution))</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[1].HealthSavingsAccount.AmountToSave))
                                    }
                                    @if (familyData.AdjustedGrossIncome != null) {
                                        if (familyData.PersonCount > 0) {
                                            <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[0]))</span><br/>
                                            @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyData.People[0])))
                                        }
                                        if(familyData.PersonCount > 1) {
                                            <span>@((MarkupString)GetRecommendedIRAMarkup(familyData.People[1]))</span><br/>
                                            @((MarkupString)checkTotal(GetRecommdedIRAAmount(familyData.People[1])))
                                        }
                                    }
                                    @if (familyData.PersonCount > 0 && familyData.People[0].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[0].PossessiveID 401k</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[0].EmployerPlan.AmountToSaveForNonMatched))
                                    }
                                    @if (familyData.PersonCount > 1 && familyData.People[1].EmployerPlan.AmountToSaveForNonMatched > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched) in @familyData.People[1].PossessiveID 401k</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[1].EmployerPlan.AmountToSaveForNonMatched))
                                    }
                                    @if (familyData.PersonCount > 0 && familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[0].PossessiveID mega backdoor roth</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[0].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                    }
                                    @if (familyData.PersonCount > 1 && familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit) in @familyData.People[1].PossessiveID mega backdoor roth</span><br/>
                                        @((MarkupString)checkTotal(familyData.People[1].EmployerBenefits.MegaBackdoorRoth.ContributionLimit))
                                    }
                                    @if (familyData.MediumDebts > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.MediumDebts) in Medium Debts</span><br/>
                                        @((MarkupString)checkTotal(familyData.MediumDebts))
                                    }
                                    @if (familyData.PlannedSavings > runningTotal) {
                                        <span>@FormatUtilities.formatMoney(familyData.PlannedSavings-runningTotal) in Taxable</span><br/>
                                        @((MarkupString)checkTotal(familyData.PlannedSavings-runningTotal))
                                    } else {
                                        <span>@FormatUtilities.formatMoney(0) in Taxable</span><br/>
                                    }
                                    @if (familyData.LowDebts > 0) {
                                        <span>@FormatUtilities.formatMoney(familyData.LowDebts) in Low Debts</span><br/>
                                        @((MarkupString)checkTotal(familyData.LowDebts))
                                    }
                                    <br/>
                                </div>
                                break;
                        }
                    <p>
                        @if(step.description != "") {
                            <b>Details:</b> <span>@((MarkupString)markupize(step.description))</span>
                        }
                    </p>

                    <a style='font-size:24pt' href="@nextPage"><span class="oi oi-arrow-right m-2 aria-hidden="true"></span></a><br/>
                }
            }
        }
    }

@code {

    async void doneEditing()
    {
        var accounts = familyData.Accounts;
        foreach (var account in accounts) {
            account.Edit = false;
        }
        
        accountIndexEditing = null;

        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    void editAccount(MouseEventArgs e, int index)
    {
        var accounts = familyData.Accounts.OrderByDescending(a=>a.Value).ToList();
        if (accountIndexEditing != null) {
            accounts[accountIndexEditing.Value].Edit = false;            
        }

        accountIndexEditing = index;
        accounts[accountIndexEditing.Value].Edit = true;
    }

    void editAccounts() {
        appData.PortfolioView = "by Account";
        showEditAccountHelpers = !showEditAccountHelpers;
    }

    void toggleTaxFilingStatusEditing() {
        taxFilingStatusEditing = !taxFilingStatusEditing;
    }

    void toggleAssetAllocationEditing() {
        assetAllocationEditing = !assetAllocationEditing;
    }

    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Quotes";
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    int? accountIndexEditing = null;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        runningTotal += itemTotal ?? 0;
        if (!pastTotal) {
            pastTotal = familyData.PlannedSavings <= runningTotal;

            if (pastTotal) {
                return "<div>-------<br/><div>Planned savings " + (familyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(familyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
            }
        }

        return "";
    }

    public int? GetRecommdedIRAAmount(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
            case IRAType.DeductibleIRA:
                return person.IRA.AmountToSave;
            case IRAType.Roth:
                return person.RothIRA.AmountToSave;
            case IRAType.NondeductibleIRAThenBackdoorRoth:
            case IRAType.NondeductibleIRA:
                return person.IRA.AmountToSave;
            default:
                return null;
        }
    }

    public string GetRecommendedIRAMarkup(Person person) {
        switch(person.IRATypeRecommendation) {
            case IRAType.DeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.formatMoney(person.IRA.DeductionAllowed) + " Deductible), then backdoor roth</span>";
            case IRAType.DeductibleIRA:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " in " + person.PossessiveID + " IRA (" + FormatUtilities.formatMoney(person.IRA.DeductionAllowed) + " Deductible)</span>";
            case IRAType.Roth:
                return "<span>" + FormatUtilities.formatMoney(person.RothIRA.AmountToSave) + " in " + person.PossessiveID + " Roth IRA</span>";
            case IRAType.NondeductibleIRAThenBackdoorRoth:
                return "<span>" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " (nondeductible), then backdoor roth</span>";
            case IRAType.NondeductibleIRA:
                return "<span>$" + FormatUtilities.formatMoney(person.IRA.AmountToSave) + " (nondeductible)</span>";
            default:
                return "<p>do nothing</p>";
        }
    }

    public string getPronoun(Person person)
    {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    public string estimatePortfolio(FamilyData familyData) 
    {
        if (familyData.Value >= 10000000) {
            return "8-figures";
        } else if (familyData.Value >= 6666666) {
            return "high 7-figures";
        } else if (familyData.Value >= 3333333) {
            return "mid 7-figures";
        } else if (familyData.Value >= 1000000) {
            return "low 7-figures";
        } else if (familyData.Value >= 666666) {
            return "high 6-figures";
        } else if (familyData.Value >= 333333) {
            return "mid 6-figures";
        } else if (familyData.Value >= 100000) {
            return "low 6-figures";
        } else if (familyData.Value >= 66666) {
            return "high 5-figures";
        } else if (familyData.Value >= 33333) {
            return "mid 5-figures";
        } else if (familyData.Value >= 10000) {
            return "low 5-figures";
        } else if (familyData.Value >= 1000) {
            return "4-figures";
        } else if (familyData.Value == 0) {
            return "-";
        } else {
            return "less than $1,000";
        }
    }

    public string bold(string text) {
        if (ShowMarkup) {
            return "[b]<b>" + text + "</b>[/b]";
        } else {
            return "<b>" + text + "</b>";
        }
    }

    public string boldUnderline(string text) {
        if (ShowMarkup) {
            return "[b][u]<b><u>" + text + "</u></b>[/u][/b]";
        } else {
            return "<b><u>" + text + "</u></b>";
        }
    }

    public string markupize(string? wikiText) {
        if (wikiText == null) return "";
        string returnVal = "<span>";
        char lastChar = 'x';
        var mode = Mode.normal;
        string href = "";
        string text = "";
        foreach (var c in wikiText) {
            switch (c) {
                case '[':
                    if (lastChar == '[') {
                        mode = Mode.href;
                    }
                    break;
                case ']':
                    if (lastChar == ']') {
                        if (text == "") { text = href; }
                        if (href.StartsWith("https://bogle.tools/")) 
                        {
                            returnVal += "<a href='" + href.Substring(19) + "'>" + text + "</a>";
                        }
                        else if (href.StartsWith("https://"))
                        {
                            returnVal += "<a target=_blank href='" + href + "'>" + text + "</a>";
                        } 
                        else
                        {
                            returnVal += "<a target=_blank href='https://www.bogleheads.org/wiki/" + href + "'>" + text + "</a>";
                        }
                        href = "";
                        text = "";
                        mode = Mode.normal;
                    }
                    break;
                case '|':
                    if (mode == Mode.href) {
                        mode = Mode.text;
                    }
                    break;
            }

            switch (mode) {
                case Mode.href:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        default:
                            href += c;
                            break;
                    }
                    break;
                case Mode.text:
                    switch (c) {
                        case '[':
                        case ']':
                        case '|':
                            break;
                        default:
                            text += c;
                            break;
                    }
                    break;
                default:
                    switch (c) {
                        case '[':
                        case ']':
                            break;
                        case '\n':
                            returnVal += "<br/>";
                            break;
                        default:
                            returnVal += c;
                            break;
                    }
                    break;
            }

            lastChar = c;
        }
        returnVal += "</span>";

        return returnVal;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
        {
            if (focusTicker)
            {
                await tickerN.FocusAsync();
                focusTicker = false;
            } else if (focusAccount) {
                await accountN.FocusAsync();
                focusAccount = false;
            }
    }

    [Parameter]
    public string? stepPath { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/portfolio";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "Portfolio Tracker";
    private bool focusTicker = false;
    private bool focusAccount = false;
    private bool showPortfolioAnalysis = true;

    private FamilyData familyData {
        get {
            return appData.FamilyData;
        }
        set {
            appData.FamilyData = value;
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/portfolio-assets-steps.json");
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private ElementReference tickerN;
    private ElementReference accountN;
    private bool showImport = false;
    private bool showError  = false;

    private void ShowImport() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import-accounts");
    }

    private async Task UpdateInvestmentPrice(Investment investment)
    {
        var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={investment.Ticker}&apikey={appData.EODHistoricalDataApiKey}");
        var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
        if (quoteData?.Close != null) {
            investment.Price = quoteData.Close;
            investment.Value = investment.Price * investment.Shares;
        }
    }
    public static DateTime? UnixTimeStampToDateTime( int? unixTimeStamp )
    {
        if (!unixTimeStamp.HasValue) return null;
        // Unix timestamp is seconds past epoch
        DateTime dateTime = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc);
        dateTime = dateTime.AddSeconds( unixTimeStamp ?? 0 ).ToLocalTime();
        return dateTime;
    }
    private async Task UpdateInvestmentsPrice(string ticker, List<Investment> investments)
    {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            var quoteDataJson = await Http.GetStreamAsync($"https://api.bogle.tools/api/getquotes?ticker={ticker}&apikey={appData.EODHistoricalDataApiKey}");
            var quoteData = await JsonSerializer.DeserializeAsync<QuoteData>(quoteDataJson);
            if (quoteData?.Close != null) {
                foreach (var investment in investments) {
                    investment.Price = quoteData.Close;
                    if (quoteData.Volume > 0) {
                        investment.PreviousClose = quoteData.PreviousClose; 
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = UnixTimeStampToDateTime(quoteData.Timestamp);
                    } else if (quoteData.Volume == 0 && UnixTimeStampToDateTime(quoteData.Timestamp)?.Date == DateTime.Now.Date) {
                        investment.PreviousClose = quoteData.PreviousClose;
                        investment.PercentChange = quoteData.ChangeP;
                        investment.LastUpdated = DateTime.Now;
                    } else {
                        investment.PreviousClose = quoteData.Close;
                        investment.PercentChange = null;
                        investment.LastUpdated = null;
                    }

                    investment.Value = investment.Price * investment.Shares;
                }
            }
        }
    }

    private async Task UpdatePrice(MouseEventArgs e, Investment investment) {
        if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey)) {
            await UpdateInvestmentPrice(investment);
        }
    }
    
    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        appData.ImportResult = await Importer.ImportDataFiles(files, Funds, familyData.Accounts);
        foreach (var account in appData.ImportResult.ImportedAccounts) 
        {
            account.Import = true;
        }

        Console.WriteLine($"{appData.ImportResult.DataFilesImported} files imported with {appData.ImportResult.ImportedAccounts.Count} accounts");
        showImport = false;

        Navigation.NavigateTo("/portfolio/reload"); // WORKAROUND
    }

    private void finishImport()
    {
        if (appData.ImportResult == null) { return; }

        foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
        {
            if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
            {
                updatedAccount.ReplaceAccount.Investments.Clear();
                updatedAccount.ReplaceAccount.Investments.AddRange(updatedAccount.Investments);
            }
        }

        foreach (var newAccount in appData.ImportResult.NewAccounts)
        {
            if (newAccount.Import)
            {
                familyData.Accounts.Add(newAccount);
            }
        }

        appData.ImportResult = null;
    }

    private void cancelImport()
    {
        appData.ImportResult = null;
    }

    private void addInvestment(MouseEventArgs e, int accountIndex)
    {
        var newInvestment = new Investment() { funds = Funds };
        familyData.Accounts[accountIndex].Investments.Add(newInvestment);
        focusTicker = true;
    }

    private void addInvestment2(MouseEventArgs e, int accountIndex) {
        var account = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        account.Investments.Add(new Investment() { funds = Funds });
    }

    void deleteInvestment2(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        var account = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        var investmentToDelete = account.Investments.OrderByDescending(i=>i.Value).ToList()[investmentIndex];
        account.Investments.Remove(investmentToDelete);
        familyData.UpdatePercentages();
    }

    void deleteInvestment(MouseEventArgs e, int accountIndex, int investmentIndex)
    {
        familyData.Accounts[accountIndex].Investments.RemoveAt(investmentIndex);
        Navigation.NavigateTo("/portfolio/reload");
        familyData.UpdatePercentages();
    }
    void addAvailableFund(MouseEventArgs e, Account account)
    {
        var newFund = new Investment() { funds = Funds };
        account.AvailableFunds.Add(newFund);
        focusTicker = true;
    }

    void deleteAvailableFund(MouseEventArgs e, Account account, int investmentIndex)
    {
        account.AvailableFunds.RemoveAt(investmentIndex);
    }

    void addAccountInline()
    {
        var newAccount = new Account();
        var newInvestment = new Investment() { funds = Funds };
        newAccount.Investments.Add(newInvestment);
        newAccount.Edit = true;
        familyData?.Accounts.Add(newAccount);
    }

    private async void deleteAccount2(MouseEventArgs e, int accountIndex)
    {
        var accountToDelete = familyData.Accounts.OrderByDescending(a=>a.Value).ToList()[accountIndex];
        familyData.Accounts.Remove(accountToDelete);
        accountIndexEditing = null;
        familyData.UpdatePercentages();
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    void addAccount()
    {
        var newAccount = new Account();
        var newInvestment = new Investment() { funds = Funds };
        newAccount.Investments.Add(newInvestment);
        familyData?.Accounts.Add(newAccount);
        focusAccount = true;
    }
    void deleteAccount(MouseEventArgs e, int accountIndex)
    {
        familyData.Accounts.RemoveAt(accountIndex);
        Navigation.NavigateTo("/portfolio/reload");
        familyData.UpdatePercentages();
    }

    private async Task LoadPortfolioForTopic(string topicStr) {
        var options = new JsonSerializerOptions() 
            {
                Converters =
                    {
                        new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                    }
            };
        var topicJsonUri = "https://raw.githubusercontent.com/bogle-tools/financial-variables/main/data/portfolios/" + topicStr + ".json";
        var stream = await Http.GetStreamAsync(topicJsonUri);
        familyData = await FamilyData.LoadFromJsonStream(appData, stream, options);
    }

    private async Task CopyTextToClipboard()
    {
        var text = await JS.InvokeAsync<string>("getTableInnerText");
        text = text.Replace("\n✏️\t","");
        text = text.Replace("✏️\t","");
        text = text.Replace("Show Portfolio Analysis\n", "");
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task refreshPrices() {
        refreshButtonText = "Updating...";
        Dictionary<string,List<Investment>> quotes = new();
        foreach (var account in familyData.Accounts)
        {
            foreach (var investment in account.Investments)
            {
                if (investment.AssetType != AssetType.Cash && investment.Ticker != "IBOND" && !string.IsNullOrEmpty(investment.Ticker)) {
                    if (!quotes.ContainsKey(investment.Ticker))
                    {
                        quotes.Add(investment.Ticker, new List<Investment> () { investment });
                    }
                    else
                    {
                        var investments = quotes[investment.Ticker];
                        investments.Add(investment);
                    }
                }
            }
        }

        foreach (var quote in quotes)
        {
            try {
                await UpdateInvestmentsPrice(quote.Key, quote.Value);
            } catch (Exception ex) {
                Console.WriteLine(ex.GetType().Name + ": " + ex.Message + " " + ex.StackTrace);
            }
        }

        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        refreshButtonText = "🔃 Quotes";
    }

    private (double? change, double? percentChange) portfolioChange() 
    {
        double? change = 0.0;
        double? total = 0.0;
        foreach (var investment in familyData.GroupedInvestments)
        {
            total += investment.Value ?? 0.0;
            if (investment.PercentChange != null)
            {
                change += (investment.Price - investment.PreviousClose) * investment.Shares;
            }
        }

        var startOfDayTotal = total - change;
        return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }
}
