@page "/rsu-tracker"
@page "/rsu-tracker/{View}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .mainTable {
        border-collapse: collapse;
        border-top: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable thead tr th{
        border-bottom: 1px solid #000000;
    }
    .mainTable th, .mainTable td {
        border-left: 1px solid rgba(0,0,0,0.2);
        border-right: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable th, .mainTable td{ /* Added padding for better layout after collapsing */
        padding: 4px 8px;
    }

    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
    @if (steps == null || appData?.FamilyData is null)
    {
        <p>
            @if(appData!.CurrentProfileName==null){
                <em>No active <a href=/profiles>profile</a>.</em>
            } else {
                <em>Loading...</em>
            }
        </p>
        <div style=float:left;margin-left:50px>
            <a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
                @if(appData.CurrentProfileName==null){
                    <span>choose a</span>}else {<span>@appData.CurrentProfileName</span>
                }
            </a> profile
        </div>
    } else if (appData.FamilyData != null && appData.FamilyData.PINProtected && appData.FamilyData.PIN == null) {
        <div style=float:left>
            <h4 style="max-width:450px">
                @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
            </h4>
        </div>
        <div style=clear:left><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

        <p style=clear:left>Need PIN</p>
        <input style=width:50px;text-align:right type=text @bind-Value=PINEntry @bind-Value:event=oninput />
        <button @onclick=setPIN>Go</button>
    } else {
        if (appData?.FamilyData is not null) {
            var prevStep = steps[steps.Length - 1];
            var nextStep = steps[0];
            string prevPage = folderName + prevStep?.step;
            string nextPage = folderName + nextStep?.step;
            if (appData.FamilyData.TaxFilingStatus == TaxFilingStatus.ChoiceNeeded) {
                taxFilingStatusEditing = true;
            }

            <div style=float:left>
                <h4 style="max-width:450px">
                    @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
                </h4>
            </div>
            <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

            <div style=clear:left>
                <table id=_reviewTable>
                    @foreach (var step in steps) {
                        var href = folderName + @step.step;
                        <tr>
                            @switch (step.step) {
                                case "people": 
                                    <td>
                                        <a @onclick=toggleTaxFilingStatusEditing style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                        @((MarkupString)FormatUtilities.Bold("Tax Filing Status:", ShowMarkup))
                                        @if (!taxFilingStatusEditing) {
                                            @if (appData.FamilyData!.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) { <span>&nbsp;@appData.FamilyData.TaxFilingString</span> }
                                            @if(appData.FamilyData.PersonCount > 0) {
                                                <span>&nbsp;@getPronoun(appData.FamilyData.People[0], false)</span>
                                            }
                                            @if(appData.FamilyData.PersonCount > 1) {
                                                <span>&nbsp;and @getPronoun(appData.FamilyData.People[1], false)</span>
                                            }
                                            <br/><hr/>
                                        } else {
                                            <select @bind=appData.FamilyData!.TaxFilingStatus>
                                                <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                <option>Single</option>
                                                <option value=MarriedFilingJointly>Married filing jointly</option>
                                                <option value=MarriedFilingSeperately>Married filing separately</option>
                                                <option value=HeadOfHousehold>Head of Household</option>
                                            </select><br/><br/>
                                            
                                            @for (int i = 0; i < appData.FamilyData.PersonCount; i++) {
                                                var person = appData.FamilyData.People[i];
                                                int personIndex = i + 1;

                                                <EditForm Model="person" style=margin-left:25px>
                                                    @if(person?.FamilyData?.PersonCount>1){
                                                        <b>Person @personIndex:</b><br/>
                                                        <label>Pronoun/Unique identifier:</label> <select @bind=person.Identifier>
                                                        <option value="ChoiceNeeded">ChoiceNeeded</option>
                                                        <option>person @personIndex</option>
                                                        <option>him</option>
                                                        <option>her</option>
                                                        <option>me</option>
                                                        <option>them</option>
                                                    </select><br/>}
                                                </EditForm><br/>
                                            }
                                        }
                                    </td>
                                    break;
                                case "rsu-summary":
                                    @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                                        <td>
                                            <a @onclick=editGrants style=margin:0px;padding:0px;width:20px class="m-2 btn" >✏️</a>
                                            @if (View == null) {
                                                View = "by-year";
                                            }
                                            @{
                                                var byYearBold = (View == "by-year") ? ";font-weight:bold" : ""; 
                                                var byGrantBold = (View == "by-grant") ? ";font-weight:bold" : ""; 
                                            }

                                            <label>&nbsp;&nbsp;View RSUs:&nbsp;</label>
                                            <span>
                                                <a style='@byYearBold' href=/rsu-tracker>by year</a> | 
                                                <a style='@byGrantBold' href=/rsu-tracker/by-grant>by grant</a>
                                            </span>
                                            <br/>
                                            <br/>
                                            @if(showEditAccountHelpers) {
                                                <i>Editing RSU Grants:</i>
                                                <br/><span>'➕' button will add a new grant to bottom of grants list.
                                                <br/>To edit grant details or to delete a grant, click on grant table row in <a href=/rsu-tracker/by-grant>by grant</a> view</span><br/><br/>
                                            }

                                            @switch (View) {
                                                case "by-grant":
                                                    @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                        var pBuf = p;
                                                        var person = appData.FamilyData.People[p];
                                                        <p><span style=font-size:14pt;font-weight:bold>@person.PossessiveID RSU Grants:</span> <button @onclick='@(e=>addGrant(e,pBuf))' title='add grant'>➕</button>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title='update prices' style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update prices</a>
                                                            }
                                                        </p>

                                                        @if(person.RSUGrants.Count > 0) {
                                                            <table class=mainTable>
                                                                <tr style='vertical-align:bottom;border:black sold 1px'>
                                                                    <th style=padding-left:8px>Vest Date</th>
                                                                    <th style=padding-left:8px;text-align:center>Shares</th>
                                                                    <th style=padding-left:8px;text-align:center>~Price</th>
                                                                    <th style=padding-left:8px;text-align:center>~Value</th>
                                                                </tr>
                                                                @{var grantCount = 0;}
                                                                @foreach (var rsuGrant in person.RSUGrants) {
                                                                    var grantIndex = grantCount++;
                                                                    <tr style=vertical-align:bottom;color:white;background-Color:black @onmousedown='@(e=>toggleEdit(e,pBuf, grantIndex))'>
                                                                        @if (!rsuGrant.Edit) {
                                                                            <td style=padding-left:8px;text-align:left colspan=4>@rsuGrant.Shares @rsuGrant.Ticker shares granted on @rsuGrant.Date?.ToShortDateString()</td>
                                                                        } else {
                                                                            <td style=padding-left:8px;text-align:left colspan=4>
                                                                                <input @onmousedown:stopPropagation="true" type=text style=width:80px;text-align:right @bind-value=rsuGrant.Shares placeholder="shares" />
                                                                                <input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.Ticker placeholder="ticker" />
                                                                                shares<br/>
                                                                                granted on 
                                                                                <input @onmousedown:stopPropagation="true" type=text @bind-value=rsuGrant.Date placeholder="date" /><br/>
                                                                                <br/>
                                                                                vest <input @onmousedown:stopPropagation="true" type=text style=width:40px;text-align:right @bind-value=rsuGrant.VestPercent />% of shares<br/> 
                                                                                every <input @onmousedown:stopPropagation="true" type=text style=width:40px;text-align:right @bind-value=rsuGrant.VestPeriodMonths  /> months<br/>
                                                                                with first vest happening at month # <input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.FirstVestMonth  /><br/>
                                                                                <br/>
                                                                                last price: $<input @onmousedown:stopPropagation="true" type=text style=width:80px @bind-value=rsuGrant.LastPrice placeholder="last price" />
                                                                                <div style=text-align:right>
                                                                                    <button title='delete grant' @onmousedown:stopPropagation="true" @onclick='@(e=>deleteGrant(e,pBuf, grantIndex))'>❌ grant</button>
                                                                                    <button title='save grant' >save grant</button>
                                                                                </div>
                                                                            </td>
                                                                        }
                                                                    </tr>
                                                                    @foreach (var vestEvent in rsuGrant.VestEvents.Where(ve=>ve.Date >= DateOnly.FromDateTime(DateTime.Now))) {
                                                                        <tr style=vertical-align:bottom>
                                                                            <td style=padding-left:8px;text-align:right>@vestEvent.Date.ToShortDateString()</td>
                                                                            <td style=padding-left:8px;text-align:center>@vestEvent.Shares</td>
                                                                            <td style=padding-left:8px;text-align:center>@FormatUtilities.formatMoney(vestEvent.Price)</td>
                                                                            <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestEvent.Value)</td>
                                                                        </tr>
                                                                    }
                                                                    <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                                }
                                                            </table>
                                                            <br/>
                                                        } else {
                                                            <p>No RSU grants yet. Press ➕ button to track a Restricted Stock Unit grant from an employer.</p><br/>
                                                        }
                                                    }
                                                    break;
                                                case "by-year":
                                                    @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                                        var pBuf = p;
                                                        var person = appData.FamilyData.People[p];

                                                        var vestMonths = (from rsuGrant in person.RSUGrants  // First foreach loop
                                                            from vestEvent in rsuGrant.VestEvents  // Second foreach loop
                                                            where vestEvent.Date >= DateOnly.FromDateTime(DateTime.Now)
                                                            group vestEvent by new { vestEvent.Date.Year, vestEvent.Date.Month }
                                                            into grp
                                                            select new { month = grp.Key.Month, year = grp.Key.Year, count = grp.Count(), shares = grp.Sum(ve=>ve.Shares), value = grp.Sum(ve=>ve.Value) });
                                                            
                                                        <p><span style=font-size:14pt;font-weight:bold>@person.PossessiveID RSU Grants:</span> <button @onclick='@(e=>addGrant(e,pBuf))' title='add grant'>➕</button>
                                                            @if (!string.IsNullOrEmpty(appData.EODHistoricalDataApiKey))
                                                            {
                                                                <button @onclick=@refreshPrices title='update prices' style=min-width:80px;>@refreshButtonText</button>
                                                            } else {
                                                                <a href="/updating-portfolio">Update prices</a>
                                                            }
                                                        </p>

                                                        @if(person.RSUGrants.Count > 0) {
                                                            <table class=mainTable>
                                                                <tr style=vertical-align:bottom>
                                                                    <th style=padding-left:8px>Vest Month</th>
                                                                    <th style=padding-left:8px;text-align:center>Grants</th>
                                                                    <th style=padding-left:8px;text-align:center>Shares</th>
                                                                    <th style=padding-left:8px;text-align:center>~Value</th>
                                                                </tr>
                                                                @{int? lastYear = null;}
                                                                @foreach (var vestMonth in vestMonths) {
                                                                    if (lastYear != vestMonth.year) {
                                                                        lastYear = vestMonth.year;
                                                                        <tr style=vertical-align:bottom;color:white;background-Color:black>
                                                                            <td style=padding-left:8px;text-align:left colspan=4>@lastYear</td>
                                                                        </tr>
                                                                    }
                                                                    <tr style=vertical-align:bottom>
                                                                        <td style=padding-left:8px;text-align:right>@vestMonth.month-@vestMonth.year</td>
                                                                        <td style=padding-left:8px;text-align:center>@vestMonth.count</td>
                                                                        <td style=padding-left:8px;text-align:center>@vestMonth.shares</td>
                                                                        <td style=padding-left:8px;text-align:right>~@FormatUtilities.formatMoney(vestMonth.value)</td>
                                                                    </tr>
                                                                }
                                                                <tr><td colspan=4 style=font-size:4pt>&nbsp;</td></tr>
                                                            </table>
                                                            <br/>
                                                        } else {
                                                            <p>No RSU grants yet. Press ➕ button to track a Restricted Stock Unit grant from an employer.</p><br/>
                                                        }
                                                    }
                                                    break;                                    
                                            }
                                        </td>
                                    }
                                    break;                                
                                default:
                                    break;
                            }
                        </tr>
                    }          
                </table>
                @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                    <div>
                        ~ - Predicting value at future vest events is impossible. Stock value could go up or down. Values shown are based on current value, which can be updated - details: <a href=/updating-portfolio>Updating RSU Latest Prices</a>
                    </div>
                }
            </div>
            <br/>

            @if (appData.FamilyData.TaxFilingStatus != TaxFilingStatus.ChoiceNeeded) {
                <p>"Consider using the <a href="/savings-planner">Savings Planner</a> for the year or using the <a href="/portfolio-tracker">Portfolio Tracker</a>"</p>
            }
        }
    }

@code {

    void cancelEvent() {

    }

    async void doneEditing() {
        if (appData?.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            foreach (var account in accounts) {
                account.Edit = false;
            }
            
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    async void deleteGrant(MouseEventArgs e, int personIndex, int grantIndex) {
        if (appData?.FamilyData is not null) {
            Console.WriteLine("personIndex:" + personIndex + " -- grantIndex: " + grantIndex);
            appData.FamilyData.People[personIndex].RSUGrants.RemoveAt(grantIndex);
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    async void toggleEdit(MouseEventArgs e, int personIndex, int grantIndex) {
        if (appData?.FamilyData is not null) {
            var grant = appData.FamilyData.People[personIndex].RSUGrants[grantIndex];
            if (grant.Edit) {
                var created = grant.CalculateVestEvents();
                if (created) {
                    grant.Edit = false;
                    await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
                }
            } else {
                grant.Edit = true;
            }
        }
    }

    void addGrant(MouseEventArgs e, int personIndex) {
        if (appData?.FamilyData is not null) {
            if (!Navigation.Uri.EndsWith("/rsu-tracker/by-grant")) {
                Navigation.NavigateTo("/rsu-tracker/by-grant");
            }

            var lastGrant = appData.FamilyData.People[personIndex].RSUGrants.Count > 0 
                ? appData.FamilyData.People[personIndex].RSUGrants[appData.FamilyData.People[personIndex].RSUGrants.Count-1]
                : null;
            var newGrant = new RSUGrant();
            if (lastGrant != null) {
                newGrant.VestPercent = lastGrant.VestPercent;
                newGrant.FirstVestMonth = lastGrant.FirstVestMonth;
                newGrant.VestPeriodMonths = lastGrant.VestPeriodMonths;
                newGrant.LastPrice = lastGrant.LastPrice;
                newGrant.Ticker = lastGrant.Ticker;
            }
            newGrant.Edit = true;
            appData.FamilyData.People[personIndex].RSUGrants.Add(newGrant);
        }
    }

    void editGrants() {
        Navigation.NavigateTo("/rsu-tracker/by-grant");
        showEditAccountHelpers = !showEditAccountHelpers;
    }

    void toggleTaxFilingStatusEditing() {
        taxFilingStatusEditing = !taxFilingStatusEditing;
    }

    void toggleAssetAllocationEditing() {
        assetAllocationEditing = !assetAllocationEditing;
    }

    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Prices";
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        if (appData?.FamilyData is not null) {
            runningTotal += itemTotal ?? 0;
            if (!pastTotal) {
                pastTotal = appData.FamilyData.PlannedSavings <= runningTotal;

                if (pastTotal) {
                    return "<div>-------<br/><div>Planned savings " + (appData.FamilyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(appData.FamilyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
                }
            }
        }

        return "";
    }

    public string getPronoun(Person person) {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    [Parameter]
    public string? View { get; set; }

    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    private Step[]? steps;
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/rsu-tracker";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "RSU Tracker";
    
    protected override async Task OnInitializedAsync()
    {
        steps = await Http.GetFromJsonAsync<Step[]>("data/rsu-tracker-steps.json");
        Navigation.LocationChanged += LocationChanged;

        if (appData?.FamilyData is not null) {
            for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                var person = appData.FamilyData.People[p];

                foreach (var grant in person.RSUGrants) {
                    grant.CalculateVestEvents();
                }
            }
        }

        base.OnInitialized();
    }

    private async Task refreshPrices() {
        refreshButtonText = "Updating...";
        await appData.FamilyData.RefreshPrices(Http);
        refreshButtonText = "🔃 Prices";
    }
    
    private int? PINEntry { get; set; }
    private void setPIN() {
        if (PINEntry != null && appData?.FamilyData is  not null) {
            appData.FamilyData.PIN = PINEntry;
        }
    }

    private (double? change, double? percentChange) portfolioChange() {
        double? change = 0.0;
        if (appData?.FamilyData is not null) {
            double? total = 0.0;
            foreach (var investment in appData.FamilyData.GroupedInvestments)
            {
                total += investment.Value ?? 0.0;
                if (investment.PercentChange != null)
                {
                    change += (investment.Price - investment.PreviousClose) * investment.SharesPIN;
                }
            }

            var startOfDayTotal = total - change;
            return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
        }

        return (null, null);
    }

    private void navWithBackStack() {
        if (appData is not null) {
            appData.LastPageUri = Navigation.Uri;
        }

        Navigation.NavigateTo("/profiles");
    }

    async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (appData?.FamilyData is not null) {
            if (appData.CurrentProfileName is not null) {
                await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
            }
        }
    }
}
