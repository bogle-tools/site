@page "/import-accounts"
@inject IAppData appData
@inject NavigationManager Navigation
@inject IList<Fund> Funds

<PageTitle>
@pageHeading
</PageTitle>

<div style=float:left>
    <h4 style="max-width:450px">
        @pageHeading
    </h4>
</div>
<div style=float:right><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >@appData.CurrentProfileName profile</a></div>

<div style=clear:left>
@if (appData.ImportResult == null) {
    @if(showError){<br/><br/><span style=color:red>ERROR: must be a CSV file from Ameriprise, eTrade, Fidelity, Merrill Edge, Schwab, or Vanguard or a XLSX file from Morgan Stanley.</span><br/>}
    <br/>
    <ol>
        <li>Download portfolio details (CSV file) from custodian website (see Detailed steps below for each supported Custodian)</li>
        <li>Click "Choose Files" button to import into your <a href=/profiles>active bogle.tools profile's</a> portfolio</li>
    </ol>

    <fieldset style=margin-left:20px>
        <InputFile multiple accept=".csv,.xlsx" OnChange="@((e) => OnDataFilesImport(e))" /><br/>
        <ul>
            <li>CAUTION: only share personal info (like these files) to apps worthy of your trust! See our privacy details in our <a href=/FAQ>FAQ</a></li>
        </ul>
    </fieldset><br/>

        <p><b>Detailed steps for Vanguard accounts</b>:
        <ol>
            <li>Log into <a target=_new href=vanguard.com>vanguard.com</a></li>
            <li>Click on the <a href=https://holdings.web.vanguard.com>Holdings</a> link</li>
            <li>Click on the <a href=https://personal1.vanguard.com/ofu-open-fin-exchange-webapp/ofx-welcome>Download Center</a> link to the right</li>
            <li>Step 1 - Choose "A spreadsheet-compatible CSV File"</li>
            <li>Step 2 - Choose any date range (I choose 18 months, but bogle.tools doesn't use this transaction information yet, so 1 month is fine too)</li>
            <li>Step 3 - Choose all accounts you'd like to export holdings info about</li>
            <li>Press Download button on bottom right of page - a file named OfxDownload.csv will be downloaded via your browser</li>
            <li>Click "Choose File" button on this page, find and choose the OfxDownload.csv file in Downloads folder</li>
        </ol>
        </p>

        <p><b>Detailed steps for Fidelity accounts</b>:
        <ol>
            <li>Log into <a target=_new href=fidelity.com>fidelity.com</a></li>
            <li>Click on the <a href=https://digital.fidelity.com/ftgw/digital/portfolio/positions>Positions</a> link</li>
            <li>Click on the <a href=https://personal1.vanguard.com/ofu-open-fin-exchange-webapp/ofx-welcome>Download image</a> (<img src=/images/fidelity-download-csv.png />) link</li>
            <li>a file named Portfolio_Positions_[DATE].csv will be downloaded via your browser</li>
            <li>Click "Choose File" button on this page, find and choose the Portfolio_Positions_[DATE].csv file in Downloads folder</li>
        </ol>
        </p>

        <p><b>Basic steps for Ameriprise, eTrade, Merrill Edge, Morgan Stanley, or Schwab accounts</b>:
        <ol>
            <li>Log into that website</li>
            <li>Find and download the data file</li>
            <li>Click "Choose File" button on this page, find and choose the file that you downloaded</li>
            <li>please email <a href=mailto:suggestions@bogle.tools>suggestions@bogle.tools</a> with more details so these steps can be enhanced</li>
        </ol>
        </p>

        <p><b>Other Custodians</b>:
            <ol>
                <li>If your custodian's format isn't supported yet, we're happy to try to add support</li>
                <li>download the CSV file for your account(s) from another Custodian</li>
                <li>anonymize/change the data in that CSV file (using a text editor)</li>
                <li>email it to <a href=mailto:suggestions@bogle.tools>suggestions@bogle.tools</a> with details on what custodian it is from.</li>
            </ol>
        </p>
}
else
{
    <EditForm Model=@appData.ImportResult>
        <div>Data Files Contains These Accounts/Investments - Choose Which to Import:</div>
        <br/>
        <button @onclick=finishImport>Import selected accounts</button>
        <button @onclick=cancelImport>Cancel Import</button>
        <br/>
        <br/>

        @foreach (var error in appData?.ImportResult.Errors)
        {
            <div style=font-weight:bold>Error: @error.Exception.Message</div>
            @if(error.Exception.InnerException!=null){ <div>Failure location: <br/>@error.Exception.InnerException.StackTrace<br/><br/></div>};
        }

        <div><InputCheckbox @bind-Value=appData.ImportResult.ImportUpdatedAccounts /> UPDATE these EXISTING accounts in your data file:</div>
        @foreach (var account in appData.ImportResult.UpdatedAccounts)
        {
            <div style=margin-left:40px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)</div>
            @foreach (var investment in account.Investments)
            {
                <div style=margin-left:80px>@investment.Name (@investment.Ticker) @(investment.Shares) shares =&gt; @FormatUtilities.formatMoney(investment.Value)</div>
            }
        }

        <br/>
        <div><InputCheckbox @bind-Value=appData.ImportResult.ImportNewAccounts /> ADD these NEW accounts in your data file:</div>
        @foreach (var account in appData.ImportResult.NewAccounts)
        {
            <div style=margin-left:40px><InputCheckbox @bind-Value=account.Import /> <u>@account.Custodian @account.Note</u> =&gt; @FormatUtilities.formatMoney(account.Value)</div>
            @foreach (var investment in account.Investments)
            {
                <div style=margin-left:80px>@investment.Name (@investment.Ticker) @(investment.Shares) shares =&gt; @FormatUtilities.formatMoney(investment.Value)</div>
            }
        }
    </EditForm>
}
</div>

@code {
    private async Task OnDataFilesImport(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles();
        appData.ImportResult = await Importer.ImportDataFiles(files, Funds, appData.FamilyData.Accounts);
        foreach (var account in appData.ImportResult.ImportedAccounts) 
        {
            account.Import = true;
        }

        Navigation.NavigateTo("/import-accounts");
    }
    private void finishImport()
    {
        if (appData.ImportResult == null) { return; }

        foreach (var updatedAccount in appData.ImportResult.UpdatedAccounts)
        {
            if (updatedAccount.Import && updatedAccount.ReplaceAccount != null)
            {
                updatedAccount.ReplaceAccount.Investments.Clear();
                updatedAccount.ReplaceAccount.Investments.AddRange(updatedAccount.Investments);
            }
        }

        foreach (var newAccount in appData.ImportResult.NewAccounts)
        {
            if (newAccount.Import)
            {
                appData.FamilyData.Accounts.Add(newAccount);
            }
        }

        appData.ImportResult = null;
        Navigation.NavigateTo("/portfolio");
    }

    private void cancelImport()
    {
        appData.ImportResult = null;
        Navigation.NavigateTo("/portfolio");
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }
    
    private bool showError { get; set; }
    private string pageHeading = "Import Accounts";
}