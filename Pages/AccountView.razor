@page "/portfolio-tracker/view/{Query}"
@inject HttpClient Http
@inject IAppData appData
@inject IRSData irsData
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IList<Fund> Funds
@using System.Text.Json.Serialization

<PageTitle>
@pageHeading - bogle.tools
</PageTitle>

<style>
    .mainTable {
        border-collapse: collapse;
        border-top: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable thead tr th{
        border-bottom: 1px solid #000000;
    }
    .mainTable th, .mainTable td {
        border-left: 1px solid rgba(0,0,0,0.2);
        border-right: 1px solid rgba(0,0,0,0.2);
    }
    .mainTable th, .mainTable td{ /* Added padding for better layout after collapsing */
        padding: 4px 8px;
    }

    .btn {
        color: white;
        padding: 10px 10px;
        text-decoration: none;
        display:inline-block;
        text-align:center;
        width:60px;
        border-radius: 10px;
    }
    .dollar {
        width: 100px;
    }
    .percent {
        width: 50px;
    }
    .article a[href^="http"]::after,
    .article a[href^="https://"]::after
    {
        content: "";
        width: 11px;
        height: 11px;
        margin-left: 4px;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='currentColor' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z'/%3E%3Cpath fill-rule='evenodd' d='M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z'/%3E%3C/svg%3E");
        background-position: center;
        background-repeat: no-repeat;
        background-size: contain;
        display: inline-block;
    }
</style>
@if (appData is null && !loaded!)
{
    <p>
        @if(appData == null || appData.CurrentProfileName==null){<em>No active <a href=/profiles>profile</a>.</em>} 
        else {<em>Loading...</em>}
    </p>
    <div style=float:left;margin-left:50px><a href=/profiles  title="profile name" @onclick=navWithBackStack @onclick:preventDefault >
        @if(appData!.CurrentProfileName==null){<span>choose a</span>}else {<span>@appData.CurrentProfileName</span>}</a> profile
    </div>
} else if (loaded && appData.FamilyData is not null) {
    if (appData.FamilyData.TaxFilingStatus == TaxFilingStatus.ChoiceNeeded) {
        taxFilingStatusEditing = true;
    }
    appData.FamilyData.UpdatePercentages();

    <div style=float:left>
        <h4 style="max-width:450px">
            @pageHeading <h6 style=display:inline>for @appData.CurrentProfileName profile</h6>
        </h4>
    </div>
    <div style=clear:left;margin-left:1.5in><a href=/profiles @onclick=navWithBackStack @onclick:preventDefault >(manage profiles)</a></div>

    <div style=clear:left><a href=/portfolio-tracker @onclick=navToAccounts @onclick:preventDefault >Portfolio</a> > @Query</div>

    <div style=clear:left>
        @{
            int accountsMatchingFilter = 0;
        }   

        @if (Query == "editor") {
            <br/>
            <span>Track another account:&nbsp;</span><button @onclick=addAccountInline>➕ account</button>
            <br/><br/>
        }

        <button @onclick=@refreshPrices title=Refresh style=min-width:80px; @bind-disabled:event=onchange @bind-disabled=@refreshButtonDisabled>@refreshButtonText</button><br/>

        @{
            var accountIndex = 0;
            accountsMatchingFilter = 0;
        }
        @foreach (var account in appData.FamilyData.Accounts) {
            int accBuffer = accountIndex;
            accountIndex++;
            if (Query.StartsWith("ticker:"))
            {
                bool found = false;
                var tickerToFind = Query.Substring(7);
                foreach (var investment in account.Investments)
                {
                    if (investment.Ticker == tickerToFind)
                    {
                        found = true;
                    }
                }

                account.View = found;
                if (found)
                {
                    accountsMatchingFilter++;
                }
            } else if (Query.StartsWith("editor")) {
                account.View = true;
                accountsMatchingFilter++;
            } else if (Query.StartsWith("account:")) {
                string accountToFind;
                if (Query.Length > 8)
                {
                    accountToFind = Query.Substring(8);
                }
                else
                {
                    accountToFind = "";
                }

                bool accountFound = account.Title == accountToFind;
                account.View = accountFound;
                if (accountFound)
                {
                    accountsMatchingFilter++;
                }
            } else if (Query.StartsWith("custodian:")) {
                var custodianToFind = Query.Substring(10);
                bool accountFound = account.Custodian == custodianToFind;
                account.View = accountFound;
                if (accountFound)
                {
                    accountsMatchingFilter++;
                }
            }

            if (account.View) {
                bool isTreasuryDirect = account.Custodian?.ToLowerInvariant() == "treasury direct"  || account.Custodian?.ToLowerInvariant() == "treasurydirect";
                bool alternateRow2 = false;
                if (account.Investments.Count == 0 && account.AccountType == null && account.Custodian == null && account.Note == null)
                {
                    account.Edit = true;
                }

                @if(account.Edit) {
                    @((MarkupString)FormatUtilities.Bold("Edit Account Info:", ShowMarkup))
                }

                <br/>
                <table class=mainTable>
                    <tr style=color:white;background:black; @onclick='@(e=>editAccountInfo(e,account))'>
                        <td colspan=3>
                            @account.Title
                        </td>
                        <td style=text-align:right;padding-left:8px>
                            @FormatUtilities.formatMoney(account.Value, decimalPlaces:0)
                            <a style=margin:0px;padding:0px;width:20px class="m-0 btn" >✏️</a>
                        </td>
                    </tr>
                    @if (account.Edit) {
                        <tr style=color:white;background:black;padding-left:8px>
                            <td colspan=4>
                                @if (appData.FamilyData.PersonCount == 2) {
                                    <label style=padding-left:8px>Owner:</label>
                                    <select style=margin-left:4px @bind=account.Identifier>
                                        @if(account.TaxType == "Taxable" || account.TaxType == "Other") {
                                            <option>our</option>
                                        }
                                        @for(int p=0;p<appData.FamilyData.PersonCount;p++) {
                                            <option>@appData.FamilyData.People[p].PossessiveID</option>
                                        }
                                    </select>
                                }

                                <label style=padding-left:8px>Account Type:</label>
                                <select style=margin-left:4px @bind=account.AccountType>
                                    <option>choice needed</option>
                                    <option>401(k)</option>
                                    <option>403(b)</option>
                                    <option>457(b)</option>
                                    <option>457(b) Governmental</option>
                                    <option>529</option>
                                    <option>Annuity (Non-Qualified)</option>
                                    <option>Annuity (Qualified)</option>
                                    <option>Brokerage</option>
                                    <option>HSA</option>
                                    <option>Individual</option>
                                    <option>Inherited IRA</option>
                                    <option>Inherited Roth IRA</option>
                                    <option value="Traditional IRA">IRA</option>
                                    <option>Refundable Deposit</option>
                                    <option>Rollover IRA</option>
                                    <option>Roth 401(k)</option>
                                    <option>Roth IRA</option>
                                    <option>SEP IRA</option>
                                    <option>SIMPLE IRA</option>
                                    <option>Solo 401(k)</option>
                                    <option>Taxable</option>
                                    <option>Traditional IRA</option>
                                </select> 
                            </td>
                        </tr>
                        <tr style=color:white;background:black;padding-left:8px>
                            <td colspan=4>
                                <label style=padding-left:8px>at</label> <input style="width:140px" type=text @bind-Value=account.Custodian @bind-Value:event=oninput placeholder='custodian' />
                            </td>
                        </tr>
                        @if (account.TaxType == "Pre-Tax(work)") {
                            <tr style=color:white;background:black;>
                                <td colspan=3>
                                    <EditForm Model="account">
                                        <label>Employer:&nbsp;</label>
                                        <InputRadioGroup @bind-Value="account.CurrentOrPrevious">
                                            @foreach (var option in Account.CurrentOrPreviousOptions)
                                            {
                                                <InputRadio Value="option" /> 
                                                @if(option!="previous") {<span>&nbsp;@option&nbsp;|&nbsp;</span>} else {<span>&nbsp;@option</span>}
                                            }
                                        </InputRadioGroup>
                                    </EditForm>
                                </td>
                                <td colspan="2">
                                    @if (appData.AllowAfterTaxPercentage) {
                                        <label style=padding-left:8px>After Tax %:</label> <input type=text id=currentEmployer style=margin-left:8px;width:60px @bind-Value=account.AfterTaxPercentage @bind-Value:event=onchange />
                                    }
                                </td>
                            </tr>
                        }
                        <tr style=color:white;background:black;><td colspan=4>
                            <label style=padding-left:8px>Note: </label><input type=text @bind-value=account.Note @bind-value:event=oninput placeholder='account note'/>
                            </td>
                        </tr>
                        <tr style=color:white;background:black;>
                            <td colspan=3>
                                <button @onclick='@(e=>deleteAccount(e,accBuffer))' title='delete account'>Delete account</button>
                            </td>
                            <td colspan=1 style=text-align:right>
                                <button @onclick='@(e=>editAccountInfo(e,account))'>save info</button>
                            </td>
                        </tr>
                    }
                    <tr style=height:15px;background:white></tr>
                    </table>
                    <table style=margin-left:.25in>
                    @{
                        var investmentIndex = 0;
                        string bgColor;
                        bool headerShown = false;
                    }
                    @foreach (var investment in account.Investments) {
                        if (!headerShown)
                        {
                            if (!isTreasuryDirect && investment.Ticker != "IBOND")
                            {
                                <tr style=vertical-align:bottom>
                                    <th style=padding-left:8px>Holding</th>
                                    <th style=padding-left:8px;text-align:center>Quantity</th>
                                    <th style=padding-left:8px;text-align:center>Price</th>
                                    <th style=padding-left:8px;text-align:center>Balance</th>
                                </tr>
                            } else {
                                <tr style=vertical-align:bottom>
                                    <th style=padding-left:8px>Holding</th>
                                    <th style=padding-left:8px;text-align:center>'Fixed'<br/>Rate</th>
                                    <th style=padding-left:8px;text-align:center>Current<br/>Rate</th>
                                    <th style=padding-left:8px;text-align:center>Balance</th>
                                </tr>
                            }

                            headerShown = true;
                        }

                        var advice = Advisor.Advise(investment, account, appData);
                        int invBuffer = investmentIndex;
                        investmentIndex++;
                        if (investment.Selected && (investment.SelectedTransaction == null || investment.SelectedTransaction.Type == "Edit")) {
                            bgColor = "yellow";
                        } else {
                            bgColor = alternateRow2 ? "white" : "lightgray";
                        }

                        <tr style=background-color:@bgColor @onclick='@(e=>chooseInvestment(e,accBuffer,invBuffer))'>
                            <td style=padding-left:8px;height:30px; title=@investment.Name>
                                @(investment.Ticker != null ? investment.Ticker : investment.Name)
                                @if (investment.IsAssetTypeUnknown) { <span style=color:red>*</span> }
                                @if (investment.IsBalancedFund && !investment.DoesBalancedFundEqual100) { <span style=color:red>^</span> }
                                @if (account.TaxType == "Taxable" && investment.MissingCostBasis && !investment.IsCash) { <span style=color:red>~</span> }
                                @if ((investment.IsFund || investment.IsETF) && investment.ExpenseRatio == null) { <span style=color:red>#</span> }
                                @if (investment.IsIBond) {
                                    <span>&nbsp;</span>@FormatUtilities.formatMonthPlus2DigitYear(investment.PurchaseDate)
                                }
                            </td>
                            @if (investment.IsIBond) 
                            {
                                <td style=text-align:right>@FormatUtilities.formatPercent3(investment.InterestRate*100.0)</td>
                                <td style=text-align:right>@FormatUtilities.formatPercent3(investment.CurrentRate*100.0)</td>
                            } else {
                                <td style=text-align:right;padding-left:8px>@FormatUtilities.formatDoubleTwoDecimal(investment.SharesPIN)</td>
                                <td style=text-align:right;padding-left:8px>@FormatUtilities.formatMoney(investment.Price)</td>
                            }
                            <td style=text-align:right;padding-left:8px>
                                @FormatUtilities.formatMoney(investment.ValuePIN, decimalPlaces:0)
                            </td>
                        </tr>
                        @if (investment.IsIBond && investment.NextRate.HasValue)
                        {
                            <tr style=background-color:@bgColor @onclick='@(e=>chooseInvestment(e,accBuffer,invBuffer))'>
                                <td colspan=2 style=text-align:right>
                                    as of @FormatUtilities.formatMonthPlus2DigitYear(@investment.NextRateStart):
                                </td>
                                <td style=text-align:right>
                                    @FormatUtilities.formatPercent3(investment.NextRate*100.0)
                                </td>
                                <td></td>
                            </tr>
                        }

                        @foreach (var adviceItem in advice) {
                            <tr style=background-color:@bgColor>
                                <td colspan=4 style=padding-left:16px>
                                    <span style=background-color:yellow>@adviceItem</span>
                                </td>
                            </tr>
                        }

                        var transactionIndex = 0;
                        @foreach (var transaction in investment.Transactions) {
                            var transactionBuffer = transactionIndex;
                            if (transaction.Selected && investment.SelectedTransaction == transaction) {
                                bgColor = "yellow";
                            } else {
                                bgColor = alternateRow2 ? "white" : "lightgray";;
                            }
                            var value = transaction.CustomValue(account.FindInvestment(investment.Ticker));
                            @* if (value != 0.0)  *@
                            {
                                <tr style=background-color:@bgColor  @onclick='@(e=>chooseTransaction(e,accBuffer,invBuffer, transactionBuffer))'>
                                    
                                    <td colspan=3 style=padding-left:16px>
                                        @if (transaction.HostTicker == investment.Ticker)
                                        {
                                            <span>..future @transaction.Type @transaction.HostTicker</span>
                                        }
                                        else 
                                        {
                                            <span>..future @transaction.Type @transaction.HostTicker</span>
                                        }
                                    </td>
                                    <td style=text-align:right;padding-left:8px>
                                        @FormatUtilities.formatMoney(value, decimalPlaces:0)
                                    </td>
                                </tr>
                            }
                            transactionIndex++;
                        }

                        alternateRow2 = !alternateRow2;
                    }

                    <tr style=background:black;color:white>
                        <td colspan=4>
                            <button @onclick='@(e=>addInvestment2(e,accBuffer))' style=margin-left:8px title="add holding">➕ holding</button>
                            @if (isTreasuryDirect)
                            {
                                <button title="add ibond" @onclick='@(e=>addIBOND(e,accBuffer))' style=margin-left:8px>➕ IBOND</button>
                            }
                        </td>
                        
                    </tr>
                    <tr>
                        <td colspan=4 style=text-align:right;font-size:9pt;font-style:italic>
                            @if(account.Investments.Count > 0 && account.SelectedInvestment == null) {
                                @((MarkupString)FormatUtilities.Bold("Select a Holding to Change", ShowMarkup))
                            }
                        </td>
                    </tr>
                </table>
                <br/>

                @if (account.SelectedInvestment != null) {
                    var investment = account.SelectedInvestment;
                    if (investment.IsAssetTypeUnknown)
                    {
                        <span><span style=color:red>*</span> - Asset type is unknown. Please edit, and choose asset type.</span><br/><br/>
                    }
                    
                    if (investment.IsBalancedFund && !investment.DoesBalancedFundEqual100)
                    { 
                        <span><span style=color:red>^</span> - Stock and Bond fund components don't total 100%. Please edit.</span><br/><br/>
                    }

                    if (account.TaxType == "Taxable" && investment.MissingCostBasis && !investment.IsCash) { 
                        <span><span style=color:red>~</span> - Missing CostBasis. Please edit.</span><br/><br/>
                    }

                    if ((investment.IsFund || investment.IsETF) && investment.ExpenseRatio == null) { 
                        <span><span style=color:red>#</span> - Missing ExpenseRatio. Please edit.</span><br/><br/>
                    }

                    switch (investment.SelectedTransaction?.Type) {
                        case null:
                            @((MarkupString)FormatUtilities.Bold("Actions:", ShowMarkup))<br/>
                            <button @onclick='@(e=>edit(e,account.SelectedInvestment))'>Edit @account.SelectedInvestment.Ticker</button>
                            <button @onclick='@(e=>deleteSelectedInvestment(e,account.SelectedInvestment))' title='delete investment'>Delete @account.SelectedInvestment.Ticker</button>
                            @if (account.SelectedInvestment.Ticker?.ToUpper() == "IBOND")
                            {
                                var ebURL = "https://eyebonds.info/ibonds/" + investment.CostBasis.ToString() + "/ib_" + investment.PurchaseDate?.Year + "_" + investment.PurchaseDate?.Month.ToString("D2") + ".html";
                                <span style='border:1.5pt solid;padding:3pt 2pt;margin:2pt'>&nbsp;<a href=@ebURL target=_new>eyebonds.info</a>&nbsp;↗️</span><br/>
                            }

                            <br/><br/>
                            @* @((MarkupString)FormatUtilities.Bold("Record Transaction:"))<br/>
                            <button @onclick='@(e=>buy(e,account,account.SelectedInvestment))'>Buy @account.SelectedInvestment.Ticker</button>
                            <button @onclick='@(e=>sell(e,account,account.SelectedInvestment))'>Sell @account.SelectedInvestment.Ticker</button>
                            <br/><br/>
                            <button @onclick='@(e=>dividend(e,account,account.SelectedInvestment))'>@account.SelectedInvestment.Ticker Cash Dividend</button>
                            <button @onclick='@(e=>reinvestDividend(e,account,account.SelectedInvestment))'>@account.SelectedInvestment.Ticker Reinvest Dividend</button>
                            <br/><br/> *@
                            break;
                        case "Buy":
                        case "Sale":
                            @((MarkupString)FormatUtilities.Bold("Record " + account.SelectedInvestment.SelectedTransaction.Type + " of " + account.SelectedInvestment.Ticker + ":", ShowMarkup))<br/>
                            <span><input style=text-align:right;width:80px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Shares @bind-Value:event=onchange /> shares</span>
                            <span>@@ $ <input style=text-align:right;width:80px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Price @bind-Value:event=onchange /> / share</span><br/>
                            <span>= $ <input style=text-align:right;width:80px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Value @bind-Value:event=onchange /></span><br/>
                            <span>money transfered @(account.SelectedInvestment.SelectedTransaction.Type == "Sale" ? "to" : "from"):&nbsp;<span/>
                            @account.SelectedInvestment.SelectedTransaction?.OtherTicker
                            </span><br/>
                            @if(account.SelectedInvestment.SelectedTransaction.IsDraft)
                            {
                                <button @onclick='@(e=>cancel(e,account.SelectedInvestment))'>Cancel</button>
                            }
                            else
                            {
                                <button @onclick='@(e=>deleteTransaction(e,account,account.SelectedInvestment,account.SelectedInvestment.SelectedTransaction))'>Delete</button>
                            }
                            <span>&nbsp;</span>
                            <button @onclick='@(e=>plan(e,account,account.SelectedInvestment))'>Plan</button> <button @onclick='@(e=>commit(e,account,account.SelectedInvestment))'>Commit</button><br/>
                            break;
                        case "Dividend":
                            @((MarkupString)FormatUtilities.Bold("Record " + account.SelectedInvestment.SelectedTransaction.Type + " of " + account.SelectedInvestment.Ticker + ":", ShowMarkup))<br/>
                            <span>$ <input style=text-align:right;width:100px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Value @bind-Value:event=oninput /></span><br/>
                            <span>money transferred to:&nbsp;@account.SelectedInvestment.SelectedTransaction?.OtherTicker</span><br/><br/>
                            @if(account.SelectedInvestment.SelectedTransaction.IsDraft)
                            {
                                <button @onclick='@(e=>cancel(e,account.SelectedInvestment))'>Cancel</button>
                            }
                            else
                            {
                                <button @onclick='@(e=>deleteTransaction(e,account,account.SelectedInvestment,account.SelectedInvestment.SelectedTransaction))'>Delete</button>
                            }
                            <span>&nbsp;</span>
                            <button @onclick='@(e=>plan(e,account,account.SelectedInvestment))'>Plan</button> <button @onclick='@(e=>commit(e,account,account.SelectedInvestment))'>Commit</button><br/>
                            break;
                        case "Reinvest Dividend":
                            @((MarkupString)FormatUtilities.Bold("Record " + account.SelectedInvestment.SelectedTransaction.Type + " of " + account.SelectedInvestment.Ticker + ":", ShowMarkup))<br/>
                            <span><input type=text style=text-align:right;width:80px @bind-Value=account.SelectedInvestment.SelectedTransaction.Shares @bind-Value:event=onchange/> shares</span>
                            <span>@@&nbsp;&nbsp;$ <input style=text-align:right;width:80px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Price @bind-Value:event=onchange /> / share</span><br/>
                            <span>= $ <input style=text-align:right;width:100px type=text @bind-Value=account.SelectedInvestment.SelectedTransaction.Value @bind-Value:event=onchange /> total</span><br/><br/>
                            @if(account.SelectedInvestment.SelectedTransaction.IsDraft)
                            {
                                <button @onclick='@(e=>cancel(e,account.SelectedInvestment))'>Cancel</button>
                            }
                            else
                            {
                                <button @onclick='@(e=>deleteTransaction(e,account,account.SelectedInvestment,account.SelectedInvestment.SelectedTransaction))'>Delete</button>
                            }
                            <span>&nbsp;</span>
                            <button @onclick='@(e=>plan(e,account,account.SelectedInvestment))'>Plan</button> <button @onclick='@(e=>commit(e,account,account.SelectedInvestment))'>Commit</button><br/>
                            break;
                        case "Edit":
                            <span>@((MarkupString)FormatUtilities.Bold("Edit:", ShowMarkup))</span><br/>
                            <table>
                                <tr>
                                    <td style=text-align:right>
                                        <label>Ticker: </label>
                                    </td>
                                    <td style=padding-left:8px>
                                        <input type=text style=width:70px @bind-Value=account.SelectedInvestment.Ticker @bind-Value:event=oninput placeholder='ticker'/>
                                    </td>
                                </tr>
                                @if (account.SelectedInvestment.IsIBond)
                                {
                                    <tr>
                                        <td style=text-align:right>
                                            <label>Purchase Date: </label>
                                        </td>
                                        <td style=padding-left:8px>
                                            <input type=text style=width:100px @bind-Value=account.SelectedInvestment.PurchaseDate @bind-Value:event=oninput placeholder='m/yyyy'/>
                                        </td>
                                    </tr>
                                    <tr>
                                        <td style=text-align:right>
                                            <label>Cost Basis: </label>
                                        </td>
                                        <td style=padding-left:8px colspan=3>
                                            $<input type=text style=width:100px;text-align:right @bind-Value=account.SelectedInvestment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                        </td>
                                        <td></td>
                                    </tr>
                                } else {
                                    <tr>
                                        <td style=text-align:right>
                                            <label>Quantity: </label>
                                        </td>
                                        <td style=padding-left:8px>
                                            <input type=text style=width:100px;text-align:right @bind-Value=account.SelectedInvestment.SharesPIN @bind-Value:event=onchange placeholder='shares'/></td>
                                        <td></td>
                                    </tr>
                                    <tr>
                                        <td style=text-align:right>
                                            <label>Price: </label>
                                        </td>                                    
                                        <td style=text-align:left;padding-left:8px>
                                            $<input type=text style=width:80px;text-align:right @bind-Value=account.SelectedInvestment.Price @bind-Value:event=onchange placeholder='price'/>
                                        </td>
                                        <td>
                                            <button @onclick=@refreshPrices title="fetch prices">fetch</button>
                                        </td>
                                    </tr>
                                }

                                <tr>
                                    <td style=text-align:right>
                                        <label>Balance: </label>
                                    </td>
                                    <td style=padding-left:8px colspan=1>
                                        $<input type=text style=width:100px;text-align:right @bind-Value=account.SelectedInvestment.ValuePIN @bind-Value:event=onchange placeholder='value'/>
                                    </td>
                                    @if (account.SelectedInvestment.IsIBond)
                                    {
                                        <td>
                                            <button @onclick='@(e=>account.SelectedInvestment.CalculateIBondValue())'>calculate</button>
                                        </td>
                                    }
                                </tr>
                                @if (!account.SelectedInvestment.IsIBond)
                                {
                                    <tr>
                                        <td style=text-align:right>
                                            <label>Cost Basis: </label>
                                        </td>
                                        <td style=padding-left:8px colspan=3>
                                            $<input type=text style=width:100px;text-align:right @bind-Value=account.SelectedInvestment.CostBasis @bind-Value:event=oninput placeholder='cost basis'/>
                                        </td>
                                        <td></td>
                                    </tr>
                                }
                                
                                <tr>
                                    <td style=text-align:right>
                                        <label>Name:</label>
                                    </td>
                                    <td colspan=3><input type=text style=width:300px @bind-Value=account.SelectedInvestment.Name @bind-Value:event=oninput placeholder='name'/></td>
                                </tr>
                                <tr>
                                    <td style=text-align:right>
                                        <label>Asset Type:</label>
                                    </td>
                                    <td colspan=3>
                                        <select @bind=account.SelectedInvestment.AssetType>
                                            @foreach (AssetType assetType in (AssetType[]) Enum.GetValues(typeof(AssetType))) {
                                                <option>@assetType</option>
                                            }
                                        </select>
                                        <span style=color:red>&nbsp;*</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td style=text-align:right>
                                        <label style=padding-left:16px>Expense Ratio:</label>
                                    </td>
                                    <td colspan=3>
                                        <input width= type=text style=width:100px;text-align:right @bind-Value=account.SelectedInvestment.ExpenseRatio @bind-Value:event=oninput placeholder='exp. ratio'/>%
                                    </td>
                                </tr>
                                @if (account.SelectedInvestment.AssetType == global::AssetType.StocksAndBonds_ETF || account.SelectedInvestment.AssetType == global::AssetType.StocksAndBonds_Fund) {
                                    <tr>
                                        <td colspan=4 style=text-align:right>
                                            <div style=margin-right:50px><label>US Stock:</label> <input type=text style=width:60px @bind-Value=account.SelectedInvestment.USStockPercent @bind-Value:event=oninput />%</div>
                                            <div style=margin-right:50px><label>International Stock:</label> <input type=text style=width:60px @bind-Value=account.SelectedInvestment.InternationalStockPercent @bind-Value:event=oninput />%</div>
                                            <div style=margin-right:50px><label>US Bonds:</label> <input type=text style=width:60px @bind-Value=account.SelectedInvestment.USBondsPercent @bind-Value:event=oninput />%</div>
                                            <div style=margin-right:50px><label>International Bonds:</label> <input type=text style=width:60px @bind-Value=account.SelectedInvestment.InternationalBondsPercent @bind-Value:event=oninput />%</div>
                                            <div style=margin-right:50px><label>Cash:</label> <input type=text style=width:60px @bind-Value=account.SelectedInvestment.CashPercent @bind-Value:event=oninput />%</div>
                                            <div style=margin-right:50px><label><b>Total:</b></label>
                                                <span style=text-align:left;width:60px;display:inline-block>
                                                    @(account.SelectedInvestment.TotalPercent)%
                                                    @if (investment.IsBalancedFund && !investment.DoesBalancedFundEqual100) { <span style=color:red>^</span> }
                                                </span>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </table>
                            <button @onclick='@(e=>commit(e,account,account.SelectedInvestment))'>Save</button><br/>
                            break;
                    }
                }
            }
        }

        
        @if (accountsMatchingFilter == 0 && Query == "ticker:IBOND")
        {
            <br/>
            <span>Track a Treasury Direct account:&nbsp;</span><button @onclick=addTreasuryDirectAccount>➕ account</button>
            <br/><br/>
        }
    </div>
} else if (appData.FamilyData == null) {
    Navigation.NavigateTo("/portfolio-tracker");
}

@code {
    bool editingAccountInfo = false;
    async void editAccountInfo(MouseEventArgs e, Account account) {
        account.Edit = !account.Edit;
        if (!account.Edit)
        {
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }
    
    void buy(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = new Transaction() { Type = "Buy", IsDraft = true, OtherTicker = account.SettlementInvestment?.Ticker };
    }
    
    void sell(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = new Transaction() { Type = "Sale", IsDraft = true, OtherTicker = account.SettlementInvestment?.Ticker };
    }
    
    void dividend(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = new Transaction() { Type = "Dividend", IsDraft = true, OtherTicker = account.SettlementInvestment?.Ticker };
    }

    void reinvestDividend(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = new Transaction() { Type = "Reinvest Dividend", IsDraft = true };
    }

    void edit(MouseEventArgs e, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = new Transaction() { Type = "Edit" };
    }

    void plan(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        var selectedTransaction = selectedInvestment.SelectedTransaction;
        if (selectedTransaction.IsDraft)
        {
            selectedInvestment.Transactions.Add(selectedInvestment.SelectedTransaction);
            if (selectedInvestment.SelectedTransaction.OtherTicker != null)
            {
                account.FindInvestment(selectedInvestment.SelectedTransaction.OtherTicker).Transactions.Add(selectedInvestment.SelectedTransaction);
            }

            selectedInvestment.SelectedTransaction.IsDraft = false;        
        }

        switch (selectedTransaction.Type) 
        {
            case "Buy":
                selectedTransaction.HostTicker = selectedInvestment.Ticker;
                if (account.SettlementInvestment != null)
                {
                    selectedTransaction.OtherTicker = account.SettlementInvestment.Ticker;
                }

                break;
            case "Sale":
                selectedTransaction.HostTicker = selectedInvestment.Ticker;
                if (account.SettlementInvestment != null)
                {
                    selectedTransaction.OtherTicker = account.SettlementInvestment.Ticker;
                }

                break;
            case "Dividend":
                selectedTransaction.HostTicker = selectedInvestment.Ticker;
                break;
            case "Reinvest Dividend":
                selectedTransaction.HostTicker = selectedInvestment.Ticker;
                if (account.SettlementInvestment != null)
                {
                    selectedTransaction.OtherTicker = account.SettlementInvestment.Ticker;
                }
                
                break;
        }

        selectedInvestment.SelectedTransaction = null;
    }

    async void commit(MouseEventArgs e, Account account, Investment selectedInvestment)
    {
        plan(e, account, selectedInvestment);
        if (selectedInvestment.CostBasis != null && selectedInvestment.PurchaseDate.HasValue && selectedInvestment.AssetType == global::AssetType.IBond)
        {
            await selectedInvestment.CalculateIBondValue();
        }

        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
    }

    void cancel(MouseEventArgs e, Investment selectedInvestment)
    {
        selectedInvestment.SelectedTransaction = null;
    }

    void deleteTransaction(MouseEventArgs e, Account account, Investment selectedInvestment, Transaction selectedTransaction)
    {
        selectedInvestment.Transactions.Remove(selectedTransaction);
        if (selectedTransaction.OtherTicker != selectedInvestment.Ticker && selectedTransaction.OtherTicker != null) 
        {
            account.FindInvestment(selectedTransaction.OtherTicker).Transactions.Remove(selectedTransaction);
        }
        
        if (selectedTransaction.HostTicker != selectedInvestment.Ticker)
        {
            account.FindInvestment(selectedTransaction.HostTicker).Transactions.Remove(selectedTransaction);
        }

        selectedInvestment.SelectedTransaction = null;
    }

    private async void deleteSelectedInvestment(MouseEventArgs e, Investment selectedInvestment)
    {
        if (appData.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            foreach (var account in accounts) 
            {
                if (account.View) 
                {
                    account.Investments.Remove(selectedInvestment);
                    account.SelectedInvestment = null;
                    await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
                }
            }
        }
    }

    void chooseTransaction(MouseEventArgs e, int accIndex, int invIndex, int transIndex)
    {
        if (appData.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            var accountIndex = 0;
            foreach (var account in accounts)
            {
                var investmentIndex = 0;
                foreach (var investment in account.Investments) {
                    if (invIndex == investmentIndex && accIndex == accountIndex)
                    {
                        investment.Selected = !investment.Selected;
                        investment.SelectedTransaction = null;
                        if (account.SelectedInvestment != null) 
                        {
                            account.SelectedInvestment.Selected = false;
                            account.SelectedInvestment = null;
                        }

                        if (investment.Selected) 
                        {
                            account.SelectedInvestment = investment;
                        }
                    }

                    var transactionIndex = 0;
                    foreach (var transaction in investment.Transactions)
                    {
                        if (invIndex == investmentIndex && accIndex == accountIndex && transactionIndex == transIndex)
                        {
                            transaction.Selected = !transaction.Selected;
                        }

                        if (transaction.Selected)
                        {
                            investment.SelectedTransaction = transaction;
                        }
                    }

                    investmentIndex++;
                }

                accountIndex++;
            }
        }
    }

    void chooseInvestment(MouseEventArgs e, int accIndex, int index)
    {
        if (appData.FamilyData is not null) {
            var accounts = appData.FamilyData.Accounts;
            var accountIndex = 0;
            foreach (var account in accounts)
            {
                var investmentIndex = 0;
                foreach (var investment in account.Investments) {
                    if (index == investmentIndex && accIndex == accountIndex)
                    {
                        investment.Selected = !investment.Selected;
                        investment.SelectedTransaction = null;
                        if (account.SelectedInvestment != null) 
                        {
                            account.SelectedInvestment.Selected = false;
                            account.SelectedInvestment = null;
                        }

                        if (investment.Selected) 
                        {
                            account.SelectedInvestment = investment;
                        }
                    }

                    investmentIndex++;
                }

                accountIndex++;
            }
        }
    }

    bool showEditAccountHelpers = false;
    string refreshButtonText = "🔃 Prices";
    bool refreshButtonDisabled = false;
    bool assetAllocationEditing = false;
    bool taxFilingStatusEditing = false;
    int? accountIndexViewing = null;
    public enum Mode {
        normal = 0,
        href,
        text,
    }
    public bool pastTotal = false;
    public int runningTotal = 0;

    public string checkTotal(int? itemTotal) {
        if (appData.FamilyData is not null) {
            runningTotal += itemTotal ?? 0;
            if (!pastTotal) {
                pastTotal = appData.FamilyData.PlannedSavings <= runningTotal;

                if (pastTotal) {
                    return "<div>-------<br/><div>Planned savings " + (appData.FamilyData.PlannedSavings==runningTotal?"met":"exceeded") + " after " + FormatUtilities.formatMoney(itemTotal+(appData.FamilyData.PlannedSavings-runningTotal)) + " towards previous step</div>-------<br/></div>";
                }
            }
        }

        return "";
    }

    public string getPronoun(Person person)
    {
        return getPronoun(person, true);
    }

    public string getPronoun(Person person, bool inParanthesis)
    {
        if (person?.FamilyData != null && person.FamilyData.PersonCount > 1 && person.Identifier != null && person.Identifier != "None") {
            if (inParanthesis) { return "(" + person.Identifier + ")"; }
            else { return "\"" + person.Identifier + "\""; }
        }
        else
        {
            return "";
        }
    }

    [Parameter]
    public string? Query { get; set; }

    private bool loaded = false;
    public bool ShowMarkup { get; set; }
    public string? currentAccountIndex { get; set; }
    public int accountIndex = 0;
    public int investmentIndex = 0;
    private const string pagePath = "/portfolio-tracker";
    private const string folderName = pagePath + "/";
    private const string pageHeading = "Portfolio Editor";

    protected override async Task OnInitializedAsync()
    {
        loaded = true;
        Navigation.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private void ShowImport() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import");
    }

    private void showOpenBH() {
        @* showImport = !showImport;
        if (!showImport) {
            showError = false;
        } *@
        Navigation.NavigateTo("/import-accounts-bh");
    }

    private void addIBOND(MouseEventArgs e, int accountIndex)
    {
        if (appData.FamilyData is not null) {
            var account = appData.FamilyData.Accounts[accountIndex];
            if (account.SelectedInvestment != null)
            {
                account.SelectedInvestment.Selected = false;
            }

            account.SelectedInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds, Selected = true, Ticker = "IBOND" };
            account.Investments.Add(account.SelectedInvestment);

            account.SelectedInvestment.SelectedTransaction = new Transaction() { Type = "Edit" };
        }
    }

    private void addInvestment2(MouseEventArgs e, int accountIndex) {
        if (appData.FamilyData is not null) {
            var account = appData.FamilyData.Accounts[accountIndex];
            if (account.SelectedInvestment != null)
            {
                account.SelectedInvestment.Selected = false;
            }

            account.SelectedInvestment = new Investment(appData.FamilyData.PIN) { funds = Funds, Selected = true };
            account.Investments.Add(account.SelectedInvestment);

            account.SelectedInvestment.SelectedTransaction = new Transaction() { Type = "Edit" };
        }
    }

    void addAccountInline()
    {
        if (appData.FamilyData is not null) {
            var newAccount = new Account(appData.FamilyData.PIN);
            newAccount.View = true;
            newAccount.Edit = true;
            appData.FamilyData?.Accounts.Insert(0,newAccount);
        }
    }

    void addTreasuryDirectAccount()
    {
        var newAccount = new Account(appData.FamilyData.PIN) { Custodian = "Treasury Direct", AccountType = "Taxable" };
        newAccount.View = true;
        appData.FamilyData?.Accounts.Insert(0,newAccount);
        newAccount.Investments.Add(new Investment() { Ticker = "IBOND", AssetType = AssetType.IBond, Name = "I Bonds", ExpenseRatio = 0.0 });
    }

    private async void deleteAccount(MouseEventArgs e, int accountIndex)
    {
        if (appData.FamilyData is not null) {
            var accountToDelete = appData.FamilyData.Accounts[accountIndex];
            appData.FamilyData.Accounts.Remove(accountToDelete);
            accountIndexViewing = null;
            appData.FamilyData.UpdatePercentages();
            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }
    }

    private async Task LoadPortfolioForTopic(string topicStr) {
        var options = new JsonSerializerOptions() 
            {
                Converters =
                    {
                        new JsonStringEnumConverter(JsonNamingPolicy.CamelCase)
                    }
            };
        var topicJsonUri = "https://raw.githubusercontent.com/bogle-tools/financial-variables/main/data/portfolios/" + topicStr + ".json";
        var stream = await Http.GetStreamAsync(topicJsonUri);
        appData.FamilyData = await FamilyData.LoadFromJsonStream(appData, stream, options);
    }

    private async Task CopyTextToClipboard()
    {
        var text = await JS.InvokeAsync<string>("getTableInnerText");
        text = text.Replace("\n✏️\t","");
        text = text.Replace("✏️\t","");
        text = text.Replace("Show Portfolio Analysis\n", "");
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    private async Task refreshPrices() {
        refreshButtonText = "Updating...";
        refreshButtonDisabled = true;
        await appData.FamilyData.RefreshPrices(Http);
        await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        refreshButtonText = "🔃 Prices";
        refreshButtonDisabled = false;
    }

    private int? PINEntry { get; set; }
    private void setPIN() {
        if (appData.FamilyData is not null) {
            if (PINEntry != null) {
                appData.FamilyData.PIN = PINEntry;
            }
        }
    }

    private (double? change, double? percentChange) portfolioChange() 
    {
        if (appData.FamilyData is not null) {
            double? change = 0.0;
            double? total = 0.0;
            foreach (var investment in appData.FamilyData.GroupedInvestments)
            {
                total += investment.Value ?? 0.0;
                if (investment.PercentChange != null)
                {
                    change += (investment.Price - investment.PreviousClose) * investment.SharesPIN;
                }
            }

            var startOfDayTotal = total - change;
            return change == 0.0 ? (null, null) : (change, change/startOfDayTotal * 100.0);
        }
        else 
        {
            return (null, null);
        }
    }

    private void navWithBackStack()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/profiles");
    }

    private void navToAccounts()
    {
        appData.LastPageUri = Navigation.Uri;
        Navigation.NavigateTo("/portfolio-tracker");
    }

    async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        if (appData != null && appData.FamilyData != null) {
            foreach (var account in appData.FamilyData.Accounts) {
                if (account.View) {
                    account.View = false;
                    account.SelectedInvestment = null;
                    foreach (var investment in account.Investments)
                    {
                        investment.Selected = false;
                    }
                }
            }

            await ProfileUtilities.Save(appData.CurrentProfileName, appData.FamilyData);
        }

        Navigation.LocationChanged -= LocationChanged;
    }
}
